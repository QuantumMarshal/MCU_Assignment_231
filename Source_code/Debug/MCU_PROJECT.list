
MCU_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080040fc  080040fc  000140fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004178  08004178  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08004178  08004178  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004178  08004178  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08004180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  200000d8  08004258  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08004258  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f219  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d0  00000000  00000000  0002f31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000315f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00032368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001876d  00000000  00000000  00032fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100a3  00000000  00000000  0004b72d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b262  00000000  00000000  0005b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6a32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b4  00000000  00000000  000e6a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d8 	.word	0x200000d8
 8000128:	00000000 	.word	0x00000000
 800012c:	080040e4 	.word	0x080040e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000dc 	.word	0x200000dc
 8000148:	080040e4 	.word	0x080040e4

0800014c <isButtonPressed>:
int KeyReg3[NUM_BUTTON] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int TimeOutForKeyPress[NUM_BUTTON] =  {200, 200, 200, 200};
int button_flag[NUM_BUTTON] = {0, 0, 0, 0};

int isButtonPressed(int num){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[num] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[num] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000f4 	.word	0x200000f4

08000180 <subKeyProcess>:

void subKeyProcess(int num){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[num]=1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000f4 	.word	0x200000f4

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i=0; i < NUM_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e0a6      	b.n	80002fa <getKeyInput+0x15a>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a57      	ldr	r2, [pc, #348]	; (800030c <getKeyInput+0x16c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4956      	ldr	r1, [pc, #344]	; (8000310 <getKeyInput+0x170>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a55      	ldr	r2, [pc, #340]	; (8000314 <getKeyInput+0x174>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4951      	ldr	r1, [pc, #324]	; (800030c <getKeyInput+0x16c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b03      	cmp	r3, #3
 80001d0:	d846      	bhi.n	8000260 <getKeyInput+0xc0>
 80001d2:	a201      	add	r2, pc, #4	; (adr r2, 80001d8 <getKeyInput+0x38>)
 80001d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001d8:	080001e9 	.word	0x080001e9
 80001dc:	08000207 	.word	0x08000207
 80001e0:	08000225 	.word	0x08000225
 80001e4:	08000243 	.word	0x08000243
		//Add your button here
		switch (i){
		case 0:
			KeyReg0[i] = HAL_GPIO_ReadPin(PED_BTN_GPIO_Port, pin[i]);
 80001e8:	4a4b      	ldr	r2, [pc, #300]	; (8000318 <getKeyInput+0x178>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001f0:	4619      	mov	r1, r3
 80001f2:	484a      	ldr	r0, [pc, #296]	; (800031c <getKeyInput+0x17c>)
 80001f4:	f001 fc3e 	bl	8001a74 <HAL_GPIO_ReadPin>
 80001f8:	4603      	mov	r3, r0
 80001fa:	4619      	mov	r1, r3
 80001fc:	4a45      	ldr	r2, [pc, #276]	; (8000314 <getKeyInput+0x174>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000204:	e02d      	b.n	8000262 <getKeyInput+0xc2>
		case 1:
			KeyReg0[i] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, pin[i]);
 8000206:	4a44      	ldr	r2, [pc, #272]	; (8000318 <getKeyInput+0x178>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800020e:	4619      	mov	r1, r3
 8000210:	4842      	ldr	r0, [pc, #264]	; (800031c <getKeyInput+0x17c>)
 8000212:	f001 fc2f 	bl	8001a74 <HAL_GPIO_ReadPin>
 8000216:	4603      	mov	r3, r0
 8000218:	4619      	mov	r1, r3
 800021a:	4a3e      	ldr	r2, [pc, #248]	; (8000314 <getKeyInput+0x174>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000222:	e01e      	b.n	8000262 <getKeyInput+0xc2>
		case 2:
			KeyReg0[i] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, pin[i]);
 8000224:	4a3c      	ldr	r2, [pc, #240]	; (8000318 <getKeyInput+0x178>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800022c:	4619      	mov	r1, r3
 800022e:	483b      	ldr	r0, [pc, #236]	; (800031c <getKeyInput+0x17c>)
 8000230:	f001 fc20 	bl	8001a74 <HAL_GPIO_ReadPin>
 8000234:	4603      	mov	r3, r0
 8000236:	4619      	mov	r1, r3
 8000238:	4a36      	ldr	r2, [pc, #216]	; (8000314 <getKeyInput+0x174>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000240:	e00f      	b.n	8000262 <getKeyInput+0xc2>
		case 3:
			KeyReg0[i] = HAL_GPIO_ReadPin(BTN3_GPIO_Port, pin[i]);
 8000242:	4a35      	ldr	r2, [pc, #212]	; (8000318 <getKeyInput+0x178>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800024a:	4619      	mov	r1, r3
 800024c:	4834      	ldr	r0, [pc, #208]	; (8000320 <getKeyInput+0x180>)
 800024e:	f001 fc11 	bl	8001a74 <HAL_GPIO_ReadPin>
 8000252:	4603      	mov	r3, r0
 8000254:	4619      	mov	r1, r3
 8000256:	4a2f      	ldr	r2, [pc, #188]	; (8000314 <getKeyInput+0x174>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800025e:	e000      	b.n	8000262 <getKeyInput+0xc2>
		default:
			break;
 8000260:	bf00      	nop
		}


		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000262:	4a2a      	ldr	r2, [pc, #168]	; (800030c <getKeyInput+0x16c>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026a:	492a      	ldr	r1, [pc, #168]	; (8000314 <getKeyInput+0x174>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000272:	429a      	cmp	r2, r3
 8000274:	d13e      	bne.n	80002f4 <getKeyInput+0x154>
 8000276:	4a25      	ldr	r2, [pc, #148]	; (800030c <getKeyInput+0x16c>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027e:	4924      	ldr	r1, [pc, #144]	; (8000310 <getKeyInput+0x170>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000286:	429a      	cmp	r2, r3
 8000288:	d134      	bne.n	80002f4 <getKeyInput+0x154>
			if (KeyReg2[i] != KeyReg3[i]){
 800028a:	4a21      	ldr	r2, [pc, #132]	; (8000310 <getKeyInput+0x170>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000292:	4924      	ldr	r1, [pc, #144]	; (8000324 <getKeyInput+0x184>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800029a:	429a      	cmp	r2, r3
 800029c:	d016      	beq.n	80002cc <getKeyInput+0x12c>
				KeyReg3[i] = KeyReg2[i];
 800029e:	4a1c      	ldr	r2, [pc, #112]	; (8000310 <getKeyInput+0x170>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002a6:	491f      	ldr	r1, [pc, #124]	; (8000324 <getKeyInput+0x184>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 80002ae:	4a1d      	ldr	r2, [pc, #116]	; (8000324 <getKeyInput+0x184>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d11c      	bne.n	80002f4 <getKeyInput+0x154>
					TimeOutForKeyPress[i] = 200;
 80002ba:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <getKeyInput+0x188>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	21c8      	movs	r1, #200	; 0xc8
 80002c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f7ff ff5b 	bl	8000180 <subKeyProcess>
 80002ca:	e013      	b.n	80002f4 <getKeyInput+0x154>
				}
			}

			else{ //press without release
				TimeOutForKeyPress[i]--;
 80002cc:	4a16      	ldr	r2, [pc, #88]	; (8000328 <getKeyInput+0x188>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d4:	1e5a      	subs	r2, r3, #1
 80002d6:	4914      	ldr	r1, [pc, #80]	; (8000328 <getKeyInput+0x188>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 80002de:	4a12      	ldr	r2, [pc, #72]	; (8000328 <getKeyInput+0x188>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d104      	bne.n	80002f4 <getKeyInput+0x154>
					KeyReg3[i] = NORMAL_STATE;
 80002ea:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <getKeyInput+0x184>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2101      	movs	r1, #1
 80002f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i < NUM_BUTTON; i++){
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3301      	adds	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	f77f af55 	ble.w	80001ac <getKeyInput+0xc>
				}

			}
		}
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000018 	.word	0x20000018
 8000310:	20000028 	.word	0x20000028
 8000314:	20000008 	.word	0x20000008
 8000318:	20000000 	.word	0x20000000
 800031c:	40010800 	.word	0x40010800
 8000320:	40010c00 	.word	0x40010c00
 8000324:	20000038 	.word	0x20000038
 8000328:	20000048 	.word	0x20000048

0800032c <offAllLed>:
 */

#include "led_control.h"

// TURN OFF LED
void offAllLed(){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TF_LED_1_GPIO_Port, TF_LED_1_Pin, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000336:	4810      	ldr	r0, [pc, #64]	; (8000378 <offAllLed+0x4c>)
 8000338:	f001 fbb3 	bl	8001aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_2_GPIO_Port, TF_LED_2_Pin, RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2108      	movs	r1, #8
 8000340:	480e      	ldr	r0, [pc, #56]	; (800037c <offAllLed+0x50>)
 8000342:	f001 fbae 	bl	8001aa2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TF_LED_3_GPIO_Port, TF_LED_3_Pin, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	2120      	movs	r1, #32
 800034a:	480c      	ldr	r0, [pc, #48]	; (800037c <offAllLed+0x50>)
 800034c:	f001 fba9 	bl	8001aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_4_GPIO_Port, TF_LED_4_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2110      	movs	r1, #16
 8000354:	4809      	ldr	r0, [pc, #36]	; (800037c <offAllLed+0x50>)
 8000356:	f001 fba4 	bl	8001aa2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PED_LED_1_GPIO_Port, PED_LED_1_Pin, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000360:	4806      	ldr	r0, [pc, #24]	; (800037c <offAllLed+0x50>)
 8000362:	f001 fb9e 	bl	8001aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LED_2_GPIO_Port, PED_LED_2_Pin, RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800036c:	4802      	ldr	r0, [pc, #8]	; (8000378 <offAllLed+0x4c>)
 800036e:	f001 fb98 	bl	8001aa2 <HAL_GPIO_WritePin>
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40010800 	.word	0x40010800
 800037c:	40010c00 	.word	0x40010c00

08000380 <offPEDLed>:

	HAL_GPIO_WritePin(TF_LED_3_GPIO_Port, TF_LED_3_Pin, RESET);
	HAL_GPIO_WritePin(TF_LED_4_GPIO_Port, TF_LED_4_Pin, RESET);
}

void offPEDLed(){
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_LED_1_GPIO_Port, PED_LED_1_Pin, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <offPEDLed+0x20>)
 800038c:	f001 fb89 	bl	8001aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LED_2_GPIO_Port, PED_LED_2_Pin, RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000396:	4803      	ldr	r0, [pc, #12]	; (80003a4 <offPEDLed+0x24>)
 8000398:	f001 fb83 	bl	8001aa2 <HAL_GPIO_WritePin>
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40010c00 	.word	0x40010c00
 80003a4:	40010800 	.word	0x40010800

080003a8 <onTFRed1>:

// TURN ON TRAFFIC LIGHT 1
void onTFRed1() {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TF_LED_1_GPIO_Port, TF_LED_1_Pin, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <onTFRed1+0x20>)
 80003b4:	f001 fb75 	bl	8001aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_2_GPIO_Port, TF_LED_2_Pin, RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2108      	movs	r1, #8
 80003bc:	4803      	ldr	r0, [pc, #12]	; (80003cc <onTFRed1+0x24>)
 80003be:	f001 fb70 	bl	8001aa2 <HAL_GPIO_WritePin>
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40010800 	.word	0x40010800
 80003cc:	40010c00 	.word	0x40010c00

080003d0 <onTFGreen1>:
void onTFGreen1(){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TF_LED_1_GPIO_Port, TF_LED_1_Pin, RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <onTFGreen1+0x20>)
 80003dc:	f001 fb61 	bl	8001aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_2_GPIO_Port, TF_LED_2_Pin, SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	2108      	movs	r1, #8
 80003e4:	4803      	ldr	r0, [pc, #12]	; (80003f4 <onTFGreen1+0x24>)
 80003e6:	f001 fb5c 	bl	8001aa2 <HAL_GPIO_WritePin>
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40010800 	.word	0x40010800
 80003f4:	40010c00 	.word	0x40010c00

080003f8 <onTFYellow1>:
void onTFYellow1(){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TF_LED_1_GPIO_Port, TF_LED_1_Pin, SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <onTFYellow1+0x20>)
 8000404:	f001 fb4d 	bl	8001aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_2_GPIO_Port, TF_LED_2_Pin, SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2108      	movs	r1, #8
 800040c:	4803      	ldr	r0, [pc, #12]	; (800041c <onTFYellow1+0x24>)
 800040e:	f001 fb48 	bl	8001aa2 <HAL_GPIO_WritePin>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010800 	.word	0x40010800
 800041c:	40010c00 	.word	0x40010c00

08000420 <onTFRed2>:

// TURN ON TRAFFIC LIGHT 2
void onTFRed2(){
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TF_LED_3_GPIO_Port, TF_LED_3_Pin, SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2120      	movs	r1, #32
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <onTFRed2+0x1c>)
 800042a:	f001 fb3a 	bl	8001aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_4_GPIO_Port, TF_LED_4_Pin, RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2110      	movs	r1, #16
 8000432:	4802      	ldr	r0, [pc, #8]	; (800043c <onTFRed2+0x1c>)
 8000434:	f001 fb35 	bl	8001aa2 <HAL_GPIO_WritePin>
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40010c00 	.word	0x40010c00

08000440 <onTFGreen2>:
void onTFGreen2(){
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TF_LED_3_GPIO_Port, TF_LED_3_Pin, RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2120      	movs	r1, #32
 8000448:	4804      	ldr	r0, [pc, #16]	; (800045c <onTFGreen2+0x1c>)
 800044a:	f001 fb2a 	bl	8001aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_4_GPIO_Port, TF_LED_4_Pin, SET);
 800044e:	2201      	movs	r2, #1
 8000450:	2110      	movs	r1, #16
 8000452:	4802      	ldr	r0, [pc, #8]	; (800045c <onTFGreen2+0x1c>)
 8000454:	f001 fb25 	bl	8001aa2 <HAL_GPIO_WritePin>
}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40010c00 	.word	0x40010c00

08000460 <onTFYellow2>:
void onTFYellow2(){
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TF_LED_3_GPIO_Port, TF_LED_3_Pin, SET);
 8000464:	2201      	movs	r2, #1
 8000466:	2120      	movs	r1, #32
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <onTFYellow2+0x1c>)
 800046a:	f001 fb1a 	bl	8001aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_4_GPIO_Port, TF_LED_4_Pin, SET);
 800046e:	2201      	movs	r2, #1
 8000470:	2110      	movs	r1, #16
 8000472:	4802      	ldr	r0, [pc, #8]	; (800047c <onTFYellow2+0x1c>)
 8000474:	f001 fb15 	bl	8001aa2 <HAL_GPIO_WritePin>
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40010c00 	.word	0x40010c00

08000480 <onPEDRed>:

// TURN ON PEDESTRIAN LIGHT
void onPEDRed(){
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_LED_1_GPIO_Port, PED_LED_1_Pin, SET);
 8000484:	2201      	movs	r2, #1
 8000486:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <onPEDRed+0x20>)
 800048c:	f001 fb09 	bl	8001aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LED_2_GPIO_Port, PED_LED_2_Pin, RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000496:	4803      	ldr	r0, [pc, #12]	; (80004a4 <onPEDRed+0x24>)
 8000498:	f001 fb03 	bl	8001aa2 <HAL_GPIO_WritePin>
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40010c00 	.word	0x40010c00
 80004a4:	40010800 	.word	0x40010800

080004a8 <onPEDGreen>:
void onPEDGreen(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_LED_1_GPIO_Port, PED_LED_1_Pin, RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <onPEDGreen+0x20>)
 80004b4:	f001 faf5 	bl	8001aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LED_2_GPIO_Port, PED_LED_2_Pin, SET);
 80004b8:	2201      	movs	r2, #1
 80004ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004be:	4803      	ldr	r0, [pc, #12]	; (80004cc <onPEDGreen+0x24>)
 80004c0:	f001 faef 	bl	8001aa2 <HAL_GPIO_WritePin>
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40010c00 	.word	0x40010c00
 80004cc:	40010800 	.word	0x40010800

080004d0 <toggleGreen>:

void toggleGreen(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PED_LED_2_GPIO_Port, PED_LED_2_Pin);
 80004d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <toggleGreen+0x14>)
 80004da:	f001 fafa 	bl	8001ad2 <HAL_GPIO_TogglePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40010800 	.word	0x40010800

080004e8 <HAL_UART_RxCpltCallback>:
	OUTPUT,
} eComState;

eComState com_state = INPUT;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_UART_RxCpltCallback+0x30>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d10a      	bne.n	8000510 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 80004fa:	2332      	movs	r3, #50	; 0x32
 80004fc:	2201      	movs	r2, #1
 80004fe:	4907      	ldr	r1, [pc, #28]	; (800051c <HAL_UART_RxCpltCallback+0x34>)
 8000500:	4807      	ldr	r0, [pc, #28]	; (8000520 <HAL_UART_RxCpltCallback+0x38>)
 8000502:	f002 fb5b 	bl	8002bbc <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000506:	2201      	movs	r2, #1
 8000508:	4904      	ldr	r1, [pc, #16]	; (800051c <HAL_UART_RxCpltCallback+0x34>)
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <HAL_UART_RxCpltCallback+0x38>)
 800050c:	f002 fbd9 	bl	8002cc2 <HAL_UART_Receive_IT>
	}
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40004400 	.word	0x40004400
 800051c:	20000120 	.word	0x20000120
 8000520:	200001a8 	.word	0x200001a8

08000524 <uart_communication_fsm>:

void uart_communication_fsm(){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	switch (com_state){
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <uart_communication_fsm+0x64>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d01c      	beq.n	800056a <uart_communication_fsm+0x46>
 8000530:	2b02      	cmp	r3, #2
 8000532:	dc22      	bgt.n	800057a <uart_communication_fsm+0x56>
 8000534:	2b00      	cmp	r3, #0
 8000536:	d022      	beq.n	800057e <uart_communication_fsm+0x5a>
 8000538:	2b01      	cmp	r3, #1
 800053a:	d000      	beq.n	800053e <uart_communication_fsm+0x1a>
		if (timer6_flag == 1){
			com_state = INPUT;
		}
		break;
	default:
		break;
 800053c:	e01d      	b.n	800057a <uart_communication_fsm+0x56>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str,"!7SEG: R1 = %d; R2 = %d#\r\n",timerRoad1, timerRoad2), 100);
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <uart_communication_fsm+0x68>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	4b13      	ldr	r3, [pc, #76]	; (8000590 <uart_communication_fsm+0x6c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4913      	ldr	r1, [pc, #76]	; (8000594 <uart_communication_fsm+0x70>)
 8000548:	4813      	ldr	r0, [pc, #76]	; (8000598 <uart_communication_fsm+0x74>)
 800054a:	f003 f991 	bl	8003870 <siprintf>
 800054e:	4603      	mov	r3, r0
 8000550:	b29a      	uxth	r2, r3
 8000552:	2364      	movs	r3, #100	; 0x64
 8000554:	4910      	ldr	r1, [pc, #64]	; (8000598 <uart_communication_fsm+0x74>)
 8000556:	4811      	ldr	r0, [pc, #68]	; (800059c <uart_communication_fsm+0x78>)
 8000558:	f002 fb30 	bl	8002bbc <HAL_UART_Transmit>
		com_state = OUTPUT;
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <uart_communication_fsm+0x64>)
 800055e:	2202      	movs	r2, #2
 8000560:	701a      	strb	r2, [r3, #0]
		setTimer6(100);
 8000562:	2064      	movs	r0, #100	; 0x64
 8000564:	f000 fb5a 	bl	8000c1c <setTimer6>
		break;
 8000568:	e00c      	b.n	8000584 <uart_communication_fsm+0x60>
		if (timer6_flag == 1){
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <uart_communication_fsm+0x7c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d107      	bne.n	8000582 <uart_communication_fsm+0x5e>
			com_state = INPUT;
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <uart_communication_fsm+0x64>)
 8000574:	2201      	movs	r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
		break;
 8000578:	e003      	b.n	8000582 <uart_communication_fsm+0x5e>
		break;
 800057a:	bf00      	nop
 800057c:	e002      	b.n	8000584 <uart_communication_fsm+0x60>
		break;
 800057e:	bf00      	nop
 8000580:	e000      	b.n	8000584 <uart_communication_fsm+0x60>
		break;
 8000582:	bf00      	nop
	}
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000064 	.word	0x20000064
 800058c:	20000118 	.word	0x20000118
 8000590:	2000011c 	.word	0x2000011c
 8000594:	080040fc 	.word	0x080040fc
 8000598:	200001f0 	.word	0x200001f0
 800059c:	200001a8 	.word	0x200001a8
 80005a0:	20000150 	.word	0x20000150

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 febe 	bl	8001328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f820 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f8d6 	bl	8000760 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005b4:	f000 f85e 	bl	8000674 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 f8a8 	bl	800070c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <main+0x40>)
 80005be:	f001 feff 	bl	80023c0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	4908      	ldr	r1, [pc, #32]	; (80005e8 <main+0x44>)
 80005c6:	4809      	ldr	r0, [pc, #36]	; (80005ec <main+0x48>)
 80005c8:	f002 fb7b 	bl	8002cc2 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 fad5 	bl	8000b7c <setTimer1>
  while (1)
  {
	  fsm_traffic_light();
 80005d2:	f000 fcd5 	bl	8000f80 <fsm_traffic_light>
	  fsm_manual();
 80005d6:	f000 f943 	bl	8000860 <fsm_manual>
	  fsm_ped();
 80005da:	f000 fa3b 	bl	8000a54 <fsm_ped>
	  uart_communication_fsm();
 80005de:	f7ff ffa1 	bl	8000524 <uart_communication_fsm>
	  fsm_traffic_light();
 80005e2:	e7f6      	b.n	80005d2 <main+0x2e>
 80005e4:	20000160 	.word	0x20000160
 80005e8:	20000120 	.word	0x20000120
 80005ec:	200001a8 	.word	0x200001a8

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b090      	sub	sp, #64	; 0x40
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	2228      	movs	r2, #40	; 0x28
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 f92e 	bl	8003860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000612:	2302      	movs	r3, #2
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000616:	2301      	movs	r3, #1
 8000618:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	2310      	movs	r3, #16
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000622:	2300      	movs	r3, #0
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000626:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0318 	add.w	r3, r7, #24
 8000630:	4618      	mov	r0, r3
 8000632:	f001 fa67 	bl	8001b04 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800063c:	f000 f90a 	bl	8000854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800064c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2102      	movs	r1, #2
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fcd2 	bl	8002004 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000666:	f000 f8f5 	bl	8000854 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3740      	adds	r7, #64	; 0x40
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_TIM2_Init+0x94>)
 8000692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000696:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_TIM2_Init+0x94>)
 800069a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800069e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_TIM2_Init+0x94>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_TIM2_Init+0x94>)
 80006a8:	223f      	movs	r2, #63	; 0x3f
 80006aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_TIM2_Init+0x94>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_TIM2_Init+0x94>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006b8:	4813      	ldr	r0, [pc, #76]	; (8000708 <MX_TIM2_Init+0x94>)
 80006ba:	f001 fe31 	bl	8002320 <HAL_TIM_Base_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006c4:	f000 f8c6 	bl	8000854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4619      	mov	r1, r3
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <MX_TIM2_Init+0x94>)
 80006d6:	f001 ffcd 	bl	8002674 <HAL_TIM_ConfigClockSource>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006e0:	f000 f8b8 	bl	8000854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_TIM2_Init+0x94>)
 80006f2:	f002 f9a3 	bl	8002a3c <HAL_TIMEx_MasterConfigSynchronization>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006fc:	f000 f8aa 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000160 	.word	0x20000160

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART2_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000718:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000744:	f002 f9ea 	bl	8002b1c <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f881 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200001a8 	.word	0x200001a8
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a2d      	ldr	r2, [pc, #180]	; (8000830 <MX_GPIO_Init+0xd0>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <MX_GPIO_Init+0xd0>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a27      	ldr	r2, [pc, #156]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_GPIO_Init+0xd0>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0308 	and.w	r3, r3, #8
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PED_LED_1_Pin|TF_LED_2_Pin|TF_LED_4_Pin|TF_LED_3_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80007aa:	4822      	ldr	r0, [pc, #136]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007ac:	f001 f979 	bl	8001aa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PED_LED_2_Pin|TF_LED_1_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80007b6:	4820      	ldr	r0, [pc, #128]	; (8000838 <MX_GPIO_Init+0xd8>)
 80007b8:	f001 f973 	bl	8001aa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PED_BTN_Pin BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = PED_BTN_Pin|BTN1_Pin|BTN2_Pin;
 80007bc:	2313      	movs	r3, #19
 80007be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4619      	mov	r1, r3
 80007ce:	481a      	ldr	r0, [pc, #104]	; (8000838 <MX_GPIO_Init+0xd8>)
 80007d0:	f000 ffcc 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN3_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin;
 80007d4:	2301      	movs	r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BTN3_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	4619      	mov	r1, r3
 80007e6:	4813      	ldr	r0, [pc, #76]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007e8:	f000 ffc0 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_LED_1_Pin TF_LED_2_Pin TF_LED_4_Pin TF_LED_3_Pin */
  GPIO_InitStruct.Pin = PED_LED_1_Pin|TF_LED_2_Pin|TF_LED_4_Pin|TF_LED_3_Pin;
 80007ec:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80007f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2302      	movs	r3, #2
 80007fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	4619      	mov	r1, r3
 8000804:	480b      	ldr	r0, [pc, #44]	; (8000834 <MX_GPIO_Init+0xd4>)
 8000806:	f000 ffb1 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_LED_2_Pin TF_LED_1_Pin */
  GPIO_InitStruct.Pin = PED_LED_2_Pin|TF_LED_1_Pin;
 800080a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800080e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2302      	movs	r3, #2
 800081a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	4619      	mov	r1, r3
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_GPIO_Init+0xd8>)
 8000824:	f000 ffa2 	bl	800176c <HAL_GPIO_Init>

}
 8000828:	bf00      	nop
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000
 8000834:	40010c00 	.word	0x40010c00
 8000838:	40010800 	.word	0x40010800

0800083c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	timerRun();
 8000844:	f000 f9fe 	bl	8000c44 <timerRun>
	getKeyInput();
 8000848:	f7ff fcaa 	bl	80001a0 <getKeyInput>
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <fsm_manual>:
 */


#include "manual_fsm.h"

void fsm_manual(){
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	switch (led_status){
 8000864:	4b75      	ldr	r3, [pc, #468]	; (8000a3c <fsm_manual+0x1dc>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	3b05      	subs	r3, #5
 800086a:	2b03      	cmp	r3, #3
 800086c:	f200 80da 	bhi.w	8000a24 <fsm_manual+0x1c4>
 8000870:	a201      	add	r2, pc, #4	; (adr r2, 8000878 <fsm_manual+0x18>)
 8000872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000876:	bf00      	nop
 8000878:	08000889 	.word	0x08000889
 800087c:	080008f1 	.word	0x080008f1
 8000880:	08000959 	.word	0x08000959
 8000884:	080009bf 	.word	0x080009bf
	case MAN_REDGREEN:
		onTFRed1();
 8000888:	f7ff fd8e 	bl	80003a8 <onTFRed1>
		onTFGreen2();
 800088c:	f7ff fdd8 	bl	8000440 <onTFGreen2>

		if (isButtonPressed(1) == 1){
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff fc5b 	bl	800014c <isButtonPressed>
 8000896:	4603      	mov	r3, r0
 8000898:	2b01      	cmp	r3, #1
 800089a:	d102      	bne.n	80008a2 <fsm_manual+0x42>
			led_status = SET_RED;
 800089c:	4b67      	ldr	r3, [pc, #412]	; (8000a3c <fsm_manual+0x1dc>)
 800089e:	2209      	movs	r2, #9
 80008a0:	701a      	strb	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1){
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff fc52 	bl	800014c <isButtonPressed>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d102      	bne.n	80008b4 <fsm_manual+0x54>
			led_status = MAN_REDYELLOW;
 80008ae:	4b63      	ldr	r3, [pc, #396]	; (8000a3c <fsm_manual+0x1dc>)
 80008b0:	2206      	movs	r2, #6
 80008b2:	701a      	strb	r2, [r3, #0]
		}
		if (isButtonPressed(3) == 1){
 80008b4:	2003      	movs	r0, #3
 80008b6:	f7ff fc49 	bl	800014c <isButtonPressed>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b01      	cmp	r3, #1
 80008be:	f040 80b3 	bne.w	8000a28 <fsm_manual+0x1c8>
			led_status = REDGREEN;
 80008c2:	4b5e      	ldr	r3, [pc, #376]	; (8000a3c <fsm_manual+0x1dc>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]

			timerRoad1 = redTime;
 80008c8:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <fsm_manual+0x1e0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a5d      	ldr	r2, [pc, #372]	; (8000a44 <fsm_manual+0x1e4>)
 80008ce:	6013      	str	r3, [r2, #0]
			timerRoad2 = greenTime;
 80008d0:	4b5d      	ldr	r3, [pc, #372]	; (8000a48 <fsm_manual+0x1e8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a5d      	ldr	r2, [pc, #372]	; (8000a4c <fsm_manual+0x1ec>)
 80008d6:	6013      	str	r3, [r2, #0]

			setTimer1(greenTime*100);
 80008d8:	4b5b      	ldr	r3, [pc, #364]	; (8000a48 <fsm_manual+0x1e8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2264      	movs	r2, #100	; 0x64
 80008de:	fb02 f303 	mul.w	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f94a 	bl	8000b7c <setTimer1>
			setTimer2(100);
 80008e8:	2064      	movs	r0, #100	; 0x64
 80008ea:	f000 f95b 	bl	8000ba4 <setTimer2>
		}

		break;
 80008ee:	e09b      	b.n	8000a28 <fsm_manual+0x1c8>

	case MAN_REDYELLOW:
		onTFRed1();
 80008f0:	f7ff fd5a 	bl	80003a8 <onTFRed1>
		onTFYellow2();
 80008f4:	f7ff fdb4 	bl	8000460 <onTFYellow2>

		if (isButtonPressed(1) == 1){
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff fc27 	bl	800014c <isButtonPressed>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b01      	cmp	r3, #1
 8000902:	d102      	bne.n	800090a <fsm_manual+0xaa>
			led_status = SET_RED;
 8000904:	4b4d      	ldr	r3, [pc, #308]	; (8000a3c <fsm_manual+0x1dc>)
 8000906:	2209      	movs	r2, #9
 8000908:	701a      	strb	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1){
 800090a:	2002      	movs	r0, #2
 800090c:	f7ff fc1e 	bl	800014c <isButtonPressed>
 8000910:	4603      	mov	r3, r0
 8000912:	2b01      	cmp	r3, #1
 8000914:	d102      	bne.n	800091c <fsm_manual+0xbc>
			led_status = MAN_GREENRED;
 8000916:	4b49      	ldr	r3, [pc, #292]	; (8000a3c <fsm_manual+0x1dc>)
 8000918:	2207      	movs	r2, #7
 800091a:	701a      	strb	r2, [r3, #0]
		}
		if (isButtonPressed(3) == 1){
 800091c:	2003      	movs	r0, #3
 800091e:	f7ff fc15 	bl	800014c <isButtonPressed>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	f040 8081 	bne.w	8000a2c <fsm_manual+0x1cc>
			led_status = REDYELLOW;
 800092a:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <fsm_manual+0x1dc>)
 800092c:	2202      	movs	r2, #2
 800092e:	701a      	strb	r2, [r3, #0]

			timerRoad1 = redTime;
 8000930:	4b43      	ldr	r3, [pc, #268]	; (8000a40 <fsm_manual+0x1e0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <fsm_manual+0x1e4>)
 8000936:	6013      	str	r3, [r2, #0]
			timerRoad2 = yellowTime;
 8000938:	4b45      	ldr	r3, [pc, #276]	; (8000a50 <fsm_manual+0x1f0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a43      	ldr	r2, [pc, #268]	; (8000a4c <fsm_manual+0x1ec>)
 800093e:	6013      	str	r3, [r2, #0]

			setTimer1(yellowTime*100);
 8000940:	4b43      	ldr	r3, [pc, #268]	; (8000a50 <fsm_manual+0x1f0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2264      	movs	r2, #100	; 0x64
 8000946:	fb02 f303 	mul.w	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f916 	bl	8000b7c <setTimer1>
			setTimer2(100);
 8000950:	2064      	movs	r0, #100	; 0x64
 8000952:	f000 f927 	bl	8000ba4 <setTimer2>
		}

		break;
 8000956:	e069      	b.n	8000a2c <fsm_manual+0x1cc>

	case MAN_GREENRED:
		onTFGreen1();
 8000958:	f7ff fd3a 	bl	80003d0 <onTFGreen1>
		onTFRed2();
 800095c:	f7ff fd60 	bl	8000420 <onTFRed2>

		if (isButtonPressed(1) == 1){
 8000960:	2001      	movs	r0, #1
 8000962:	f7ff fbf3 	bl	800014c <isButtonPressed>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	d102      	bne.n	8000972 <fsm_manual+0x112>
			led_status = SET_RED;
 800096c:	4b33      	ldr	r3, [pc, #204]	; (8000a3c <fsm_manual+0x1dc>)
 800096e:	2209      	movs	r2, #9
 8000970:	701a      	strb	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1){
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff fbea 	bl	800014c <isButtonPressed>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d102      	bne.n	8000984 <fsm_manual+0x124>
			led_status = MAN_YELLOWRED;
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <fsm_manual+0x1dc>)
 8000980:	2208      	movs	r2, #8
 8000982:	701a      	strb	r2, [r3, #0]
		}
		if (isButtonPressed(3) == 1){
 8000984:	2003      	movs	r0, #3
 8000986:	f7ff fbe1 	bl	800014c <isButtonPressed>
 800098a:	4603      	mov	r3, r0
 800098c:	2b01      	cmp	r3, #1
 800098e:	d14f      	bne.n	8000a30 <fsm_manual+0x1d0>
			led_status = GREENRED;
 8000990:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <fsm_manual+0x1dc>)
 8000992:	2203      	movs	r2, #3
 8000994:	701a      	strb	r2, [r3, #0]

			timerRoad1 = greenTime;
 8000996:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <fsm_manual+0x1e8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a2a      	ldr	r2, [pc, #168]	; (8000a44 <fsm_manual+0x1e4>)
 800099c:	6013      	str	r3, [r2, #0]
			timerRoad2 = redTime;
 800099e:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <fsm_manual+0x1e0>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a2a      	ldr	r2, [pc, #168]	; (8000a4c <fsm_manual+0x1ec>)
 80009a4:	6013      	str	r3, [r2, #0]

			setTimer1(greenTime*100);
 80009a6:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <fsm_manual+0x1e8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2264      	movs	r2, #100	; 0x64
 80009ac:	fb02 f303 	mul.w	r3, r2, r3
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f8e3 	bl	8000b7c <setTimer1>
			setTimer2(100);
 80009b6:	2064      	movs	r0, #100	; 0x64
 80009b8:	f000 f8f4 	bl	8000ba4 <setTimer2>
		}

		break;
 80009bc:	e038      	b.n	8000a30 <fsm_manual+0x1d0>

	case MAN_YELLOWRED:
		onTFYellow1();
 80009be:	f7ff fd1b 	bl	80003f8 <onTFYellow1>
		onTFRed2();
 80009c2:	f7ff fd2d 	bl	8000420 <onTFRed2>

		if (isButtonPressed(1) == 1){
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff fbc0 	bl	800014c <isButtonPressed>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d102      	bne.n	80009d8 <fsm_manual+0x178>
			led_status = SET_RED;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <fsm_manual+0x1dc>)
 80009d4:	2209      	movs	r2, #9
 80009d6:	701a      	strb	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1){
 80009d8:	2002      	movs	r0, #2
 80009da:	f7ff fbb7 	bl	800014c <isButtonPressed>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d102      	bne.n	80009ea <fsm_manual+0x18a>
			led_status = MAN_REDGREEN;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <fsm_manual+0x1dc>)
 80009e6:	2205      	movs	r2, #5
 80009e8:	701a      	strb	r2, [r3, #0]
		}
		if (isButtonPressed(3) == 1){
 80009ea:	2003      	movs	r0, #3
 80009ec:	f7ff fbae 	bl	800014c <isButtonPressed>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d11e      	bne.n	8000a34 <fsm_manual+0x1d4>
			led_status = YELLOWRED;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <fsm_manual+0x1dc>)
 80009f8:	2204      	movs	r2, #4
 80009fa:	701a      	strb	r2, [r3, #0]

			timerRoad1 = yellowTime;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <fsm_manual+0x1f0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <fsm_manual+0x1e4>)
 8000a02:	6013      	str	r3, [r2, #0]
			timerRoad2 = redTime;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <fsm_manual+0x1e0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <fsm_manual+0x1ec>)
 8000a0a:	6013      	str	r3, [r2, #0]

			setTimer1(yellowTime*100);
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <fsm_manual+0x1f0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2264      	movs	r2, #100	; 0x64
 8000a12:	fb02 f303 	mul.w	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f8b0 	bl	8000b7c <setTimer1>
			setTimer2(100);
 8000a1c:	2064      	movs	r0, #100	; 0x64
 8000a1e:	f000 f8c1 	bl	8000ba4 <setTimer2>
		}

		break;
 8000a22:	e007      	b.n	8000a34 <fsm_manual+0x1d4>

	default:
		break;
 8000a24:	bf00      	nop
 8000a26:	e006      	b.n	8000a36 <fsm_manual+0x1d6>
		break;
 8000a28:	bf00      	nop
 8000a2a:	e004      	b.n	8000a36 <fsm_manual+0x1d6>
		break;
 8000a2c:	bf00      	nop
 8000a2e:	e002      	b.n	8000a36 <fsm_manual+0x1d6>
		break;
 8000a30:	bf00      	nop
 8000a32:	e000      	b.n	8000a36 <fsm_manual+0x1d6>
		break;
 8000a34:	bf00      	nop
	}
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000104 	.word	0x20000104
 8000a40:	20000058 	.word	0x20000058
 8000a44:	20000118 	.word	0x20000118
 8000a48:	2000005c 	.word	0x2000005c
 8000a4c:	2000011c 	.word	0x2000011c
 8000a50:	20000060 	.word	0x20000060

08000a54 <fsm_ped>:
 *      Author: Admin
 */

#include "ped_fsm.h"

void fsm_ped(){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

	switch (ped_status){
 8000a58:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <fsm_ped+0x114>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d874      	bhi.n	8000b4a <fsm_ped+0xf6>
 8000a60:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <fsm_ped+0x14>)
 8000a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a66:	bf00      	nop
 8000a68:	08000a7d 	.word	0x08000a7d
 8000a6c:	08000aa5 	.word	0x08000aa5
 8000a70:	08000acb 	.word	0x08000acb
 8000a74:	08000af1 	.word	0x08000af1
 8000a78:	08000b17 	.word	0x08000b17
	case INIT:
		offPEDLed();
 8000a7c:	f7ff fc80 	bl	8000380 <offPEDLed>
		if (isButtonPressed(0) == 1){
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff fb63 	bl	800014c <isButtonPressed>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d162      	bne.n	8000b52 <fsm_ped+0xfe>
			ped_flag = 1;
 8000a8c:	4b37      	ldr	r3, [pc, #220]	; (8000b6c <fsm_ped+0x118>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	601a      	str	r2, [r3, #0]
			ped_status = led_status;
 8000a92:	4b37      	ldr	r3, [pc, #220]	; (8000b70 <fsm_ped+0x11c>)
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <fsm_ped+0x114>)
 8000a98:	701a      	strb	r2, [r3, #0]
			setTimer4(500);
 8000a9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a9e:	f000 f895 	bl	8000bcc <setTimer4>
		}
		break;
 8000aa2:	e056      	b.n	8000b52 <fsm_ped+0xfe>

	case REDGREEN:
		onPEDRed();
 8000aa4:	f7ff fcec 	bl	8000480 <onPEDRed>

		if (timer4_flag == 1){
 8000aa8:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <fsm_ped+0x120>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d152      	bne.n	8000b56 <fsm_ped+0x102>
			ped_status = INIT;
 8000ab0:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <fsm_ped+0x114>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
			ped_flag = 0;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <fsm_ped+0x118>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 f885 	bl	8000bcc <setTimer4>
			setTimer5(0);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 f896 	bl	8000bf4 <setTimer5>
		}

		break;
 8000ac8:	e045      	b.n	8000b56 <fsm_ped+0x102>

	case REDYELLOW:
		onPEDRed();
 8000aca:	f7ff fcd9 	bl	8000480 <onPEDRed>

		if (timer4_flag == 1){
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <fsm_ped+0x120>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d141      	bne.n	8000b5a <fsm_ped+0x106>
			ped_status = INIT;
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <fsm_ped+0x114>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
			ped_flag = 0;
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <fsm_ped+0x118>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f872 	bl	8000bcc <setTimer4>
			setTimer5(0);
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f000 f883 	bl	8000bf4 <setTimer5>
		}

		break;
 8000aee:	e034      	b.n	8000b5a <fsm_ped+0x106>

	case GREENRED:
		onPEDGreen();
 8000af0:	f7ff fcda 	bl	80004a8 <onPEDGreen>

		if (timer4_flag == 1){
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <fsm_ped+0x120>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d130      	bne.n	8000b5e <fsm_ped+0x10a>
			ped_status = INIT;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <fsm_ped+0x114>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
			ped_flag = 0;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <fsm_ped+0x118>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f000 f85f 	bl	8000bcc <setTimer4>
			setTimer5(0);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f870 	bl	8000bf4 <setTimer5>
		}

		break;
 8000b14:	e023      	b.n	8000b5e <fsm_ped+0x10a>

	case YELLOWRED:
		if (timer5_flag == 1){
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <fsm_ped+0x124>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d104      	bne.n	8000b28 <fsm_ped+0xd4>
			toggleGreen();
 8000b1e:	f7ff fcd7 	bl	80004d0 <toggleGreen>
			setTimer5(25);
 8000b22:	2019      	movs	r0, #25
 8000b24:	f000 f866 	bl	8000bf4 <setTimer5>
		}

		if (timer4_flag == 1){
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <fsm_ped+0x120>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d118      	bne.n	8000b62 <fsm_ped+0x10e>
			ped_status = INIT;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <fsm_ped+0x114>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
			ped_flag = 0;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <fsm_ped+0x118>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 f845 	bl	8000bcc <setTimer4>
			setTimer5(0);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f856 	bl	8000bf4 <setTimer5>
		}

		break;
 8000b48:	e00b      	b.n	8000b62 <fsm_ped+0x10e>

	default:
		ped_status = INIT;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <fsm_ped+0x114>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
		break;
 8000b50:	e008      	b.n	8000b64 <fsm_ped+0x110>
		break;
 8000b52:	bf00      	nop
 8000b54:	e006      	b.n	8000b64 <fsm_ped+0x110>
		break;
 8000b56:	bf00      	nop
 8000b58:	e004      	b.n	8000b64 <fsm_ped+0x110>
		break;
 8000b5a:	bf00      	nop
 8000b5c:	e002      	b.n	8000b64 <fsm_ped+0x110>
		break;
 8000b5e:	bf00      	nop
 8000b60:	e000      	b.n	8000b64 <fsm_ped+0x110>
		break;
 8000b62:	bf00      	nop
	}
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000105 	.word	0x20000105
 8000b6c:	20000114 	.word	0x20000114
 8000b70:	20000104 	.word	0x20000104
 8000b74:	20000140 	.word	0x20000140
 8000b78:	20000148 	.word	0x20000148

08000b7c <setTimer1>:

int timer6_counter=0;
int timer6_flag=0;


void setTimer1(int duration){
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8000b84:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <setTimer1+0x20>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <setTimer1+0x24>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000124 	.word	0x20000124
 8000ba0:	20000128 	.word	0x20000128

08000ba4 <setTimer2>:

void setTimer2(int duration){
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8000bac:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <setTimer2+0x20>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <setTimer2+0x24>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	2000012c 	.word	0x2000012c
 8000bc8:	20000130 	.word	0x20000130

08000bcc <setTimer4>:
void setTimer3(int duration){
	timer3_counter=duration;
	timer3_flag=0;
}

void setTimer4(int duration){
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 8000bd4:	4a05      	ldr	r2, [pc, #20]	; (8000bec <setTimer4+0x20>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <setTimer4+0x24>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	2000013c 	.word	0x2000013c
 8000bf0:	20000140 	.word	0x20000140

08000bf4 <setTimer5>:

void setTimer5(int duration){
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	timer5_counter=duration;
 8000bfc:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <setTimer5+0x20>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <setTimer5+0x24>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000144 	.word	0x20000144
 8000c18:	20000148 	.word	0x20000148

08000c1c <setTimer6>:

void setTimer6(int duration){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	timer6_counter=duration;
 8000c24:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <setTimer6+0x20>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
	timer6_flag=0;
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <setTimer6+0x24>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	2000014c 	.word	0x2000014c
 8000c40:	20000150 	.word	0x20000150

08000c44 <timerRun>:

void timerRun(){
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 8000c48:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <timerRun+0xcc>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	dd0b      	ble.n	8000c68 <timerRun+0x24>
		timer1_counter--;
 8000c50:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <timerRun+0xcc>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	4a2e      	ldr	r2, [pc, #184]	; (8000d10 <timerRun+0xcc>)
 8000c58:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 8000c5a:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <timerRun+0xcc>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	dc02      	bgt.n	8000c68 <timerRun+0x24>
			timer1_flag=1;
 8000c62:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <timerRun+0xd0>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <timerRun+0xd4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	dd0b      	ble.n	8000c88 <timerRun+0x44>
		timer2_counter--;
 8000c70:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <timerRun+0xd4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	4a28      	ldr	r2, [pc, #160]	; (8000d18 <timerRun+0xd4>)
 8000c78:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 8000c7a:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <timerRun+0xd4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	dc02      	bgt.n	8000c88 <timerRun+0x44>
			timer2_flag=1;
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <timerRun+0xd8>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0){
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <timerRun+0xdc>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	dd0b      	ble.n	8000ca8 <timerRun+0x64>
		timer3_counter--;
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <timerRun+0xdc>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	4a22      	ldr	r2, [pc, #136]	; (8000d20 <timerRun+0xdc>)
 8000c98:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <timerRun+0xdc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	dc02      	bgt.n	8000ca8 <timerRun+0x64>
			timer3_flag=1;
 8000ca2:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <timerRun+0xe0>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0){
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <timerRun+0xe4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	dd0b      	ble.n	8000cc8 <timerRun+0x84>
		timer4_counter--;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <timerRun+0xe4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <timerRun+0xe4>)
 8000cb8:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0){
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <timerRun+0xe4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	dc02      	bgt.n	8000cc8 <timerRun+0x84>
			timer4_flag=1;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <timerRun+0xe8>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0){
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <timerRun+0xec>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	dd0b      	ble.n	8000ce8 <timerRun+0xa4>
		timer5_counter--;
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <timerRun+0xec>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <timerRun+0xec>)
 8000cd8:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0){
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <timerRun+0xec>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	dc02      	bgt.n	8000ce8 <timerRun+0xa4>
			timer5_flag=1;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <timerRun+0xf0>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer6_counter > 0){
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <timerRun+0xf4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	dd0b      	ble.n	8000d08 <timerRun+0xc4>
		timer6_counter--;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <timerRun+0xf4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <timerRun+0xf4>)
 8000cf8:	6013      	str	r3, [r2, #0]
		if (timer6_counter <= 0){
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <timerRun+0xf4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	dc02      	bgt.n	8000d08 <timerRun+0xc4>
			timer6_flag=1;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <timerRun+0xf8>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	20000124 	.word	0x20000124
 8000d14:	20000128 	.word	0x20000128
 8000d18:	2000012c 	.word	0x2000012c
 8000d1c:	20000130 	.word	0x20000130
 8000d20:	20000134 	.word	0x20000134
 8000d24:	20000138 	.word	0x20000138
 8000d28:	2000013c 	.word	0x2000013c
 8000d2c:	20000140 	.word	0x20000140
 8000d30:	20000144 	.word	0x20000144
 8000d34:	20000148 	.word	0x20000148
 8000d38:	2000014c 	.word	0x2000014c
 8000d3c:	20000150 	.word	0x20000150

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	61d3      	str	r3, [r2, #28]
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_MspInit+0x60>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_MspInit+0x60>)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000

08000da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db4:	d113      	bne.n	8000dde <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_TIM_Base_MspInit+0x44>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <HAL_TIM_Base_MspInit+0x44>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_TIM_Base_MspInit+0x44>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	201c      	movs	r0, #28
 8000dd4:	f000 fbe1 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dd8:	201c      	movs	r0, #28
 8000dda:	f000 fbfa 	bl	80015d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <HAL_UART_MspInit+0x98>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d137      	bne.n	8000e7c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <HAL_UART_MspInit+0x9c>)
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	4a1d      	ldr	r2, [pc, #116]	; (8000e88 <HAL_UART_MspInit+0x9c>)
 8000e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e16:	61d3      	str	r3, [r2, #28]
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_UART_MspInit+0x9c>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_UART_MspInit+0x9c>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_UART_MspInit+0x9c>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_UART_MspInit+0x9c>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480f      	ldr	r0, [pc, #60]	; (8000e8c <HAL_UART_MspInit+0xa0>)
 8000e50:	f000 fc8c 	bl	800176c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e54:	2308      	movs	r3, #8
 8000e56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	4619      	mov	r1, r3
 8000e66:	4809      	ldr	r0, [pc, #36]	; (8000e8c <HAL_UART_MspInit+0xa0>)
 8000e68:	f000 fc80 	bl	800176c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2026      	movs	r0, #38	; 0x26
 8000e72:	f000 fb92 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e76:	2026      	movs	r0, #38	; 0x26
 8000e78:	f000 fbab 	bl	80015d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010800 	.word	0x40010800

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed6:	f000 fa6d 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <TIM2_IRQHandler+0x10>)
 8000ee6:	f001 fabd 	bl	8002464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000160 	.word	0x20000160

08000ef4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <USART2_IRQHandler+0x10>)
 8000efa:	f001 ff07 	bl	8002d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200001a8 	.word	0x200001a8

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f002 fc68 	bl	800380c <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20005000 	.word	0x20005000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	20000154 	.word	0x20000154
 8000f70:	20000228 	.word	0x20000228

08000f74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <fsm_traffic_light>:

#include "traffic_light_fsm.h"

#include "traffic_light_fsm.h"

void fsm_traffic_light(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	switch (led_status){
 8000f84:	4b8c      	ldr	r3, [pc, #560]	; (80011b8 <fsm_traffic_light+0x238>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	f200 8182 	bhi.w	8001292 <fsm_traffic_light+0x312>
 8000f8e:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <fsm_traffic_light+0x14>)
 8000f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f94:	08000fa9 	.word	0x08000fa9
 8000f98:	08000fdb 	.word	0x08000fdb
 8000f9c:	08001073 	.word	0x08001073
 8000fa0:	0800111b 	.word	0x0800111b
 8000fa4:	080011ed 	.word	0x080011ed
	case INIT:
		offAllLed();
 8000fa8:	f7ff f9c0 	bl	800032c <offAllLed>

		led_status = REDGREEN;
 8000fac:	4b82      	ldr	r3, [pc, #520]	; (80011b8 <fsm_traffic_light+0x238>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
		setTimer1(greenTime*100);
 8000fb2:	4b82      	ldr	r3, [pc, #520]	; (80011bc <fsm_traffic_light+0x23c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2264      	movs	r2, #100	; 0x64
 8000fb8:	fb02 f303 	mul.w	r3, r2, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fddd 	bl	8000b7c <setTimer1>
		setTimer2(100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f7ff fdee 	bl	8000ba4 <setTimer2>

		timerRoad1 = redTime;
 8000fc8:	4b7d      	ldr	r3, [pc, #500]	; (80011c0 <fsm_traffic_light+0x240>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a7d      	ldr	r2, [pc, #500]	; (80011c4 <fsm_traffic_light+0x244>)
 8000fce:	6013      	str	r3, [r2, #0]
		timerRoad2 = greenTime;
 8000fd0:	4b7a      	ldr	r3, [pc, #488]	; (80011bc <fsm_traffic_light+0x23c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a7c      	ldr	r2, [pc, #496]	; (80011c8 <fsm_traffic_light+0x248>)
 8000fd6:	6013      	str	r3, [r2, #0]
		break;
 8000fd8:	e164      	b.n	80012a4 <fsm_traffic_light+0x324>

	case REDGREEN:
		onTFRed1();
 8000fda:	f7ff f9e5 	bl	80003a8 <onTFRed1>
		onTFGreen2();
 8000fde:	f7ff fa2f 	bl	8000440 <onTFGreen2>

		if (timer2_flag == 1){
 8000fe2:	4b7a      	ldr	r3, [pc, #488]	; (80011cc <fsm_traffic_light+0x24c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d114      	bne.n	8001014 <fsm_traffic_light+0x94>
			setTimer2(100);
 8000fea:	2064      	movs	r0, #100	; 0x64
 8000fec:	f7ff fdda 	bl	8000ba4 <setTimer2>
			timerRoad1--;
 8000ff0:	4b74      	ldr	r3, [pc, #464]	; (80011c4 <fsm_traffic_light+0x244>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	4a73      	ldr	r2, [pc, #460]	; (80011c4 <fsm_traffic_light+0x244>)
 8000ff8:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 8000ffa:	4b73      	ldr	r3, [pc, #460]	; (80011c8 <fsm_traffic_light+0x248>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	4a71      	ldr	r2, [pc, #452]	; (80011c8 <fsm_traffic_light+0x248>)
 8001002:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = yellowTime;
 8001004:	4b70      	ldr	r3, [pc, #448]	; (80011c8 <fsm_traffic_light+0x248>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	dc03      	bgt.n	8001014 <fsm_traffic_light+0x94>
 800100c:	4b70      	ldr	r3, [pc, #448]	; (80011d0 <fsm_traffic_light+0x250>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a6d      	ldr	r2, [pc, #436]	; (80011c8 <fsm_traffic_light+0x248>)
 8001012:	6013      	str	r3, [r2, #0]
		}

		if (timer1_flag == 1){
 8001014:	4b6f      	ldr	r3, [pc, #444]	; (80011d4 <fsm_traffic_light+0x254>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d111      	bne.n	8001040 <fsm_traffic_light+0xc0>
			setTimer1(yellowTime*100);
 800101c:	4b6c      	ldr	r3, [pc, #432]	; (80011d0 <fsm_traffic_light+0x250>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2264      	movs	r2, #100	; 0x64
 8001022:	fb02 f303 	mul.w	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fda8 	bl	8000b7c <setTimer1>
			led_status = REDYELLOW;
 800102c:	4b62      	ldr	r3, [pc, #392]	; (80011b8 <fsm_traffic_light+0x238>)
 800102e:	2202      	movs	r2, #2
 8001030:	701a      	strb	r2, [r3, #0]

			if (ped_flag == 1){
 8001032:	4b69      	ldr	r3, [pc, #420]	; (80011d8 <fsm_traffic_light+0x258>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d102      	bne.n	8001040 <fsm_traffic_light+0xc0>
				ped_status = REDYELLOW;
 800103a:	4b68      	ldr	r3, [pc, #416]	; (80011dc <fsm_traffic_light+0x25c>)
 800103c:	2202      	movs	r2, #2
 800103e:	701a      	strb	r2, [r3, #0]
			}
		}

		if (isButtonPressed(1) == 1) {
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff f883 	bl	800014c <isButtonPressed>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	f040 8124 	bne.w	8001296 <fsm_traffic_light+0x316>
			offAllLed();
 800104e:	f7ff f96d 	bl	800032c <offAllLed>

			led_status = MAN_REDGREEN;
 8001052:	4b59      	ldr	r3, [pc, #356]	; (80011b8 <fsm_traffic_light+0x238>)
 8001054:	2205      	movs	r2, #5
 8001056:	701a      	strb	r2, [r3, #0]
			newRed = redTime;
 8001058:	4b59      	ldr	r3, [pc, #356]	; (80011c0 <fsm_traffic_light+0x240>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a60      	ldr	r2, [pc, #384]	; (80011e0 <fsm_traffic_light+0x260>)
 800105e:	6013      	str	r3, [r2, #0]
			newGreen = greenTime;
 8001060:	4b56      	ldr	r3, [pc, #344]	; (80011bc <fsm_traffic_light+0x23c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a5f      	ldr	r2, [pc, #380]	; (80011e4 <fsm_traffic_light+0x264>)
 8001066:	6013      	str	r3, [r2, #0]
			newYellow = yellowTime;
 8001068:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <fsm_traffic_light+0x250>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a5e      	ldr	r2, [pc, #376]	; (80011e8 <fsm_traffic_light+0x268>)
 800106e:	6013      	str	r3, [r2, #0]
		}

		break;
 8001070:	e111      	b.n	8001296 <fsm_traffic_light+0x316>

	case REDYELLOW:
		onTFRed1();
 8001072:	f7ff f999 	bl	80003a8 <onTFRed1>
		onTFYellow2();
 8001076:	f7ff f9f3 	bl	8000460 <onTFYellow2>

		if (timer2_flag == 1){
 800107a:	4b54      	ldr	r3, [pc, #336]	; (80011cc <fsm_traffic_light+0x24c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d11c      	bne.n	80010bc <fsm_traffic_light+0x13c>
			setTimer2(100);
 8001082:	2064      	movs	r0, #100	; 0x64
 8001084:	f7ff fd8e 	bl	8000ba4 <setTimer2>
			timerRoad1--;
 8001088:	4b4e      	ldr	r3, [pc, #312]	; (80011c4 <fsm_traffic_light+0x244>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3b01      	subs	r3, #1
 800108e:	4a4d      	ldr	r2, [pc, #308]	; (80011c4 <fsm_traffic_light+0x244>)
 8001090:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 8001092:	4b4d      	ldr	r3, [pc, #308]	; (80011c8 <fsm_traffic_light+0x248>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3b01      	subs	r3, #1
 8001098:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <fsm_traffic_light+0x248>)
 800109a:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = greenTime;
 800109c:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <fsm_traffic_light+0x244>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	dc03      	bgt.n	80010ac <fsm_traffic_light+0x12c>
 80010a4:	4b45      	ldr	r3, [pc, #276]	; (80011bc <fsm_traffic_light+0x23c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a46      	ldr	r2, [pc, #280]	; (80011c4 <fsm_traffic_light+0x244>)
 80010aa:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = redTime;
 80010ac:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <fsm_traffic_light+0x248>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	dc03      	bgt.n	80010bc <fsm_traffic_light+0x13c>
 80010b4:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <fsm_traffic_light+0x240>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a43      	ldr	r2, [pc, #268]	; (80011c8 <fsm_traffic_light+0x248>)
 80010ba:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1){
 80010bc:	4b45      	ldr	r3, [pc, #276]	; (80011d4 <fsm_traffic_light+0x254>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d111      	bne.n	80010e8 <fsm_traffic_light+0x168>
			setTimer1(greenTime*100);
 80010c4:	4b3d      	ldr	r3, [pc, #244]	; (80011bc <fsm_traffic_light+0x23c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2264      	movs	r2, #100	; 0x64
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fd54 	bl	8000b7c <setTimer1>
			led_status = GREENRED;
 80010d4:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <fsm_traffic_light+0x238>)
 80010d6:	2203      	movs	r2, #3
 80010d8:	701a      	strb	r2, [r3, #0]

			if (ped_flag == 1){
 80010da:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <fsm_traffic_light+0x258>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d102      	bne.n	80010e8 <fsm_traffic_light+0x168>
				ped_status = GREENRED;
 80010e2:	4b3e      	ldr	r3, [pc, #248]	; (80011dc <fsm_traffic_light+0x25c>)
 80010e4:	2203      	movs	r2, #3
 80010e6:	701a      	strb	r2, [r3, #0]
			}
		}

		if (isButtonPressed(1) == 1) {
 80010e8:	2001      	movs	r0, #1
 80010ea:	f7ff f82f 	bl	800014c <isButtonPressed>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	f040 80d2 	bne.w	800129a <fsm_traffic_light+0x31a>
			offAllLed();
 80010f6:	f7ff f919 	bl	800032c <offAllLed>

			led_status = MAN_REDYELLOW;
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <fsm_traffic_light+0x238>)
 80010fc:	2206      	movs	r2, #6
 80010fe:	701a      	strb	r2, [r3, #0]
			newRed = redTime;
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <fsm_traffic_light+0x240>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a36      	ldr	r2, [pc, #216]	; (80011e0 <fsm_traffic_light+0x260>)
 8001106:	6013      	str	r3, [r2, #0]
			newGreen = greenTime;
 8001108:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <fsm_traffic_light+0x23c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a35      	ldr	r2, [pc, #212]	; (80011e4 <fsm_traffic_light+0x264>)
 800110e:	6013      	str	r3, [r2, #0]
			newYellow = yellowTime;
 8001110:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <fsm_traffic_light+0x250>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a34      	ldr	r2, [pc, #208]	; (80011e8 <fsm_traffic_light+0x268>)
 8001116:	6013      	str	r3, [r2, #0]
		}

		break;
 8001118:	e0bf      	b.n	800129a <fsm_traffic_light+0x31a>

	case GREENRED:
		onTFGreen1();
 800111a:	f7ff f959 	bl	80003d0 <onTFGreen1>
		onTFRed2();
 800111e:	f7ff f97f 	bl	8000420 <onTFRed2>

		if (timer2_flag == 1){
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <fsm_traffic_light+0x24c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d114      	bne.n	8001154 <fsm_traffic_light+0x1d4>
			setTimer2(100);
 800112a:	2064      	movs	r0, #100	; 0x64
 800112c:	f7ff fd3a 	bl	8000ba4 <setTimer2>
			timerRoad1--;
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <fsm_traffic_light+0x244>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <fsm_traffic_light+0x244>)
 8001138:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = yellowTime;
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <fsm_traffic_light+0x244>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	dc03      	bgt.n	800114a <fsm_traffic_light+0x1ca>
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <fsm_traffic_light+0x250>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a1f      	ldr	r2, [pc, #124]	; (80011c4 <fsm_traffic_light+0x244>)
 8001148:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <fsm_traffic_light+0x248>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3b01      	subs	r3, #1
 8001150:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <fsm_traffic_light+0x248>)
 8001152:	6013      	str	r3, [r2, #0]
		}


		if(timer1_flag == 1){
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <fsm_traffic_light+0x254>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d114      	bne.n	8001186 <fsm_traffic_light+0x206>
			setTimer1(yellowTime*100);
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <fsm_traffic_light+0x250>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2264      	movs	r2, #100	; 0x64
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fd08 	bl	8000b7c <setTimer1>
			led_status = YELLOWRED;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <fsm_traffic_light+0x238>)
 800116e:	2204      	movs	r2, #4
 8001170:	701a      	strb	r2, [r3, #0]

			if (ped_flag == 1){
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <fsm_traffic_light+0x258>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d105      	bne.n	8001186 <fsm_traffic_light+0x206>
				ped_status = YELLOWRED;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <fsm_traffic_light+0x25c>)
 800117c:	2204      	movs	r2, #4
 800117e:	701a      	strb	r2, [r3, #0]
				setTimer5(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f7ff fd37 	bl	8000bf4 <setTimer5>
			}
		}

		if (isButtonPressed(1) == 1) {
 8001186:	2001      	movs	r0, #1
 8001188:	f7fe ffe0 	bl	800014c <isButtonPressed>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	f040 8085 	bne.w	800129e <fsm_traffic_light+0x31e>
			offAllLed();
 8001194:	f7ff f8ca 	bl	800032c <offAllLed>

			led_status = MAN_GREENRED;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <fsm_traffic_light+0x238>)
 800119a:	2207      	movs	r2, #7
 800119c:	701a      	strb	r2, [r3, #0]
			newRed = redTime;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <fsm_traffic_light+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <fsm_traffic_light+0x260>)
 80011a4:	6013      	str	r3, [r2, #0]
			newGreen = greenTime;
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <fsm_traffic_light+0x23c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <fsm_traffic_light+0x264>)
 80011ac:	6013      	str	r3, [r2, #0]
			newYellow = yellowTime;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <fsm_traffic_light+0x250>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <fsm_traffic_light+0x268>)
 80011b4:	6013      	str	r3, [r2, #0]
		}
		break;
 80011b6:	e072      	b.n	800129e <fsm_traffic_light+0x31e>
 80011b8:	20000104 	.word	0x20000104
 80011bc:	2000005c 	.word	0x2000005c
 80011c0:	20000058 	.word	0x20000058
 80011c4:	20000118 	.word	0x20000118
 80011c8:	2000011c 	.word	0x2000011c
 80011cc:	20000130 	.word	0x20000130
 80011d0:	20000060 	.word	0x20000060
 80011d4:	20000128 	.word	0x20000128
 80011d8:	20000114 	.word	0x20000114
 80011dc:	20000105 	.word	0x20000105
 80011e0:	20000108 	.word	0x20000108
 80011e4:	2000010c 	.word	0x2000010c
 80011e8:	20000110 	.word	0x20000110

	case YELLOWRED:
		onTFYellow1();
 80011ec:	f7ff f904 	bl	80003f8 <onTFYellow1>
		onTFRed2();
 80011f0:	f7ff f916 	bl	8000420 <onTFRed2>

		if (timer2_flag == 1){
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <fsm_traffic_light+0x328>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d11c      	bne.n	8001236 <fsm_traffic_light+0x2b6>
			setTimer2(100);
 80011fc:	2064      	movs	r0, #100	; 0x64
 80011fe:	f7ff fcd1 	bl	8000ba4 <setTimer2>
			timerRoad1--;
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <fsm_traffic_light+0x32c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3b01      	subs	r3, #1
 8001208:	4a28      	ldr	r2, [pc, #160]	; (80012ac <fsm_traffic_light+0x32c>)
 800120a:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = redTime;
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <fsm_traffic_light+0x32c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	dc03      	bgt.n	800121c <fsm_traffic_light+0x29c>
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <fsm_traffic_light+0x330>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a24      	ldr	r2, [pc, #144]	; (80012ac <fsm_traffic_light+0x32c>)
 800121a:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <fsm_traffic_light+0x334>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3b01      	subs	r3, #1
 8001222:	4a24      	ldr	r2, [pc, #144]	; (80012b4 <fsm_traffic_light+0x334>)
 8001224:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = greenTime;
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <fsm_traffic_light+0x334>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	dc03      	bgt.n	8001236 <fsm_traffic_light+0x2b6>
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <fsm_traffic_light+0x338>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a20      	ldr	r2, [pc, #128]	; (80012b4 <fsm_traffic_light+0x334>)
 8001234:	6013      	str	r3, [r2, #0]
		}

		if (timer1_flag == 1){
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <fsm_traffic_light+0x33c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d111      	bne.n	8001262 <fsm_traffic_light+0x2e2>
			setTimer1(greenTime*100);
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <fsm_traffic_light+0x338>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2264      	movs	r2, #100	; 0x64
 8001244:	fb02 f303 	mul.w	r3, r2, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fc97 	bl	8000b7c <setTimer1>
			led_status = REDGREEN;
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <fsm_traffic_light+0x340>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]

			if (ped_flag == 1){
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <fsm_traffic_light+0x344>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d102      	bne.n	8001262 <fsm_traffic_light+0x2e2>
				ped_status = REDGREEN;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <fsm_traffic_light+0x348>)
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
			}
		}

		if (isButtonPressed(1) == 1) {
 8001262:	2001      	movs	r0, #1
 8001264:	f7fe ff72 	bl	800014c <isButtonPressed>
 8001268:	4603      	mov	r3, r0
 800126a:	2b01      	cmp	r3, #1
 800126c:	d119      	bne.n	80012a2 <fsm_traffic_light+0x322>
			offAllLed();
 800126e:	f7ff f85d 	bl	800032c <offAllLed>

			led_status = MAN_YELLOWRED;
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <fsm_traffic_light+0x340>)
 8001274:	2208      	movs	r2, #8
 8001276:	701a      	strb	r2, [r3, #0]
			newRed = redTime;
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <fsm_traffic_light+0x330>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <fsm_traffic_light+0x34c>)
 800127e:	6013      	str	r3, [r2, #0]
			newGreen = greenTime;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <fsm_traffic_light+0x338>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <fsm_traffic_light+0x350>)
 8001286:	6013      	str	r3, [r2, #0]
			newYellow = yellowTime;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <fsm_traffic_light+0x354>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <fsm_traffic_light+0x358>)
 800128e:	6013      	str	r3, [r2, #0]
		}
		break;
 8001290:	e007      	b.n	80012a2 <fsm_traffic_light+0x322>

	default:
		break;
 8001292:	bf00      	nop
 8001294:	e006      	b.n	80012a4 <fsm_traffic_light+0x324>
		break;
 8001296:	bf00      	nop
 8001298:	e004      	b.n	80012a4 <fsm_traffic_light+0x324>
		break;
 800129a:	bf00      	nop
 800129c:	e002      	b.n	80012a4 <fsm_traffic_light+0x324>
		break;
 800129e:	bf00      	nop
 80012a0:	e000      	b.n	80012a4 <fsm_traffic_light+0x324>
		break;
 80012a2:	bf00      	nop
	}


}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000130 	.word	0x20000130
 80012ac:	20000118 	.word	0x20000118
 80012b0:	20000058 	.word	0x20000058
 80012b4:	2000011c 	.word	0x2000011c
 80012b8:	2000005c 	.word	0x2000005c
 80012bc:	20000128 	.word	0x20000128
 80012c0:	20000104 	.word	0x20000104
 80012c4:	20000114 	.word	0x20000114
 80012c8:	20000105 	.word	0x20000105
 80012cc:	20000108 	.word	0x20000108
 80012d0:	2000010c 	.word	0x2000010c
 80012d4:	20000060 	.word	0x20000060
 80012d8:	20000110 	.word	0x20000110

080012dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012dc:	f7ff fe4a 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	480b      	ldr	r0, [pc, #44]	; (8001310 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012e2:	490c      	ldr	r1, [pc, #48]	; (8001314 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a09      	ldr	r2, [pc, #36]	; (800131c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012f8:	4c09      	ldr	r4, [pc, #36]	; (8001320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001306:	f002 fa87 	bl	8003818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800130a:	f7ff f94b 	bl	80005a4 <main>
  bx lr
 800130e:	4770      	bx	lr
  ldr r0, =_sdata
 8001310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001314:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001318:	08004180 	.word	0x08004180
  ldr r2, =_sbss
 800131c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001320:	20000224 	.word	0x20000224

08001324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001324:	e7fe      	b.n	8001324 <ADC1_2_IRQHandler>
	...

08001328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_Init+0x28>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_Init+0x28>)
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001338:	2003      	movs	r0, #3
 800133a:	f000 f923 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133e:	200f      	movs	r0, #15
 8001340:	f000 f808 	bl	8001354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001344:	f7ff fcfc 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40022000 	.word	0x40022000

08001354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_InitTick+0x54>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x58>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	fbb3 f3f1 	udiv	r3, r3, r1
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f93b 	bl	80015ee <HAL_SYSTICK_Config>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e00e      	b.n	80013a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d80a      	bhi.n	800139e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f000 f903 	bl	800159a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <HAL_InitTick+0x5c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e000      	b.n	80013a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000068 	.word	0x20000068
 80013ac:	20000070 	.word	0x20000070
 80013b0:	2000006c 	.word	0x2000006c

080013b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_IncTick+0x1c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_IncTick+0x20>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a03      	ldr	r2, [pc, #12]	; (80013d4 <HAL_IncTick+0x20>)
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000070 	.word	0x20000070
 80013d4:	20000210 	.word	0x20000210

080013d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b02      	ldr	r3, [pc, #8]	; (80013e8 <HAL_GetTick+0x10>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	20000210 	.word	0x20000210

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	db0b      	blt.n	800147a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f003 021f 	and.w	r2, r3, #31
 8001468:	4906      	ldr	r1, [pc, #24]	; (8001484 <__NVIC_EnableIRQ+0x34>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	2001      	movs	r0, #1
 8001472:	fa00 f202 	lsl.w	r2, r0, r2
 8001476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100

08001488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0a      	blt.n	80014b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	490c      	ldr	r1, [pc, #48]	; (80014d4 <__NVIC_SetPriority+0x4c>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b0:	e00a      	b.n	80014c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4908      	ldr	r1, [pc, #32]	; (80014d8 <__NVIC_SetPriority+0x50>)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	3b04      	subs	r3, #4
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	761a      	strb	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_EncodePriority+0x30>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_EncodePriority+0x32>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43d9      	mvns	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4313      	orrs	r3, r2
         );
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	; 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001550:	d301      	bcc.n	8001556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001552:	2301      	movs	r3, #1
 8001554:	e00f      	b.n	8001576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <SysTick_Config+0x40>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155e:	210f      	movs	r1, #15
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f7ff ff90 	bl	8001488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <SysTick_Config+0x40>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SysTick_Config+0x40>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff2d 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ac:	f7ff ff42 	bl	8001434 <__NVIC_GetPriorityGrouping>
 80015b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f7ff ff90 	bl	80014dc <NVIC_EncodePriority>
 80015bc:	4602      	mov	r2, r0
 80015be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff5f 	bl	8001488 <__NVIC_SetPriority>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff35 	bl	8001450 <__NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffa2 	bl	8001540 <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001606:	b480      	push	{r7}
 8001608:	b085      	sub	sp, #20
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d008      	beq.n	8001630 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2204      	movs	r2, #4
 8001622:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e020      	b.n	8001672 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 020e 	bic.w	r2, r2, #14
 800163e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0201 	bic.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001658:	2101      	movs	r1, #1
 800165a:	fa01 f202 	lsl.w	r2, r1, r2
 800165e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001670:	7bfb      	ldrb	r3, [r7, #15]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d005      	beq.n	80016a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2204      	movs	r2, #4
 8001698:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	e051      	b.n	8001744 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 020e 	bic.w	r2, r2, #14
 80016ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a22      	ldr	r2, [pc, #136]	; (8001750 <HAL_DMA_Abort_IT+0xd4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d029      	beq.n	800171e <HAL_DMA_Abort_IT+0xa2>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a21      	ldr	r2, [pc, #132]	; (8001754 <HAL_DMA_Abort_IT+0xd8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d022      	beq.n	800171a <HAL_DMA_Abort_IT+0x9e>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <HAL_DMA_Abort_IT+0xdc>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d01a      	beq.n	8001714 <HAL_DMA_Abort_IT+0x98>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_DMA_Abort_IT+0xe0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d012      	beq.n	800170e <HAL_DMA_Abort_IT+0x92>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <HAL_DMA_Abort_IT+0xe4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00a      	beq.n	8001708 <HAL_DMA_Abort_IT+0x8c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <HAL_DMA_Abort_IT+0xe8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d102      	bne.n	8001702 <HAL_DMA_Abort_IT+0x86>
 80016fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001700:	e00e      	b.n	8001720 <HAL_DMA_Abort_IT+0xa4>
 8001702:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001706:	e00b      	b.n	8001720 <HAL_DMA_Abort_IT+0xa4>
 8001708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800170c:	e008      	b.n	8001720 <HAL_DMA_Abort_IT+0xa4>
 800170e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001712:	e005      	b.n	8001720 <HAL_DMA_Abort_IT+0xa4>
 8001714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001718:	e002      	b.n	8001720 <HAL_DMA_Abort_IT+0xa4>
 800171a:	2310      	movs	r3, #16
 800171c:	e000      	b.n	8001720 <HAL_DMA_Abort_IT+0xa4>
 800171e:	2301      	movs	r3, #1
 8001720:	4a11      	ldr	r2, [pc, #68]	; (8001768 <HAL_DMA_Abort_IT+0xec>)
 8001722:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	4798      	blx	r3
    } 
  }
  return status;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40020008 	.word	0x40020008
 8001754:	4002001c 	.word	0x4002001c
 8001758:	40020030 	.word	0x40020030
 800175c:	40020044 	.word	0x40020044
 8001760:	40020058 	.word	0x40020058
 8001764:	4002006c 	.word	0x4002006c
 8001768:	40020000 	.word	0x40020000

0800176c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800176c:	b480      	push	{r7}
 800176e:	b08b      	sub	sp, #44	; 0x2c
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177e:	e169      	b.n	8001a54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001780:	2201      	movs	r2, #1
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	429a      	cmp	r2, r3
 800179a:	f040 8158 	bne.w	8001a4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4a9a      	ldr	r2, [pc, #616]	; (8001a0c <HAL_GPIO_Init+0x2a0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d05e      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017a8:	4a98      	ldr	r2, [pc, #608]	; (8001a0c <HAL_GPIO_Init+0x2a0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d875      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017ae:	4a98      	ldr	r2, [pc, #608]	; (8001a10 <HAL_GPIO_Init+0x2a4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d058      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017b4:	4a96      	ldr	r2, [pc, #600]	; (8001a10 <HAL_GPIO_Init+0x2a4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d86f      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017ba:	4a96      	ldr	r2, [pc, #600]	; (8001a14 <HAL_GPIO_Init+0x2a8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d052      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017c0:	4a94      	ldr	r2, [pc, #592]	; (8001a14 <HAL_GPIO_Init+0x2a8>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d869      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017c6:	4a94      	ldr	r2, [pc, #592]	; (8001a18 <HAL_GPIO_Init+0x2ac>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d04c      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017cc:	4a92      	ldr	r2, [pc, #584]	; (8001a18 <HAL_GPIO_Init+0x2ac>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d863      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017d2:	4a92      	ldr	r2, [pc, #584]	; (8001a1c <HAL_GPIO_Init+0x2b0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d046      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017d8:	4a90      	ldr	r2, [pc, #576]	; (8001a1c <HAL_GPIO_Init+0x2b0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d85d      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017de:	2b12      	cmp	r3, #18
 80017e0:	d82a      	bhi.n	8001838 <HAL_GPIO_Init+0xcc>
 80017e2:	2b12      	cmp	r3, #18
 80017e4:	d859      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017e6:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <HAL_GPIO_Init+0x80>)
 80017e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ec:	08001867 	.word	0x08001867
 80017f0:	08001841 	.word	0x08001841
 80017f4:	08001853 	.word	0x08001853
 80017f8:	08001895 	.word	0x08001895
 80017fc:	0800189b 	.word	0x0800189b
 8001800:	0800189b 	.word	0x0800189b
 8001804:	0800189b 	.word	0x0800189b
 8001808:	0800189b 	.word	0x0800189b
 800180c:	0800189b 	.word	0x0800189b
 8001810:	0800189b 	.word	0x0800189b
 8001814:	0800189b 	.word	0x0800189b
 8001818:	0800189b 	.word	0x0800189b
 800181c:	0800189b 	.word	0x0800189b
 8001820:	0800189b 	.word	0x0800189b
 8001824:	0800189b 	.word	0x0800189b
 8001828:	0800189b 	.word	0x0800189b
 800182c:	0800189b 	.word	0x0800189b
 8001830:	08001849 	.word	0x08001849
 8001834:	0800185d 	.word	0x0800185d
 8001838:	4a79      	ldr	r2, [pc, #484]	; (8001a20 <HAL_GPIO_Init+0x2b4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800183e:	e02c      	b.n	800189a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e029      	b.n	800189c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	3304      	adds	r3, #4
 800184e:	623b      	str	r3, [r7, #32]
          break;
 8001850:	e024      	b.n	800189c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	3308      	adds	r3, #8
 8001858:	623b      	str	r3, [r7, #32]
          break;
 800185a:	e01f      	b.n	800189c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	330c      	adds	r3, #12
 8001862:	623b      	str	r3, [r7, #32]
          break;
 8001864:	e01a      	b.n	800189c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d102      	bne.n	8001874 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800186e:	2304      	movs	r3, #4
 8001870:	623b      	str	r3, [r7, #32]
          break;
 8001872:	e013      	b.n	800189c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800187c:	2308      	movs	r3, #8
 800187e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	611a      	str	r2, [r3, #16]
          break;
 8001886:	e009      	b.n	800189c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001888:	2308      	movs	r3, #8
 800188a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	615a      	str	r2, [r3, #20]
          break;
 8001892:	e003      	b.n	800189c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x130>
          break;
 800189a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2bff      	cmp	r3, #255	; 0xff
 80018a0:	d801      	bhi.n	80018a6 <HAL_GPIO_Init+0x13a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	e001      	b.n	80018aa <HAL_GPIO_Init+0x13e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3304      	adds	r3, #4
 80018aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2bff      	cmp	r3, #255	; 0xff
 80018b0:	d802      	bhi.n	80018b8 <HAL_GPIO_Init+0x14c>
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	e002      	b.n	80018be <HAL_GPIO_Init+0x152>
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	3b08      	subs	r3, #8
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	210f      	movs	r1, #15
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	401a      	ands	r2, r3
 80018d0:	6a39      	ldr	r1, [r7, #32]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	431a      	orrs	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 80b1 	beq.w	8001a4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018ec:	4b4d      	ldr	r3, [pc, #308]	; (8001a24 <HAL_GPIO_Init+0x2b8>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a4c      	ldr	r2, [pc, #304]	; (8001a24 <HAL_GPIO_Init+0x2b8>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b4a      	ldr	r3, [pc, #296]	; (8001a24 <HAL_GPIO_Init+0x2b8>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001904:	4a48      	ldr	r2, [pc, #288]	; (8001a28 <HAL_GPIO_Init+0x2bc>)
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	3302      	adds	r3, #2
 800190c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001910:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a40      	ldr	r2, [pc, #256]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d013      	beq.n	8001958 <HAL_GPIO_Init+0x1ec>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a3f      	ldr	r2, [pc, #252]	; (8001a30 <HAL_GPIO_Init+0x2c4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d00d      	beq.n	8001954 <HAL_GPIO_Init+0x1e8>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a3e      	ldr	r2, [pc, #248]	; (8001a34 <HAL_GPIO_Init+0x2c8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d007      	beq.n	8001950 <HAL_GPIO_Init+0x1e4>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a3d      	ldr	r2, [pc, #244]	; (8001a38 <HAL_GPIO_Init+0x2cc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d101      	bne.n	800194c <HAL_GPIO_Init+0x1e0>
 8001948:	2303      	movs	r3, #3
 800194a:	e006      	b.n	800195a <HAL_GPIO_Init+0x1ee>
 800194c:	2304      	movs	r3, #4
 800194e:	e004      	b.n	800195a <HAL_GPIO_Init+0x1ee>
 8001950:	2302      	movs	r3, #2
 8001952:	e002      	b.n	800195a <HAL_GPIO_Init+0x1ee>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <HAL_GPIO_Init+0x1ee>
 8001958:	2300      	movs	r3, #0
 800195a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195c:	f002 0203 	and.w	r2, r2, #3
 8001960:	0092      	lsls	r2, r2, #2
 8001962:	4093      	lsls	r3, r2
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800196a:	492f      	ldr	r1, [pc, #188]	; (8001a28 <HAL_GPIO_Init+0x2bc>)
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	492c      	ldr	r1, [pc, #176]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	608b      	str	r3, [r1, #8]
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001992:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	43db      	mvns	r3, r3
 800199a:	4928      	ldr	r1, [pc, #160]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 800199c:	4013      	ands	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	4922      	ldr	r1, [pc, #136]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60cb      	str	r3, [r1, #12]
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	491e      	ldr	r1, [pc, #120]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4918      	ldr	r1, [pc, #96]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4914      	ldr	r1, [pc, #80]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d021      	beq.n	8001a40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	490e      	ldr	r1, [pc, #56]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e021      	b.n	8001a4e <HAL_GPIO_Init+0x2e2>
 8001a0a:	bf00      	nop
 8001a0c:	10320000 	.word	0x10320000
 8001a10:	10310000 	.word	0x10310000
 8001a14:	10220000 	.word	0x10220000
 8001a18:	10210000 	.word	0x10210000
 8001a1c:	10120000 	.word	0x10120000
 8001a20:	10110000 	.word	0x10110000
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	40010800 	.word	0x40010800
 8001a30:	40010c00 	.word	0x40010c00
 8001a34:	40011000 	.word	0x40011000
 8001a38:	40011400 	.word	0x40011400
 8001a3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_GPIO_Init+0x304>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	4909      	ldr	r1, [pc, #36]	; (8001a70 <HAL_GPIO_Init+0x304>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	3301      	adds	r3, #1
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f47f ae8e 	bne.w	8001780 <HAL_GPIO_Init+0x14>
  }
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	372c      	adds	r7, #44	; 0x2c
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	887b      	ldrh	r3, [r7, #2]
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	e001      	b.n	8001a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	807b      	strh	r3, [r7, #2]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab2:	787b      	ldrb	r3, [r7, #1]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab8:	887a      	ldrh	r2, [r7, #2]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001abe:	e003      	b.n	8001ac8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ac0:	887b      	ldrh	r3, [r7, #2]
 8001ac2:	041a      	lsls	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	611a      	str	r2, [r3, #16]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	460b      	mov	r3, r1
 8001adc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ae4:	887a      	ldrh	r2, [r7, #2]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	041a      	lsls	r2, r3, #16
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	887b      	ldrh	r3, [r7, #2]
 8001af2:	400b      	ands	r3, r1
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e26c      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8087 	beq.w	8001c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b24:	4b92      	ldr	r3, [pc, #584]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d00c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b30:	4b8f      	ldr	r3, [pc, #572]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d112      	bne.n	8001b62 <HAL_RCC_OscConfig+0x5e>
 8001b3c:	4b8c      	ldr	r3, [pc, #560]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d10b      	bne.n	8001b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4a:	4b89      	ldr	r3, [pc, #548]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d06c      	beq.n	8001c30 <HAL_RCC_OscConfig+0x12c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d168      	bne.n	8001c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e246      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x76>
 8001b6c:	4b80      	ldr	r3, [pc, #512]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a7f      	ldr	r2, [pc, #508]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	e02e      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x98>
 8001b82:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7a      	ldr	r2, [pc, #488]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b78      	ldr	r3, [pc, #480]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a77      	ldr	r2, [pc, #476]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e01d      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xbc>
 8001ba6:	4b72      	ldr	r3, [pc, #456]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a71      	ldr	r2, [pc, #452]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a6e      	ldr	r2, [pc, #440]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001bc0:	4b6b      	ldr	r3, [pc, #428]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6a      	ldr	r2, [pc, #424]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b68      	ldr	r3, [pc, #416]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a67      	ldr	r2, [pc, #412]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fbfa 	bl	80013d8 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fbf6 	bl	80013d8 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1fa      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0xe4>
 8001c06:	e014      	b.n	8001c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fbe6 	bl	80013d8 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fbe2 	bl	80013d8 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1e6      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x10c>
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d063      	beq.n	8001d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c4a:	4b49      	ldr	r3, [pc, #292]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d11c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x18c>
 8001c56:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_RCC_OscConfig+0x176>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e1ba      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4939      	ldr	r1, [pc, #228]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	e03a      	b.n	8001d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fb9b 	bl	80013d8 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fb97 	bl	80013d8 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e19b      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4927      	ldr	r1, [pc, #156]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
 8001cd8:	e015      	b.n	8001d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fb7a 	bl	80013d8 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fb76 	bl	80013d8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e17a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d03a      	beq.n	8001d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d019      	beq.n	8001d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d20:	f7ff fb5a 	bl	80013d8 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d28:	f7ff fb56 	bl	80013d8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e15a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d46:	2001      	movs	r0, #1
 8001d48:	f000 facc 	bl	80022e4 <RCC_Delay>
 8001d4c:	e01c      	b.n	8001d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7ff fb40 	bl	80013d8 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5a:	e00f      	b.n	8001d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fb3c 	bl	80013d8 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d908      	bls.n	8001d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e140      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	42420000 	.word	0x42420000
 8001d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7c:	4b9e      	ldr	r3, [pc, #632]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1e9      	bne.n	8001d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80a6 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9a:	4b97      	ldr	r3, [pc, #604]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10d      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	4b94      	ldr	r3, [pc, #592]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a93      	ldr	r2, [pc, #588]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	61d3      	str	r3, [r2, #28]
 8001db2:	4b91      	ldr	r3, [pc, #580]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	4b8e      	ldr	r3, [pc, #568]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dce:	4b8b      	ldr	r3, [pc, #556]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a8a      	ldr	r2, [pc, #552]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dda:	f7ff fafd 	bl	80013d8 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff faf9 	bl	80013d8 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b64      	cmp	r3, #100	; 0x64
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0fd      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	4b81      	ldr	r3, [pc, #516]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x312>
 8001e08:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a7a      	ldr	r2, [pc, #488]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6213      	str	r3, [r2, #32]
 8001e14:	e02d      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x334>
 8001e1e:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a75      	ldr	r2, [pc, #468]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6213      	str	r3, [r2, #32]
 8001e2a:	4b73      	ldr	r3, [pc, #460]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a72      	ldr	r2, [pc, #456]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	6213      	str	r3, [r2, #32]
 8001e36:	e01c      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	d10c      	bne.n	8001e5a <HAL_RCC_OscConfig+0x356>
 8001e40:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a6c      	ldr	r2, [pc, #432]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6213      	str	r3, [r2, #32]
 8001e58:	e00b      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e5a:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a66      	ldr	r2, [pc, #408]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	4b64      	ldr	r3, [pc, #400]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a63      	ldr	r2, [pc, #396]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d015      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff faad 	bl	80013d8 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7ff faa9 	bl	80013d8 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e0ab      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e98:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ee      	beq.n	8001e82 <HAL_RCC_OscConfig+0x37e>
 8001ea4:	e014      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fa97 	bl	80013d8 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7ff fa93 	bl	80013d8 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e095      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec4:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ee      	bne.n	8001eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed6:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a47      	ldr	r2, [pc, #284]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8081 	beq.w	8001fee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eec:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d061      	beq.n	8001fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d146      	bne.n	8001f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f00:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <HAL_RCC_OscConfig+0x4fc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7ff fa67 	bl	80013d8 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff fa63 	bl	80013d8 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e067      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f20:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f34:	d108      	bne.n	8001f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f36:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	492d      	ldr	r1, [pc, #180]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a19      	ldr	r1, [r3, #32]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	4927      	ldr	r1, [pc, #156]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_RCC_OscConfig+0x4fc>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff fa37 	bl	80013d8 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff fa33 	bl	80013d8 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e037      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x46a>
 8001f8c:	e02f      	b.n	8001fee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <HAL_RCC_OscConfig+0x4fc>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fa20 	bl	80013d8 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff fa1c 	bl	80013d8 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e020      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x498>
 8001fba:	e018      	b.n	8001fee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e013      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
 8002000:	42420060 	.word	0x42420060

08002004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0d0      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d910      	bls.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4965      	ldr	r1, [pc, #404]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b8      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800206a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	494d      	ldr	r1, [pc, #308]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d040      	beq.n	8002124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d115      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e073      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06b      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e2:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f023 0203 	bic.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4936      	ldr	r1, [pc, #216]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f4:	f7ff f970 	bl	80013d8 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7ff f96c 	bl	80013d8 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e053      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 020c 	and.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	429a      	cmp	r2, r3
 8002122:	d1eb      	bne.n	80020fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d210      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 0207 	bic.w	r2, r3, #7
 800213a:	4922      	ldr	r1, [pc, #136]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e032      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4916      	ldr	r1, [pc, #88]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490e      	ldr	r1, [pc, #56]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002192:	f000 f821 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002196:	4602      	mov	r2, r0
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	490a      	ldr	r1, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	5ccb      	ldrb	r3, [r1, r3]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1cc>)
 80021ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1d0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff f8ce 	bl	8001354 <HAL_InitTick>

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08004118 	.word	0x08004118
 80021d0:	20000068 	.word	0x20000068
 80021d4:	2000006c 	.word	0x2000006c

080021d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021f2:	4b1e      	ldr	r3, [pc, #120]	; (800226c <HAL_RCC_GetSysClockFreq+0x94>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x30>
 8002202:	2b08      	cmp	r3, #8
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x36>
 8002206:	e027      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800220a:	613b      	str	r3, [r7, #16]
      break;
 800220c:	e027      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	4a17      	ldr	r2, [pc, #92]	; (8002274 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002218:	5cd3      	ldrb	r3, [r2, r3]
 800221a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d010      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_RCC_GetSysClockFreq+0x94>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	0c5b      	lsrs	r3, r3, #17
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800223a:	fb02 f203 	mul.w	r2, r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e004      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <HAL_RCC_GetSysClockFreq+0xa4>)
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	613b      	str	r3, [r7, #16]
      break;
 8002256:	e002      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800225a:	613b      	str	r3, [r7, #16]
      break;
 800225c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225e:	693b      	ldr	r3, [r7, #16]
}
 8002260:	4618      	mov	r0, r3
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	007a1200 	.word	0x007a1200
 8002274:	08004130 	.word	0x08004130
 8002278:	08004140 	.word	0x08004140
 800227c:	003d0900 	.word	0x003d0900

08002280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002284:	4b02      	ldr	r3, [pc, #8]	; (8002290 <HAL_RCC_GetHCLKFreq+0x10>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	20000068 	.word	0x20000068

08002294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002298:	f7ff fff2 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	4903      	ldr	r1, [pc, #12]	; (80022b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022aa:	5ccb      	ldrb	r3, [r1, r3]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	08004128 	.word	0x08004128

080022bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022c0:	f7ff ffde 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0adb      	lsrs	r3, r3, #11
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	4903      	ldr	r1, [pc, #12]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d2:	5ccb      	ldrb	r3, [r1, r3]
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d8:	4618      	mov	r0, r3
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08004128 	.word	0x08004128

080022e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <RCC_Delay+0x34>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <RCC_Delay+0x38>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0a5b      	lsrs	r3, r3, #9
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002300:	bf00      	nop
  }
  while (Delay --);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	60fa      	str	r2, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f9      	bne.n	8002300 <RCC_Delay+0x1c>
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	20000068 	.word	0x20000068
 800231c:	10624dd3 	.word	0x10624dd3

08002320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e041      	b.n	80023b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe fd2c 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3304      	adds	r3, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4610      	mov	r0, r2
 8002360:	f000 fa74 	bl	800284c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d001      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e03a      	b.n	800244e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a18      	ldr	r2, [pc, #96]	; (8002458 <HAL_TIM_Base_Start_IT+0x98>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00e      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0x58>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002402:	d009      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0x58>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <HAL_TIM_Base_Start_IT+0x9c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d004      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0x58>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a13      	ldr	r2, [pc, #76]	; (8002460 <HAL_TIM_Base_Start_IT+0xa0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d111      	bne.n	800243c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b06      	cmp	r3, #6
 8002428:	d010      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243a:	e007      	b.n	800244c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40012c00 	.word	0x40012c00
 800245c:	40000400 	.word	0x40000400
 8002460:	40000800 	.word	0x40000800

08002464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b02      	cmp	r3, #2
 8002478:	d122      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b02      	cmp	r3, #2
 8002486:	d11b      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0202 	mvn.w	r2, #2
 8002490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f9b4 	bl	8002814 <HAL_TIM_IC_CaptureCallback>
 80024ac:	e005      	b.n	80024ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f9a7 	bl	8002802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f9b6 	bl	8002826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d122      	bne.n	8002514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d11b      	bne.n	8002514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0204 	mvn.w	r2, #4
 80024e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2202      	movs	r2, #2
 80024ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f98a 	bl	8002814 <HAL_TIM_IC_CaptureCallback>
 8002500:	e005      	b.n	800250e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f97d 	bl	8002802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f98c 	bl	8002826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b08      	cmp	r3, #8
 8002520:	d122      	bne.n	8002568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b08      	cmp	r3, #8
 800252e:	d11b      	bne.n	8002568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0208 	mvn.w	r2, #8
 8002538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2204      	movs	r2, #4
 800253e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f960 	bl	8002814 <HAL_TIM_IC_CaptureCallback>
 8002554:	e005      	b.n	8002562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f953 	bl	8002802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f962 	bl	8002826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b10      	cmp	r3, #16
 8002574:	d122      	bne.n	80025bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b10      	cmp	r3, #16
 8002582:	d11b      	bne.n	80025bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0210 	mvn.w	r2, #16
 800258c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2208      	movs	r2, #8
 8002592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f936 	bl	8002814 <HAL_TIM_IC_CaptureCallback>
 80025a8:	e005      	b.n	80025b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f929 	bl	8002802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f938 	bl	8002826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d10e      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d107      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0201 	mvn.w	r2, #1
 80025e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe f92a 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f2:	2b80      	cmp	r3, #128	; 0x80
 80025f4:	d10e      	bne.n	8002614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002600:	2b80      	cmp	r3, #128	; 0x80
 8002602:	d107      	bne.n	8002614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800260c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fa7b 	bl	8002b0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261e:	2b40      	cmp	r3, #64	; 0x40
 8002620:	d10e      	bne.n	8002640 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d107      	bne.n	8002640 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f8fc 	bl	8002838 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b20      	cmp	r3, #32
 800264c:	d10e      	bne.n	800266c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b20      	cmp	r3, #32
 800265a:	d107      	bne.n	800266c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0220 	mvn.w	r2, #32
 8002664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa46 	bl	8002af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_TIM_ConfigClockSource+0x1c>
 800268c:	2302      	movs	r3, #2
 800268e:	e0b4      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x186>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c8:	d03e      	beq.n	8002748 <HAL_TIM_ConfigClockSource+0xd4>
 80026ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ce:	f200 8087 	bhi.w	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 80026d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d6:	f000 8086 	beq.w	80027e6 <HAL_TIM_ConfigClockSource+0x172>
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026de:	d87f      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 80026e0:	2b70      	cmp	r3, #112	; 0x70
 80026e2:	d01a      	beq.n	800271a <HAL_TIM_ConfigClockSource+0xa6>
 80026e4:	2b70      	cmp	r3, #112	; 0x70
 80026e6:	d87b      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 80026e8:	2b60      	cmp	r3, #96	; 0x60
 80026ea:	d050      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x11a>
 80026ec:	2b60      	cmp	r3, #96	; 0x60
 80026ee:	d877      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 80026f0:	2b50      	cmp	r3, #80	; 0x50
 80026f2:	d03c      	beq.n	800276e <HAL_TIM_ConfigClockSource+0xfa>
 80026f4:	2b50      	cmp	r3, #80	; 0x50
 80026f6:	d873      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 80026f8:	2b40      	cmp	r3, #64	; 0x40
 80026fa:	d058      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x13a>
 80026fc:	2b40      	cmp	r3, #64	; 0x40
 80026fe:	d86f      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002700:	2b30      	cmp	r3, #48	; 0x30
 8002702:	d064      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x15a>
 8002704:	2b30      	cmp	r3, #48	; 0x30
 8002706:	d86b      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002708:	2b20      	cmp	r3, #32
 800270a:	d060      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x15a>
 800270c:	2b20      	cmp	r3, #32
 800270e:	d867      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002710:	2b00      	cmp	r3, #0
 8002712:	d05c      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x15a>
 8002714:	2b10      	cmp	r3, #16
 8002716:	d05a      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x15a>
 8002718:	e062      	b.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6899      	ldr	r1, [r3, #8]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f000 f968 	bl	80029fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800273c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	609a      	str	r2, [r3, #8]
      break;
 8002746:	e04f      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	6899      	ldr	r1, [r3, #8]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f000 f951 	bl	80029fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800276a:	609a      	str	r2, [r3, #8]
      break;
 800276c:	e03c      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6859      	ldr	r1, [r3, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	461a      	mov	r2, r3
 800277c:	f000 f8c8 	bl	8002910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2150      	movs	r1, #80	; 0x50
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f91f 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 800278c:	e02c      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	461a      	mov	r2, r3
 800279c:	f000 f8e6 	bl	800296c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2160      	movs	r1, #96	; 0x60
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f90f 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 80027ac:	e01c      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f000 f8a8 	bl	8002910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2140      	movs	r1, #64	; 0x40
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f8ff 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 80027cc:	e00c      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4619      	mov	r1, r3
 80027d8:	4610      	mov	r0, r2
 80027da:	f000 f8f6 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 80027de:	e003      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      break;
 80027e4:	e000      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
	...

0800284c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a29      	ldr	r2, [pc, #164]	; (8002904 <TIM_Base_SetConfig+0xb8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00b      	beq.n	800287c <TIM_Base_SetConfig+0x30>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286a:	d007      	beq.n	800287c <TIM_Base_SetConfig+0x30>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a26      	ldr	r2, [pc, #152]	; (8002908 <TIM_Base_SetConfig+0xbc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d003      	beq.n	800287c <TIM_Base_SetConfig+0x30>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a25      	ldr	r2, [pc, #148]	; (800290c <TIM_Base_SetConfig+0xc0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d108      	bne.n	800288e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a1c      	ldr	r2, [pc, #112]	; (8002904 <TIM_Base_SetConfig+0xb8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00b      	beq.n	80028ae <TIM_Base_SetConfig+0x62>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289c:	d007      	beq.n	80028ae <TIM_Base_SetConfig+0x62>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a19      	ldr	r2, [pc, #100]	; (8002908 <TIM_Base_SetConfig+0xbc>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d003      	beq.n	80028ae <TIM_Base_SetConfig+0x62>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a18      	ldr	r2, [pc, #96]	; (800290c <TIM_Base_SetConfig+0xc0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d108      	bne.n	80028c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a07      	ldr	r2, [pc, #28]	; (8002904 <TIM_Base_SetConfig+0xb8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d103      	bne.n	80028f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	615a      	str	r2, [r3, #20]
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	40012c00 	.word	0x40012c00
 8002908:	40000400 	.word	0x40000400
 800290c:	40000800 	.word	0x40000800

08002910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f023 0201 	bic.w	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800293a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f023 030a 	bic.w	r3, r3, #10
 800294c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	621a      	str	r2, [r3, #32]
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	f023 0210 	bic.w	r2, r3, #16
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	031b      	lsls	r3, r3, #12
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	621a      	str	r2, [r3, #32]
}
 80029c0:	bf00      	nop
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f043 0307 	orr.w	r3, r3, #7
 80029ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	609a      	str	r2, [r3, #8]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b087      	sub	sp, #28
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	021a      	lsls	r2, r3, #8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	609a      	str	r2, [r3, #8]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e046      	b.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a16      	ldr	r2, [pc, #88]	; (8002aec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00e      	beq.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa0:	d009      	beq.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a10      	ldr	r2, [pc, #64]	; (8002af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	40012c00 	.word	0x40012c00
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800

08002af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e042      	b.n	8002bb4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe f952 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2224      	movs	r2, #36	; 0x24
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fdc5 	bl	80036f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d16d      	bne.n	8002cb8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_UART_Transmit+0x2c>
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e066      	b.n	8002cba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2221      	movs	r2, #33	; 0x21
 8002bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bfa:	f7fe fbed 	bl	80013d8 <HAL_GetTick>
 8002bfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	88fa      	ldrh	r2, [r7, #6]
 8002c04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	88fa      	ldrh	r2, [r7, #6]
 8002c0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c14:	d108      	bne.n	8002c28 <HAL_UART_Transmit+0x6c>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d104      	bne.n	8002c28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	e003      	b.n	8002c30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c30:	e02a      	b.n	8002c88 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2180      	movs	r1, #128	; 0x80
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fb14 	bl	800326a <UART_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e036      	b.n	8002cba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10b      	bne.n	8002c6a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	3302      	adds	r3, #2
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	e007      	b.n	8002c7a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	781a      	ldrb	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	3301      	adds	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1cf      	bne.n	8002c32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2140      	movs	r1, #64	; 0x40
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fae4 	bl	800326a <UART_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e006      	b.n	8002cba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e000      	b.n	8002cba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d112      	bne.n	8002d02 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_UART_Receive_IT+0x26>
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e00b      	b.n	8002d04 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fb24 	bl	8003346 <UART_Start_Receive_IT>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	e000      	b.n	8002d04 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
  }
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b0ba      	sub	sp, #232	; 0xe8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_UART_IRQHandler+0x66>
 8002d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fc01 	bl	8003572 <UART_Receive_IT>
      return;
 8002d70:	e25b      	b.n	800322a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80de 	beq.w	8002f38 <HAL_UART_IRQHandler+0x22c>
 8002d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d106      	bne.n	8002d96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80d1 	beq.w	8002f38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <HAL_UART_IRQHandler+0xae>
 8002da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f043 0201 	orr.w	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_UART_IRQHandler+0xd2>
 8002dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	f043 0202 	orr.w	r2, r3, #2
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_UART_IRQHandler+0xf6>
 8002dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f043 0204 	orr.w	r2, r3, #4
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d011      	beq.n	8002e32 <HAL_UART_IRQHandler+0x126>
 8002e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d105      	bne.n	8002e26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	f043 0208 	orr.w	r2, r3, #8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 81f2 	beq.w	8003220 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_UART_IRQHandler+0x14e>
 8002e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fb8c 	bl	8003572 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf14      	ite	ne
 8002e68:	2301      	movne	r3, #1
 8002e6a:	2300      	moveq	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d103      	bne.n	8002e86 <HAL_UART_IRQHandler+0x17a>
 8002e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d04f      	beq.n	8002f26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fa96 	bl	80033b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d041      	beq.n	8002f1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3314      	adds	r3, #20
 8002ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ea8:	e853 3f00 	ldrex	r3, [r3]
 8002eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1d9      	bne.n	8002e9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d013      	beq.n	8002f16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	4a7e      	ldr	r2, [pc, #504]	; (80030ec <HAL_UART_IRQHandler+0x3e0>)
 8002ef4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fbbe 	bl	800167c <HAL_DMA_Abort_IT>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f10:	4610      	mov	r0, r2
 8002f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f14:	e00e      	b.n	8002f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f993 	bl	8003242 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f1c:	e00a      	b.n	8002f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f98f 	bl	8003242 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f24:	e006      	b.n	8002f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f98b 	bl	8003242 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002f32:	e175      	b.n	8003220 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f34:	bf00      	nop
    return;
 8002f36:	e173      	b.n	8003220 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	f040 814f 	bne.w	80031e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 8148 	beq.w	80031e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8141 	beq.w	80031e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80b6 	beq.w	80030f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8145 	beq.w	8003224 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	f080 813e 	bcs.w	8003224 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	f000 8088 	beq.w	80030cc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fca:	e853 3f00 	ldrex	r3, [r3]
 8002fce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002fd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002fe8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ff4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ff8:	e841 2300 	strex	r3, r2, [r1]
 8002ffc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1d9      	bne.n	8002fbc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3314      	adds	r3, #20
 800300e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003012:	e853 3f00 	ldrex	r3, [r3]
 8003016:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3314      	adds	r3, #20
 8003028:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800302c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003030:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003034:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800303e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e1      	bne.n	8003008 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3314      	adds	r3, #20
 800304a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800304e:	e853 3f00 	ldrex	r3, [r3]
 8003052:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800305a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3314      	adds	r3, #20
 8003064:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003068:	66fa      	str	r2, [r7, #108]	; 0x6c
 800306a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800306e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003070:	e841 2300 	strex	r3, r2, [r1]
 8003074:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e3      	bne.n	8003044 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800309a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309c:	f023 0310 	bic.w	r3, r3, #16
 80030a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	330c      	adds	r3, #12
 80030aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80030b0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e3      	bne.n	800308a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe fa9d 	bl	8001606 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	b29b      	uxth	r3, r3
 80030e0:	4619      	mov	r1, r3
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f8b6 	bl	8003254 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030e8:	e09c      	b.n	8003224 <HAL_UART_IRQHandler+0x518>
 80030ea:	bf00      	nop
 80030ec:	0800347d 	.word	0x0800347d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 808e 	beq.w	8003228 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800310c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 8089 	beq.w	8003228 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	330c      	adds	r3, #12
 800311c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	e853 3f00 	ldrex	r3, [r3]
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800312c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800313a:	647a      	str	r2, [r7, #68]	; 0x44
 800313c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e3      	bne.n	8003116 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3314      	adds	r3, #20
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	623b      	str	r3, [r7, #32]
   return(result);
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3314      	adds	r3, #20
 800316e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003172:	633a      	str	r2, [r7, #48]	; 0x30
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e3      	bne.n	800314e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	330c      	adds	r3, #12
 800319a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	e853 3f00 	ldrex	r3, [r3]
 80031a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0310 	bic.w	r3, r3, #16
 80031aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	330c      	adds	r3, #12
 80031b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031b8:	61fa      	str	r2, [r7, #28]
 80031ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031bc:	69b9      	ldr	r1, [r7, #24]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	e841 2300 	strex	r3, r2, [r1]
 80031c4:	617b      	str	r3, [r7, #20]
   return(result);
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1e3      	bne.n	8003194 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031d6:	4619      	mov	r1, r3
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f83b 	bl	8003254 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031de:	e023      	b.n	8003228 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <HAL_UART_IRQHandler+0x4f4>
 80031ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f953 	bl	80034a4 <UART_Transmit_IT>
    return;
 80031fe:	e014      	b.n	800322a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00e      	beq.n	800322a <HAL_UART_IRQHandler+0x51e>
 800320c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f992 	bl	8003542 <UART_EndTransmit_IT>
    return;
 800321e:	e004      	b.n	800322a <HAL_UART_IRQHandler+0x51e>
    return;
 8003220:	bf00      	nop
 8003222:	e002      	b.n	800322a <HAL_UART_IRQHandler+0x51e>
      return;
 8003224:	bf00      	nop
 8003226:	e000      	b.n	800322a <HAL_UART_IRQHandler+0x51e>
      return;
 8003228:	bf00      	nop
  }
}
 800322a:	37e8      	adds	r7, #232	; 0xe8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr

0800326a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b090      	sub	sp, #64	; 0x40
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327a:	e050      	b.n	800331e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003282:	d04c      	beq.n	800331e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <UART_WaitOnFlagUntilTimeout+0x30>
 800328a:	f7fe f8a5 	bl	80013d8 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003296:	429a      	cmp	r2, r3
 8003298:	d241      	bcs.n	800331e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	330c      	adds	r3, #12
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	330c      	adds	r3, #12
 80032b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ba:	637a      	str	r2, [r7, #52]	; 0x34
 80032bc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032c2:	e841 2300 	strex	r3, r2, [r1]
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1e5      	bne.n	800329a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3314      	adds	r3, #20
 80032d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	613b      	str	r3, [r7, #16]
   return(result);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3314      	adds	r3, #20
 80032ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ee:	623a      	str	r2, [r7, #32]
 80032f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	69f9      	ldr	r1, [r7, #28]
 80032f4:	6a3a      	ldr	r2, [r7, #32]
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e5      	bne.n	80032ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e00f      	b.n	800333e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4013      	ands	r3, r2
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	429a      	cmp	r2, r3
 800332c:	bf0c      	ite	eq
 800332e:	2301      	moveq	r3, #1
 8003330:	2300      	movne	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	429a      	cmp	r2, r3
 800333a:	d09f      	beq.n	800327c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3740      	adds	r7, #64	; 0x40
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	4613      	mov	r3, r2
 8003352:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	88fa      	ldrh	r2, [r7, #6]
 800335e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	88fa      	ldrh	r2, [r7, #6]
 8003364:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2222      	movs	r2, #34	; 0x22
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d007      	beq.n	800338c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800338a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0220 	orr.w	r2, r2, #32
 80033aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b095      	sub	sp, #84	; 0x54
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ca:	e853 3f00 	ldrex	r3, [r3]
 80033ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	330c      	adds	r3, #12
 80033de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033e0:	643a      	str	r2, [r7, #64]	; 0x40
 80033e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e5      	bne.n	80033c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3314      	adds	r3, #20
 80033fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	61fb      	str	r3, [r7, #28]
   return(result);
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	64bb      	str	r3, [r7, #72]	; 0x48
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3314      	adds	r3, #20
 8003412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800341a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e5      	bne.n	80033f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	2b01      	cmp	r3, #1
 800342e:	d119      	bne.n	8003464 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f023 0310 	bic.w	r3, r3, #16
 8003446:	647b      	str	r3, [r7, #68]	; 0x44
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003450:	61ba      	str	r2, [r7, #24]
 8003452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6979      	ldr	r1, [r7, #20]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	613b      	str	r3, [r7, #16]
   return(result);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e5      	bne.n	8003430 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003472:	bf00      	nop
 8003474:	3754      	adds	r7, #84	; 0x54
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr

0800347c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f7ff fed3 	bl	8003242 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b21      	cmp	r3, #33	; 0x21
 80034b6:	d13e      	bne.n	8003536 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c0:	d114      	bne.n	80034ec <UART_Transmit_IT+0x48>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d110      	bne.n	80034ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	1c9a      	adds	r2, r3, #2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	621a      	str	r2, [r3, #32]
 80034ea:	e008      	b.n	80034fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	1c59      	adds	r1, r3, #1
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6211      	str	r1, [r2, #32]
 80034f6:	781a      	ldrb	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29b      	uxth	r3, r3
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	4619      	mov	r1, r3
 800350c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10f      	bne.n	8003532 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003520:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003530:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	e000      	b.n	8003538 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003536:	2302      	movs	r3, #2
  }
}
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr

08003542 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003558:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff fe64 	bl	8003230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b08c      	sub	sp, #48	; 0x30
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b22      	cmp	r3, #34	; 0x22
 8003584:	f040 80ae 	bne.w	80036e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003590:	d117      	bne.n	80035c2 <UART_Receive_IT+0x50>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d113      	bne.n	80035c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800359a:	2300      	movs	r3, #0
 800359c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	1c9a      	adds	r2, r3, #2
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28
 80035c0:	e026      	b.n	8003610 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d4:	d007      	beq.n	80035e6 <UART_Receive_IT+0x74>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10a      	bne.n	80035f4 <UART_Receive_IT+0x82>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	e008      	b.n	8003606 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003600:	b2da      	uxtb	r2, r3
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29b      	uxth	r3, r3
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4619      	mov	r1, r3
 800361e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003620:	2b00      	cmp	r3, #0
 8003622:	d15d      	bne.n	80036e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0220 	bic.w	r2, r2, #32
 8003632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003642:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	2b01      	cmp	r3, #1
 8003668:	d135      	bne.n	80036d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	330c      	adds	r3, #12
 8003676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	613b      	str	r3, [r7, #16]
   return(result);
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f023 0310 	bic.w	r3, r3, #16
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003690:	623a      	str	r2, [r7, #32]
 8003692:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	69f9      	ldr	r1, [r7, #28]
 8003696:	6a3a      	ldr	r2, [r7, #32]
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	61bb      	str	r3, [r7, #24]
   return(result);
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e5      	bne.n	8003670 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b10      	cmp	r3, #16
 80036b0:	d10a      	bne.n	80036c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036cc:	4619      	mov	r1, r3
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff fdc0 	bl	8003254 <HAL_UARTEx_RxEventCallback>
 80036d4:	e002      	b.n	80036dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fc ff06 	bl	80004e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	e002      	b.n	80036e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e000      	b.n	80036e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3730      	adds	r7, #48	; 0x30
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800372a:	f023 030c 	bic.w	r3, r3, #12
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	430b      	orrs	r3, r1
 8003736:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2c      	ldr	r2, [pc, #176]	; (8003804 <UART_SetConfig+0x114>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d103      	bne.n	8003760 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003758:	f7fe fdb0 	bl	80022bc <HAL_RCC_GetPCLK2Freq>
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	e002      	b.n	8003766 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003760:	f7fe fd98 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 8003764:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	009a      	lsls	r2, r3, #2
 8003770:	441a      	add	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	4a22      	ldr	r2, [pc, #136]	; (8003808 <UART_SetConfig+0x118>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	0119      	lsls	r1, r3, #4
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	009a      	lsls	r2, r3, #2
 8003790:	441a      	add	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	fbb2 f2f3 	udiv	r2, r2, r3
 800379c:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <UART_SetConfig+0x118>)
 800379e:	fba3 0302 	umull	r0, r3, r3, r2
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	2064      	movs	r0, #100	; 0x64
 80037a6:	fb00 f303 	mul.w	r3, r0, r3
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	3332      	adds	r3, #50	; 0x32
 80037b0:	4a15      	ldr	r2, [pc, #84]	; (8003808 <UART_SetConfig+0x118>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037bc:	4419      	add	r1, r3
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009a      	lsls	r2, r3, #2
 80037c8:	441a      	add	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <UART_SetConfig+0x118>)
 80037d6:	fba3 0302 	umull	r0, r3, r3, r2
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	2064      	movs	r0, #100	; 0x64
 80037de:	fb00 f303 	mul.w	r3, r0, r3
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	3332      	adds	r3, #50	; 0x32
 80037e8:	4a07      	ldr	r2, [pc, #28]	; (8003808 <UART_SetConfig+0x118>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	f003 020f 	and.w	r2, r3, #15
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	440a      	add	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40013800 	.word	0x40013800
 8003808:	51eb851f 	.word	0x51eb851f

0800380c <__errno>:
 800380c:	4b01      	ldr	r3, [pc, #4]	; (8003814 <__errno+0x8>)
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000074 	.word	0x20000074

08003818 <__libc_init_array>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	2600      	movs	r6, #0
 800381c:	4d0c      	ldr	r5, [pc, #48]	; (8003850 <__libc_init_array+0x38>)
 800381e:	4c0d      	ldr	r4, [pc, #52]	; (8003854 <__libc_init_array+0x3c>)
 8003820:	1b64      	subs	r4, r4, r5
 8003822:	10a4      	asrs	r4, r4, #2
 8003824:	42a6      	cmp	r6, r4
 8003826:	d109      	bne.n	800383c <__libc_init_array+0x24>
 8003828:	f000 fc5c 	bl	80040e4 <_init>
 800382c:	2600      	movs	r6, #0
 800382e:	4d0a      	ldr	r5, [pc, #40]	; (8003858 <__libc_init_array+0x40>)
 8003830:	4c0a      	ldr	r4, [pc, #40]	; (800385c <__libc_init_array+0x44>)
 8003832:	1b64      	subs	r4, r4, r5
 8003834:	10a4      	asrs	r4, r4, #2
 8003836:	42a6      	cmp	r6, r4
 8003838:	d105      	bne.n	8003846 <__libc_init_array+0x2e>
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003840:	4798      	blx	r3
 8003842:	3601      	adds	r6, #1
 8003844:	e7ee      	b.n	8003824 <__libc_init_array+0xc>
 8003846:	f855 3b04 	ldr.w	r3, [r5], #4
 800384a:	4798      	blx	r3
 800384c:	3601      	adds	r6, #1
 800384e:	e7f2      	b.n	8003836 <__libc_init_array+0x1e>
 8003850:	08004178 	.word	0x08004178
 8003854:	08004178 	.word	0x08004178
 8003858:	08004178 	.word	0x08004178
 800385c:	0800417c 	.word	0x0800417c

08003860 <memset>:
 8003860:	4603      	mov	r3, r0
 8003862:	4402      	add	r2, r0
 8003864:	4293      	cmp	r3, r2
 8003866:	d100      	bne.n	800386a <memset+0xa>
 8003868:	4770      	bx	lr
 800386a:	f803 1b01 	strb.w	r1, [r3], #1
 800386e:	e7f9      	b.n	8003864 <memset+0x4>

08003870 <siprintf>:
 8003870:	b40e      	push	{r1, r2, r3}
 8003872:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003876:	b500      	push	{lr}
 8003878:	b09c      	sub	sp, #112	; 0x70
 800387a:	ab1d      	add	r3, sp, #116	; 0x74
 800387c:	9002      	str	r0, [sp, #8]
 800387e:	9006      	str	r0, [sp, #24]
 8003880:	9107      	str	r1, [sp, #28]
 8003882:	9104      	str	r1, [sp, #16]
 8003884:	4808      	ldr	r0, [pc, #32]	; (80038a8 <siprintf+0x38>)
 8003886:	4909      	ldr	r1, [pc, #36]	; (80038ac <siprintf+0x3c>)
 8003888:	f853 2b04 	ldr.w	r2, [r3], #4
 800388c:	9105      	str	r1, [sp, #20]
 800388e:	6800      	ldr	r0, [r0, #0]
 8003890:	a902      	add	r1, sp, #8
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	f000 f868 	bl	8003968 <_svfiprintf_r>
 8003898:	2200      	movs	r2, #0
 800389a:	9b02      	ldr	r3, [sp, #8]
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	b01c      	add	sp, #112	; 0x70
 80038a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80038a4:	b003      	add	sp, #12
 80038a6:	4770      	bx	lr
 80038a8:	20000074 	.word	0x20000074
 80038ac:	ffff0208 	.word	0xffff0208

080038b0 <__ssputs_r>:
 80038b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b4:	688e      	ldr	r6, [r1, #8]
 80038b6:	4682      	mov	sl, r0
 80038b8:	429e      	cmp	r6, r3
 80038ba:	460c      	mov	r4, r1
 80038bc:	4690      	mov	r8, r2
 80038be:	461f      	mov	r7, r3
 80038c0:	d838      	bhi.n	8003934 <__ssputs_r+0x84>
 80038c2:	898a      	ldrh	r2, [r1, #12]
 80038c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038c8:	d032      	beq.n	8003930 <__ssputs_r+0x80>
 80038ca:	6825      	ldr	r5, [r4, #0]
 80038cc:	6909      	ldr	r1, [r1, #16]
 80038ce:	3301      	adds	r3, #1
 80038d0:	eba5 0901 	sub.w	r9, r5, r1
 80038d4:	6965      	ldr	r5, [r4, #20]
 80038d6:	444b      	add	r3, r9
 80038d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038e0:	106d      	asrs	r5, r5, #1
 80038e2:	429d      	cmp	r5, r3
 80038e4:	bf38      	it	cc
 80038e6:	461d      	movcc	r5, r3
 80038e8:	0553      	lsls	r3, r2, #21
 80038ea:	d531      	bpl.n	8003950 <__ssputs_r+0xa0>
 80038ec:	4629      	mov	r1, r5
 80038ee:	f000 fb53 	bl	8003f98 <_malloc_r>
 80038f2:	4606      	mov	r6, r0
 80038f4:	b950      	cbnz	r0, 800390c <__ssputs_r+0x5c>
 80038f6:	230c      	movs	r3, #12
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295
 80038fc:	f8ca 3000 	str.w	r3, [sl]
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003906:	81a3      	strh	r3, [r4, #12]
 8003908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800390c:	464a      	mov	r2, r9
 800390e:	6921      	ldr	r1, [r4, #16]
 8003910:	f000 face 	bl	8003eb0 <memcpy>
 8003914:	89a3      	ldrh	r3, [r4, #12]
 8003916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800391a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391e:	81a3      	strh	r3, [r4, #12]
 8003920:	6126      	str	r6, [r4, #16]
 8003922:	444e      	add	r6, r9
 8003924:	6026      	str	r6, [r4, #0]
 8003926:	463e      	mov	r6, r7
 8003928:	6165      	str	r5, [r4, #20]
 800392a:	eba5 0509 	sub.w	r5, r5, r9
 800392e:	60a5      	str	r5, [r4, #8]
 8003930:	42be      	cmp	r6, r7
 8003932:	d900      	bls.n	8003936 <__ssputs_r+0x86>
 8003934:	463e      	mov	r6, r7
 8003936:	4632      	mov	r2, r6
 8003938:	4641      	mov	r1, r8
 800393a:	6820      	ldr	r0, [r4, #0]
 800393c:	f000 fac6 	bl	8003ecc <memmove>
 8003940:	68a3      	ldr	r3, [r4, #8]
 8003942:	6822      	ldr	r2, [r4, #0]
 8003944:	1b9b      	subs	r3, r3, r6
 8003946:	4432      	add	r2, r6
 8003948:	2000      	movs	r0, #0
 800394a:	60a3      	str	r3, [r4, #8]
 800394c:	6022      	str	r2, [r4, #0]
 800394e:	e7db      	b.n	8003908 <__ssputs_r+0x58>
 8003950:	462a      	mov	r2, r5
 8003952:	f000 fb7b 	bl	800404c <_realloc_r>
 8003956:	4606      	mov	r6, r0
 8003958:	2800      	cmp	r0, #0
 800395a:	d1e1      	bne.n	8003920 <__ssputs_r+0x70>
 800395c:	4650      	mov	r0, sl
 800395e:	6921      	ldr	r1, [r4, #16]
 8003960:	f000 face 	bl	8003f00 <_free_r>
 8003964:	e7c7      	b.n	80038f6 <__ssputs_r+0x46>
	...

08003968 <_svfiprintf_r>:
 8003968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396c:	4698      	mov	r8, r3
 800396e:	898b      	ldrh	r3, [r1, #12]
 8003970:	4607      	mov	r7, r0
 8003972:	061b      	lsls	r3, r3, #24
 8003974:	460d      	mov	r5, r1
 8003976:	4614      	mov	r4, r2
 8003978:	b09d      	sub	sp, #116	; 0x74
 800397a:	d50e      	bpl.n	800399a <_svfiprintf_r+0x32>
 800397c:	690b      	ldr	r3, [r1, #16]
 800397e:	b963      	cbnz	r3, 800399a <_svfiprintf_r+0x32>
 8003980:	2140      	movs	r1, #64	; 0x40
 8003982:	f000 fb09 	bl	8003f98 <_malloc_r>
 8003986:	6028      	str	r0, [r5, #0]
 8003988:	6128      	str	r0, [r5, #16]
 800398a:	b920      	cbnz	r0, 8003996 <_svfiprintf_r+0x2e>
 800398c:	230c      	movs	r3, #12
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	f04f 30ff 	mov.w	r0, #4294967295
 8003994:	e0d1      	b.n	8003b3a <_svfiprintf_r+0x1d2>
 8003996:	2340      	movs	r3, #64	; 0x40
 8003998:	616b      	str	r3, [r5, #20]
 800399a:	2300      	movs	r3, #0
 800399c:	9309      	str	r3, [sp, #36]	; 0x24
 800399e:	2320      	movs	r3, #32
 80039a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039a4:	2330      	movs	r3, #48	; 0x30
 80039a6:	f04f 0901 	mov.w	r9, #1
 80039aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80039ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b54 <_svfiprintf_r+0x1ec>
 80039b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039b6:	4623      	mov	r3, r4
 80039b8:	469a      	mov	sl, r3
 80039ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039be:	b10a      	cbz	r2, 80039c4 <_svfiprintf_r+0x5c>
 80039c0:	2a25      	cmp	r2, #37	; 0x25
 80039c2:	d1f9      	bne.n	80039b8 <_svfiprintf_r+0x50>
 80039c4:	ebba 0b04 	subs.w	fp, sl, r4
 80039c8:	d00b      	beq.n	80039e2 <_svfiprintf_r+0x7a>
 80039ca:	465b      	mov	r3, fp
 80039cc:	4622      	mov	r2, r4
 80039ce:	4629      	mov	r1, r5
 80039d0:	4638      	mov	r0, r7
 80039d2:	f7ff ff6d 	bl	80038b0 <__ssputs_r>
 80039d6:	3001      	adds	r0, #1
 80039d8:	f000 80aa 	beq.w	8003b30 <_svfiprintf_r+0x1c8>
 80039dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039de:	445a      	add	r2, fp
 80039e0:	9209      	str	r2, [sp, #36]	; 0x24
 80039e2:	f89a 3000 	ldrb.w	r3, [sl]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80a2 	beq.w	8003b30 <_svfiprintf_r+0x1c8>
 80039ec:	2300      	movs	r3, #0
 80039ee:	f04f 32ff 	mov.w	r2, #4294967295
 80039f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039f6:	f10a 0a01 	add.w	sl, sl, #1
 80039fa:	9304      	str	r3, [sp, #16]
 80039fc:	9307      	str	r3, [sp, #28]
 80039fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a02:	931a      	str	r3, [sp, #104]	; 0x68
 8003a04:	4654      	mov	r4, sl
 8003a06:	2205      	movs	r2, #5
 8003a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a0c:	4851      	ldr	r0, [pc, #324]	; (8003b54 <_svfiprintf_r+0x1ec>)
 8003a0e:	f000 fa41 	bl	8003e94 <memchr>
 8003a12:	9a04      	ldr	r2, [sp, #16]
 8003a14:	b9d8      	cbnz	r0, 8003a4e <_svfiprintf_r+0xe6>
 8003a16:	06d0      	lsls	r0, r2, #27
 8003a18:	bf44      	itt	mi
 8003a1a:	2320      	movmi	r3, #32
 8003a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a20:	0711      	lsls	r1, r2, #28
 8003a22:	bf44      	itt	mi
 8003a24:	232b      	movmi	r3, #43	; 0x2b
 8003a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a30:	d015      	beq.n	8003a5e <_svfiprintf_r+0xf6>
 8003a32:	4654      	mov	r4, sl
 8003a34:	2000      	movs	r0, #0
 8003a36:	f04f 0c0a 	mov.w	ip, #10
 8003a3a:	9a07      	ldr	r2, [sp, #28]
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a42:	3b30      	subs	r3, #48	; 0x30
 8003a44:	2b09      	cmp	r3, #9
 8003a46:	d94e      	bls.n	8003ae6 <_svfiprintf_r+0x17e>
 8003a48:	b1b0      	cbz	r0, 8003a78 <_svfiprintf_r+0x110>
 8003a4a:	9207      	str	r2, [sp, #28]
 8003a4c:	e014      	b.n	8003a78 <_svfiprintf_r+0x110>
 8003a4e:	eba0 0308 	sub.w	r3, r0, r8
 8003a52:	fa09 f303 	lsl.w	r3, r9, r3
 8003a56:	4313      	orrs	r3, r2
 8003a58:	46a2      	mov	sl, r4
 8003a5a:	9304      	str	r3, [sp, #16]
 8003a5c:	e7d2      	b.n	8003a04 <_svfiprintf_r+0x9c>
 8003a5e:	9b03      	ldr	r3, [sp, #12]
 8003a60:	1d19      	adds	r1, r3, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	9103      	str	r1, [sp, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bfbb      	ittet	lt
 8003a6a:	425b      	neglt	r3, r3
 8003a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8003a70:	9307      	strge	r3, [sp, #28]
 8003a72:	9307      	strlt	r3, [sp, #28]
 8003a74:	bfb8      	it	lt
 8003a76:	9204      	strlt	r2, [sp, #16]
 8003a78:	7823      	ldrb	r3, [r4, #0]
 8003a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a7c:	d10c      	bne.n	8003a98 <_svfiprintf_r+0x130>
 8003a7e:	7863      	ldrb	r3, [r4, #1]
 8003a80:	2b2a      	cmp	r3, #42	; 0x2a
 8003a82:	d135      	bne.n	8003af0 <_svfiprintf_r+0x188>
 8003a84:	9b03      	ldr	r3, [sp, #12]
 8003a86:	3402      	adds	r4, #2
 8003a88:	1d1a      	adds	r2, r3, #4
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	9203      	str	r2, [sp, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bfb8      	it	lt
 8003a92:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a96:	9305      	str	r3, [sp, #20]
 8003a98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b64 <_svfiprintf_r+0x1fc>
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	4650      	mov	r0, sl
 8003aa0:	7821      	ldrb	r1, [r4, #0]
 8003aa2:	f000 f9f7 	bl	8003e94 <memchr>
 8003aa6:	b140      	cbz	r0, 8003aba <_svfiprintf_r+0x152>
 8003aa8:	2340      	movs	r3, #64	; 0x40
 8003aaa:	eba0 000a 	sub.w	r0, r0, sl
 8003aae:	fa03 f000 	lsl.w	r0, r3, r0
 8003ab2:	9b04      	ldr	r3, [sp, #16]
 8003ab4:	3401      	adds	r4, #1
 8003ab6:	4303      	orrs	r3, r0
 8003ab8:	9304      	str	r3, [sp, #16]
 8003aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003abe:	2206      	movs	r2, #6
 8003ac0:	4825      	ldr	r0, [pc, #148]	; (8003b58 <_svfiprintf_r+0x1f0>)
 8003ac2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ac6:	f000 f9e5 	bl	8003e94 <memchr>
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d038      	beq.n	8003b40 <_svfiprintf_r+0x1d8>
 8003ace:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <_svfiprintf_r+0x1f4>)
 8003ad0:	bb1b      	cbnz	r3, 8003b1a <_svfiprintf_r+0x1b2>
 8003ad2:	9b03      	ldr	r3, [sp, #12]
 8003ad4:	3307      	adds	r3, #7
 8003ad6:	f023 0307 	bic.w	r3, r3, #7
 8003ada:	3308      	adds	r3, #8
 8003adc:	9303      	str	r3, [sp, #12]
 8003ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae0:	4433      	add	r3, r6
 8003ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae4:	e767      	b.n	80039b6 <_svfiprintf_r+0x4e>
 8003ae6:	460c      	mov	r4, r1
 8003ae8:	2001      	movs	r0, #1
 8003aea:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aee:	e7a5      	b.n	8003a3c <_svfiprintf_r+0xd4>
 8003af0:	2300      	movs	r3, #0
 8003af2:	f04f 0c0a 	mov.w	ip, #10
 8003af6:	4619      	mov	r1, r3
 8003af8:	3401      	adds	r4, #1
 8003afa:	9305      	str	r3, [sp, #20]
 8003afc:	4620      	mov	r0, r4
 8003afe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b02:	3a30      	subs	r2, #48	; 0x30
 8003b04:	2a09      	cmp	r2, #9
 8003b06:	d903      	bls.n	8003b10 <_svfiprintf_r+0x1a8>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0c5      	beq.n	8003a98 <_svfiprintf_r+0x130>
 8003b0c:	9105      	str	r1, [sp, #20]
 8003b0e:	e7c3      	b.n	8003a98 <_svfiprintf_r+0x130>
 8003b10:	4604      	mov	r4, r0
 8003b12:	2301      	movs	r3, #1
 8003b14:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b18:	e7f0      	b.n	8003afc <_svfiprintf_r+0x194>
 8003b1a:	ab03      	add	r3, sp, #12
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	462a      	mov	r2, r5
 8003b20:	4638      	mov	r0, r7
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <_svfiprintf_r+0x1f8>)
 8003b24:	a904      	add	r1, sp, #16
 8003b26:	f3af 8000 	nop.w
 8003b2a:	1c42      	adds	r2, r0, #1
 8003b2c:	4606      	mov	r6, r0
 8003b2e:	d1d6      	bne.n	8003ade <_svfiprintf_r+0x176>
 8003b30:	89ab      	ldrh	r3, [r5, #12]
 8003b32:	065b      	lsls	r3, r3, #25
 8003b34:	f53f af2c 	bmi.w	8003990 <_svfiprintf_r+0x28>
 8003b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b3a:	b01d      	add	sp, #116	; 0x74
 8003b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b40:	ab03      	add	r3, sp, #12
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	462a      	mov	r2, r5
 8003b46:	4638      	mov	r0, r7
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <_svfiprintf_r+0x1f8>)
 8003b4a:	a904      	add	r1, sp, #16
 8003b4c:	f000 f87c 	bl	8003c48 <_printf_i>
 8003b50:	e7eb      	b.n	8003b2a <_svfiprintf_r+0x1c2>
 8003b52:	bf00      	nop
 8003b54:	08004142 	.word	0x08004142
 8003b58:	0800414c 	.word	0x0800414c
 8003b5c:	00000000 	.word	0x00000000
 8003b60:	080038b1 	.word	0x080038b1
 8003b64:	08004148 	.word	0x08004148

08003b68 <_printf_common>:
 8003b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b6c:	4616      	mov	r6, r2
 8003b6e:	4699      	mov	r9, r3
 8003b70:	688a      	ldr	r2, [r1, #8]
 8003b72:	690b      	ldr	r3, [r1, #16]
 8003b74:	4607      	mov	r7, r0
 8003b76:	4293      	cmp	r3, r2
 8003b78:	bfb8      	it	lt
 8003b7a:	4613      	movlt	r3, r2
 8003b7c:	6033      	str	r3, [r6, #0]
 8003b7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b82:	460c      	mov	r4, r1
 8003b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b88:	b10a      	cbz	r2, 8003b8e <_printf_common+0x26>
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	6033      	str	r3, [r6, #0]
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	0699      	lsls	r1, r3, #26
 8003b92:	bf42      	ittt	mi
 8003b94:	6833      	ldrmi	r3, [r6, #0]
 8003b96:	3302      	addmi	r3, #2
 8003b98:	6033      	strmi	r3, [r6, #0]
 8003b9a:	6825      	ldr	r5, [r4, #0]
 8003b9c:	f015 0506 	ands.w	r5, r5, #6
 8003ba0:	d106      	bne.n	8003bb0 <_printf_common+0x48>
 8003ba2:	f104 0a19 	add.w	sl, r4, #25
 8003ba6:	68e3      	ldr	r3, [r4, #12]
 8003ba8:	6832      	ldr	r2, [r6, #0]
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	42ab      	cmp	r3, r5
 8003bae:	dc28      	bgt.n	8003c02 <_printf_common+0x9a>
 8003bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bb4:	1e13      	subs	r3, r2, #0
 8003bb6:	6822      	ldr	r2, [r4, #0]
 8003bb8:	bf18      	it	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	0692      	lsls	r2, r2, #26
 8003bbe:	d42d      	bmi.n	8003c1c <_printf_common+0xb4>
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bc8:	47c0      	blx	r8
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d020      	beq.n	8003c10 <_printf_common+0xa8>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	68e5      	ldr	r5, [r4, #12]
 8003bd2:	f003 0306 	and.w	r3, r3, #6
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	bf18      	it	ne
 8003bda:	2500      	movne	r5, #0
 8003bdc:	6832      	ldr	r2, [r6, #0]
 8003bde:	f04f 0600 	mov.w	r6, #0
 8003be2:	68a3      	ldr	r3, [r4, #8]
 8003be4:	bf08      	it	eq
 8003be6:	1aad      	subeq	r5, r5, r2
 8003be8:	6922      	ldr	r2, [r4, #16]
 8003bea:	bf08      	it	eq
 8003bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	bfc4      	itt	gt
 8003bf4:	1a9b      	subgt	r3, r3, r2
 8003bf6:	18ed      	addgt	r5, r5, r3
 8003bf8:	341a      	adds	r4, #26
 8003bfa:	42b5      	cmp	r5, r6
 8003bfc:	d11a      	bne.n	8003c34 <_printf_common+0xcc>
 8003bfe:	2000      	movs	r0, #0
 8003c00:	e008      	b.n	8003c14 <_printf_common+0xac>
 8003c02:	2301      	movs	r3, #1
 8003c04:	4652      	mov	r2, sl
 8003c06:	4649      	mov	r1, r9
 8003c08:	4638      	mov	r0, r7
 8003c0a:	47c0      	blx	r8
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	d103      	bne.n	8003c18 <_printf_common+0xb0>
 8003c10:	f04f 30ff 	mov.w	r0, #4294967295
 8003c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c18:	3501      	adds	r5, #1
 8003c1a:	e7c4      	b.n	8003ba6 <_printf_common+0x3e>
 8003c1c:	2030      	movs	r0, #48	; 0x30
 8003c1e:	18e1      	adds	r1, r4, r3
 8003c20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c2a:	4422      	add	r2, r4
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c32:	e7c5      	b.n	8003bc0 <_printf_common+0x58>
 8003c34:	2301      	movs	r3, #1
 8003c36:	4622      	mov	r2, r4
 8003c38:	4649      	mov	r1, r9
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	47c0      	blx	r8
 8003c3e:	3001      	adds	r0, #1
 8003c40:	d0e6      	beq.n	8003c10 <_printf_common+0xa8>
 8003c42:	3601      	adds	r6, #1
 8003c44:	e7d9      	b.n	8003bfa <_printf_common+0x92>
	...

08003c48 <_printf_i>:
 8003c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	7e27      	ldrb	r7, [r4, #24]
 8003c50:	4691      	mov	r9, r2
 8003c52:	2f78      	cmp	r7, #120	; 0x78
 8003c54:	4680      	mov	r8, r0
 8003c56:	469a      	mov	sl, r3
 8003c58:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c5e:	d807      	bhi.n	8003c70 <_printf_i+0x28>
 8003c60:	2f62      	cmp	r7, #98	; 0x62
 8003c62:	d80a      	bhi.n	8003c7a <_printf_i+0x32>
 8003c64:	2f00      	cmp	r7, #0
 8003c66:	f000 80d9 	beq.w	8003e1c <_printf_i+0x1d4>
 8003c6a:	2f58      	cmp	r7, #88	; 0x58
 8003c6c:	f000 80a4 	beq.w	8003db8 <_printf_i+0x170>
 8003c70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c78:	e03a      	b.n	8003cf0 <_printf_i+0xa8>
 8003c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c7e:	2b15      	cmp	r3, #21
 8003c80:	d8f6      	bhi.n	8003c70 <_printf_i+0x28>
 8003c82:	a001      	add	r0, pc, #4	; (adr r0, 8003c88 <_printf_i+0x40>)
 8003c84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003c88:	08003ce1 	.word	0x08003ce1
 8003c8c:	08003cf5 	.word	0x08003cf5
 8003c90:	08003c71 	.word	0x08003c71
 8003c94:	08003c71 	.word	0x08003c71
 8003c98:	08003c71 	.word	0x08003c71
 8003c9c:	08003c71 	.word	0x08003c71
 8003ca0:	08003cf5 	.word	0x08003cf5
 8003ca4:	08003c71 	.word	0x08003c71
 8003ca8:	08003c71 	.word	0x08003c71
 8003cac:	08003c71 	.word	0x08003c71
 8003cb0:	08003c71 	.word	0x08003c71
 8003cb4:	08003e03 	.word	0x08003e03
 8003cb8:	08003d25 	.word	0x08003d25
 8003cbc:	08003de5 	.word	0x08003de5
 8003cc0:	08003c71 	.word	0x08003c71
 8003cc4:	08003c71 	.word	0x08003c71
 8003cc8:	08003e25 	.word	0x08003e25
 8003ccc:	08003c71 	.word	0x08003c71
 8003cd0:	08003d25 	.word	0x08003d25
 8003cd4:	08003c71 	.word	0x08003c71
 8003cd8:	08003c71 	.word	0x08003c71
 8003cdc:	08003ded 	.word	0x08003ded
 8003ce0:	680b      	ldr	r3, [r1, #0]
 8003ce2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ce6:	1d1a      	adds	r2, r3, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	600a      	str	r2, [r1, #0]
 8003cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0a4      	b.n	8003e3e <_printf_i+0x1f6>
 8003cf4:	6825      	ldr	r5, [r4, #0]
 8003cf6:	6808      	ldr	r0, [r1, #0]
 8003cf8:	062e      	lsls	r6, r5, #24
 8003cfa:	f100 0304 	add.w	r3, r0, #4
 8003cfe:	d50a      	bpl.n	8003d16 <_printf_i+0xce>
 8003d00:	6805      	ldr	r5, [r0, #0]
 8003d02:	600b      	str	r3, [r1, #0]
 8003d04:	2d00      	cmp	r5, #0
 8003d06:	da03      	bge.n	8003d10 <_printf_i+0xc8>
 8003d08:	232d      	movs	r3, #45	; 0x2d
 8003d0a:	426d      	negs	r5, r5
 8003d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d10:	230a      	movs	r3, #10
 8003d12:	485e      	ldr	r0, [pc, #376]	; (8003e8c <_printf_i+0x244>)
 8003d14:	e019      	b.n	8003d4a <_printf_i+0x102>
 8003d16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d1a:	6805      	ldr	r5, [r0, #0]
 8003d1c:	600b      	str	r3, [r1, #0]
 8003d1e:	bf18      	it	ne
 8003d20:	b22d      	sxthne	r5, r5
 8003d22:	e7ef      	b.n	8003d04 <_printf_i+0xbc>
 8003d24:	680b      	ldr	r3, [r1, #0]
 8003d26:	6825      	ldr	r5, [r4, #0]
 8003d28:	1d18      	adds	r0, r3, #4
 8003d2a:	6008      	str	r0, [r1, #0]
 8003d2c:	0628      	lsls	r0, r5, #24
 8003d2e:	d501      	bpl.n	8003d34 <_printf_i+0xec>
 8003d30:	681d      	ldr	r5, [r3, #0]
 8003d32:	e002      	b.n	8003d3a <_printf_i+0xf2>
 8003d34:	0669      	lsls	r1, r5, #25
 8003d36:	d5fb      	bpl.n	8003d30 <_printf_i+0xe8>
 8003d38:	881d      	ldrh	r5, [r3, #0]
 8003d3a:	2f6f      	cmp	r7, #111	; 0x6f
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2308      	moveq	r3, #8
 8003d40:	230a      	movne	r3, #10
 8003d42:	4852      	ldr	r0, [pc, #328]	; (8003e8c <_printf_i+0x244>)
 8003d44:	2100      	movs	r1, #0
 8003d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d4a:	6866      	ldr	r6, [r4, #4]
 8003d4c:	2e00      	cmp	r6, #0
 8003d4e:	bfa8      	it	ge
 8003d50:	6821      	ldrge	r1, [r4, #0]
 8003d52:	60a6      	str	r6, [r4, #8]
 8003d54:	bfa4      	itt	ge
 8003d56:	f021 0104 	bicge.w	r1, r1, #4
 8003d5a:	6021      	strge	r1, [r4, #0]
 8003d5c:	b90d      	cbnz	r5, 8003d62 <_printf_i+0x11a>
 8003d5e:	2e00      	cmp	r6, #0
 8003d60:	d04d      	beq.n	8003dfe <_printf_i+0x1b6>
 8003d62:	4616      	mov	r6, r2
 8003d64:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d68:	fb03 5711 	mls	r7, r3, r1, r5
 8003d6c:	5dc7      	ldrb	r7, [r0, r7]
 8003d6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d72:	462f      	mov	r7, r5
 8003d74:	42bb      	cmp	r3, r7
 8003d76:	460d      	mov	r5, r1
 8003d78:	d9f4      	bls.n	8003d64 <_printf_i+0x11c>
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d10b      	bne.n	8003d96 <_printf_i+0x14e>
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	07df      	lsls	r7, r3, #31
 8003d82:	d508      	bpl.n	8003d96 <_printf_i+0x14e>
 8003d84:	6923      	ldr	r3, [r4, #16]
 8003d86:	6861      	ldr	r1, [r4, #4]
 8003d88:	4299      	cmp	r1, r3
 8003d8a:	bfde      	ittt	le
 8003d8c:	2330      	movle	r3, #48	; 0x30
 8003d8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d96:	1b92      	subs	r2, r2, r6
 8003d98:	6122      	str	r2, [r4, #16]
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4640      	mov	r0, r8
 8003da0:	f8cd a000 	str.w	sl, [sp]
 8003da4:	aa03      	add	r2, sp, #12
 8003da6:	f7ff fedf 	bl	8003b68 <_printf_common>
 8003daa:	3001      	adds	r0, #1
 8003dac:	d14c      	bne.n	8003e48 <_printf_i+0x200>
 8003dae:	f04f 30ff 	mov.w	r0, #4294967295
 8003db2:	b004      	add	sp, #16
 8003db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db8:	4834      	ldr	r0, [pc, #208]	; (8003e8c <_printf_i+0x244>)
 8003dba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003dbe:	680e      	ldr	r6, [r1, #0]
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003dc6:	061f      	lsls	r7, r3, #24
 8003dc8:	600e      	str	r6, [r1, #0]
 8003dca:	d514      	bpl.n	8003df6 <_printf_i+0x1ae>
 8003dcc:	07d9      	lsls	r1, r3, #31
 8003dce:	bf44      	itt	mi
 8003dd0:	f043 0320 	orrmi.w	r3, r3, #32
 8003dd4:	6023      	strmi	r3, [r4, #0]
 8003dd6:	b91d      	cbnz	r5, 8003de0 <_printf_i+0x198>
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	f023 0320 	bic.w	r3, r3, #32
 8003dde:	6023      	str	r3, [r4, #0]
 8003de0:	2310      	movs	r3, #16
 8003de2:	e7af      	b.n	8003d44 <_printf_i+0xfc>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	f043 0320 	orr.w	r3, r3, #32
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	2378      	movs	r3, #120	; 0x78
 8003dee:	4828      	ldr	r0, [pc, #160]	; (8003e90 <_printf_i+0x248>)
 8003df0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003df4:	e7e3      	b.n	8003dbe <_printf_i+0x176>
 8003df6:	065e      	lsls	r6, r3, #25
 8003df8:	bf48      	it	mi
 8003dfa:	b2ad      	uxthmi	r5, r5
 8003dfc:	e7e6      	b.n	8003dcc <_printf_i+0x184>
 8003dfe:	4616      	mov	r6, r2
 8003e00:	e7bb      	b.n	8003d7a <_printf_i+0x132>
 8003e02:	680b      	ldr	r3, [r1, #0]
 8003e04:	6826      	ldr	r6, [r4, #0]
 8003e06:	1d1d      	adds	r5, r3, #4
 8003e08:	6960      	ldr	r0, [r4, #20]
 8003e0a:	600d      	str	r5, [r1, #0]
 8003e0c:	0635      	lsls	r5, r6, #24
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	d501      	bpl.n	8003e16 <_printf_i+0x1ce>
 8003e12:	6018      	str	r0, [r3, #0]
 8003e14:	e002      	b.n	8003e1c <_printf_i+0x1d4>
 8003e16:	0671      	lsls	r1, r6, #25
 8003e18:	d5fb      	bpl.n	8003e12 <_printf_i+0x1ca>
 8003e1a:	8018      	strh	r0, [r3, #0]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	4616      	mov	r6, r2
 8003e20:	6123      	str	r3, [r4, #16]
 8003e22:	e7ba      	b.n	8003d9a <_printf_i+0x152>
 8003e24:	680b      	ldr	r3, [r1, #0]
 8003e26:	1d1a      	adds	r2, r3, #4
 8003e28:	600a      	str	r2, [r1, #0]
 8003e2a:	681e      	ldr	r6, [r3, #0]
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4630      	mov	r0, r6
 8003e30:	6862      	ldr	r2, [r4, #4]
 8003e32:	f000 f82f 	bl	8003e94 <memchr>
 8003e36:	b108      	cbz	r0, 8003e3c <_printf_i+0x1f4>
 8003e38:	1b80      	subs	r0, r0, r6
 8003e3a:	6060      	str	r0, [r4, #4]
 8003e3c:	6863      	ldr	r3, [r4, #4]
 8003e3e:	6123      	str	r3, [r4, #16]
 8003e40:	2300      	movs	r3, #0
 8003e42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e46:	e7a8      	b.n	8003d9a <_printf_i+0x152>
 8003e48:	4632      	mov	r2, r6
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	4640      	mov	r0, r8
 8003e4e:	6923      	ldr	r3, [r4, #16]
 8003e50:	47d0      	blx	sl
 8003e52:	3001      	adds	r0, #1
 8003e54:	d0ab      	beq.n	8003dae <_printf_i+0x166>
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	079b      	lsls	r3, r3, #30
 8003e5a:	d413      	bmi.n	8003e84 <_printf_i+0x23c>
 8003e5c:	68e0      	ldr	r0, [r4, #12]
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	4298      	cmp	r0, r3
 8003e62:	bfb8      	it	lt
 8003e64:	4618      	movlt	r0, r3
 8003e66:	e7a4      	b.n	8003db2 <_printf_i+0x16a>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	4632      	mov	r2, r6
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	4640      	mov	r0, r8
 8003e70:	47d0      	blx	sl
 8003e72:	3001      	adds	r0, #1
 8003e74:	d09b      	beq.n	8003dae <_printf_i+0x166>
 8003e76:	3501      	adds	r5, #1
 8003e78:	68e3      	ldr	r3, [r4, #12]
 8003e7a:	9903      	ldr	r1, [sp, #12]
 8003e7c:	1a5b      	subs	r3, r3, r1
 8003e7e:	42ab      	cmp	r3, r5
 8003e80:	dcf2      	bgt.n	8003e68 <_printf_i+0x220>
 8003e82:	e7eb      	b.n	8003e5c <_printf_i+0x214>
 8003e84:	2500      	movs	r5, #0
 8003e86:	f104 0619 	add.w	r6, r4, #25
 8003e8a:	e7f5      	b.n	8003e78 <_printf_i+0x230>
 8003e8c:	08004153 	.word	0x08004153
 8003e90:	08004164 	.word	0x08004164

08003e94 <memchr>:
 8003e94:	4603      	mov	r3, r0
 8003e96:	b510      	push	{r4, lr}
 8003e98:	b2c9      	uxtb	r1, r1
 8003e9a:	4402      	add	r2, r0
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	d101      	bne.n	8003ea6 <memchr+0x12>
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	e003      	b.n	8003eae <memchr+0x1a>
 8003ea6:	7804      	ldrb	r4, [r0, #0]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	428c      	cmp	r4, r1
 8003eac:	d1f6      	bne.n	8003e9c <memchr+0x8>
 8003eae:	bd10      	pop	{r4, pc}

08003eb0 <memcpy>:
 8003eb0:	440a      	add	r2, r1
 8003eb2:	4291      	cmp	r1, r2
 8003eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003eb8:	d100      	bne.n	8003ebc <memcpy+0xc>
 8003eba:	4770      	bx	lr
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ec2:	4291      	cmp	r1, r2
 8003ec4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ec8:	d1f9      	bne.n	8003ebe <memcpy+0xe>
 8003eca:	bd10      	pop	{r4, pc}

08003ecc <memmove>:
 8003ecc:	4288      	cmp	r0, r1
 8003ece:	b510      	push	{r4, lr}
 8003ed0:	eb01 0402 	add.w	r4, r1, r2
 8003ed4:	d902      	bls.n	8003edc <memmove+0x10>
 8003ed6:	4284      	cmp	r4, r0
 8003ed8:	4623      	mov	r3, r4
 8003eda:	d807      	bhi.n	8003eec <memmove+0x20>
 8003edc:	1e43      	subs	r3, r0, #1
 8003ede:	42a1      	cmp	r1, r4
 8003ee0:	d008      	beq.n	8003ef4 <memmove+0x28>
 8003ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003eea:	e7f8      	b.n	8003ede <memmove+0x12>
 8003eec:	4601      	mov	r1, r0
 8003eee:	4402      	add	r2, r0
 8003ef0:	428a      	cmp	r2, r1
 8003ef2:	d100      	bne.n	8003ef6 <memmove+0x2a>
 8003ef4:	bd10      	pop	{r4, pc}
 8003ef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003efa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003efe:	e7f7      	b.n	8003ef0 <memmove+0x24>

08003f00 <_free_r>:
 8003f00:	b538      	push	{r3, r4, r5, lr}
 8003f02:	4605      	mov	r5, r0
 8003f04:	2900      	cmp	r1, #0
 8003f06:	d043      	beq.n	8003f90 <_free_r+0x90>
 8003f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f0c:	1f0c      	subs	r4, r1, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	bfb8      	it	lt
 8003f12:	18e4      	addlt	r4, r4, r3
 8003f14:	f000 f8d0 	bl	80040b8 <__malloc_lock>
 8003f18:	4a1e      	ldr	r2, [pc, #120]	; (8003f94 <_free_r+0x94>)
 8003f1a:	6813      	ldr	r3, [r2, #0]
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	b933      	cbnz	r3, 8003f2e <_free_r+0x2e>
 8003f20:	6063      	str	r3, [r4, #4]
 8003f22:	6014      	str	r4, [r2, #0]
 8003f24:	4628      	mov	r0, r5
 8003f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f2a:	f000 b8cb 	b.w	80040c4 <__malloc_unlock>
 8003f2e:	42a3      	cmp	r3, r4
 8003f30:	d90a      	bls.n	8003f48 <_free_r+0x48>
 8003f32:	6821      	ldr	r1, [r4, #0]
 8003f34:	1862      	adds	r2, r4, r1
 8003f36:	4293      	cmp	r3, r2
 8003f38:	bf01      	itttt	eq
 8003f3a:	681a      	ldreq	r2, [r3, #0]
 8003f3c:	685b      	ldreq	r3, [r3, #4]
 8003f3e:	1852      	addeq	r2, r2, r1
 8003f40:	6022      	streq	r2, [r4, #0]
 8003f42:	6063      	str	r3, [r4, #4]
 8003f44:	6004      	str	r4, [r0, #0]
 8003f46:	e7ed      	b.n	8003f24 <_free_r+0x24>
 8003f48:	461a      	mov	r2, r3
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	b10b      	cbz	r3, 8003f52 <_free_r+0x52>
 8003f4e:	42a3      	cmp	r3, r4
 8003f50:	d9fa      	bls.n	8003f48 <_free_r+0x48>
 8003f52:	6811      	ldr	r1, [r2, #0]
 8003f54:	1850      	adds	r0, r2, r1
 8003f56:	42a0      	cmp	r0, r4
 8003f58:	d10b      	bne.n	8003f72 <_free_r+0x72>
 8003f5a:	6820      	ldr	r0, [r4, #0]
 8003f5c:	4401      	add	r1, r0
 8003f5e:	1850      	adds	r0, r2, r1
 8003f60:	4283      	cmp	r3, r0
 8003f62:	6011      	str	r1, [r2, #0]
 8003f64:	d1de      	bne.n	8003f24 <_free_r+0x24>
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4401      	add	r1, r0
 8003f6c:	6011      	str	r1, [r2, #0]
 8003f6e:	6053      	str	r3, [r2, #4]
 8003f70:	e7d8      	b.n	8003f24 <_free_r+0x24>
 8003f72:	d902      	bls.n	8003f7a <_free_r+0x7a>
 8003f74:	230c      	movs	r3, #12
 8003f76:	602b      	str	r3, [r5, #0]
 8003f78:	e7d4      	b.n	8003f24 <_free_r+0x24>
 8003f7a:	6820      	ldr	r0, [r4, #0]
 8003f7c:	1821      	adds	r1, r4, r0
 8003f7e:	428b      	cmp	r3, r1
 8003f80:	bf01      	itttt	eq
 8003f82:	6819      	ldreq	r1, [r3, #0]
 8003f84:	685b      	ldreq	r3, [r3, #4]
 8003f86:	1809      	addeq	r1, r1, r0
 8003f88:	6021      	streq	r1, [r4, #0]
 8003f8a:	6063      	str	r3, [r4, #4]
 8003f8c:	6054      	str	r4, [r2, #4]
 8003f8e:	e7c9      	b.n	8003f24 <_free_r+0x24>
 8003f90:	bd38      	pop	{r3, r4, r5, pc}
 8003f92:	bf00      	nop
 8003f94:	20000158 	.word	0x20000158

08003f98 <_malloc_r>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	1ccd      	adds	r5, r1, #3
 8003f9c:	f025 0503 	bic.w	r5, r5, #3
 8003fa0:	3508      	adds	r5, #8
 8003fa2:	2d0c      	cmp	r5, #12
 8003fa4:	bf38      	it	cc
 8003fa6:	250c      	movcc	r5, #12
 8003fa8:	2d00      	cmp	r5, #0
 8003faa:	4606      	mov	r6, r0
 8003fac:	db01      	blt.n	8003fb2 <_malloc_r+0x1a>
 8003fae:	42a9      	cmp	r1, r5
 8003fb0:	d903      	bls.n	8003fba <_malloc_r+0x22>
 8003fb2:	230c      	movs	r3, #12
 8003fb4:	6033      	str	r3, [r6, #0]
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fba:	f000 f87d 	bl	80040b8 <__malloc_lock>
 8003fbe:	4921      	ldr	r1, [pc, #132]	; (8004044 <_malloc_r+0xac>)
 8003fc0:	680a      	ldr	r2, [r1, #0]
 8003fc2:	4614      	mov	r4, r2
 8003fc4:	b99c      	cbnz	r4, 8003fee <_malloc_r+0x56>
 8003fc6:	4f20      	ldr	r7, [pc, #128]	; (8004048 <_malloc_r+0xb0>)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	b923      	cbnz	r3, 8003fd6 <_malloc_r+0x3e>
 8003fcc:	4621      	mov	r1, r4
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f000 f862 	bl	8004098 <_sbrk_r>
 8003fd4:	6038      	str	r0, [r7, #0]
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f000 f85d 	bl	8004098 <_sbrk_r>
 8003fde:	1c43      	adds	r3, r0, #1
 8003fe0:	d123      	bne.n	800402a <_malloc_r+0x92>
 8003fe2:	230c      	movs	r3, #12
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	6033      	str	r3, [r6, #0]
 8003fe8:	f000 f86c 	bl	80040c4 <__malloc_unlock>
 8003fec:	e7e3      	b.n	8003fb6 <_malloc_r+0x1e>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	1b5b      	subs	r3, r3, r5
 8003ff2:	d417      	bmi.n	8004024 <_malloc_r+0x8c>
 8003ff4:	2b0b      	cmp	r3, #11
 8003ff6:	d903      	bls.n	8004000 <_malloc_r+0x68>
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	441c      	add	r4, r3
 8003ffc:	6025      	str	r5, [r4, #0]
 8003ffe:	e004      	b.n	800400a <_malloc_r+0x72>
 8004000:	6863      	ldr	r3, [r4, #4]
 8004002:	42a2      	cmp	r2, r4
 8004004:	bf0c      	ite	eq
 8004006:	600b      	streq	r3, [r1, #0]
 8004008:	6053      	strne	r3, [r2, #4]
 800400a:	4630      	mov	r0, r6
 800400c:	f000 f85a 	bl	80040c4 <__malloc_unlock>
 8004010:	f104 000b 	add.w	r0, r4, #11
 8004014:	1d23      	adds	r3, r4, #4
 8004016:	f020 0007 	bic.w	r0, r0, #7
 800401a:	1ac2      	subs	r2, r0, r3
 800401c:	d0cc      	beq.n	8003fb8 <_malloc_r+0x20>
 800401e:	1a1b      	subs	r3, r3, r0
 8004020:	50a3      	str	r3, [r4, r2]
 8004022:	e7c9      	b.n	8003fb8 <_malloc_r+0x20>
 8004024:	4622      	mov	r2, r4
 8004026:	6864      	ldr	r4, [r4, #4]
 8004028:	e7cc      	b.n	8003fc4 <_malloc_r+0x2c>
 800402a:	1cc4      	adds	r4, r0, #3
 800402c:	f024 0403 	bic.w	r4, r4, #3
 8004030:	42a0      	cmp	r0, r4
 8004032:	d0e3      	beq.n	8003ffc <_malloc_r+0x64>
 8004034:	1a21      	subs	r1, r4, r0
 8004036:	4630      	mov	r0, r6
 8004038:	f000 f82e 	bl	8004098 <_sbrk_r>
 800403c:	3001      	adds	r0, #1
 800403e:	d1dd      	bne.n	8003ffc <_malloc_r+0x64>
 8004040:	e7cf      	b.n	8003fe2 <_malloc_r+0x4a>
 8004042:	bf00      	nop
 8004044:	20000158 	.word	0x20000158
 8004048:	2000015c 	.word	0x2000015c

0800404c <_realloc_r>:
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	4607      	mov	r7, r0
 8004050:	4614      	mov	r4, r2
 8004052:	460e      	mov	r6, r1
 8004054:	b921      	cbnz	r1, 8004060 <_realloc_r+0x14>
 8004056:	4611      	mov	r1, r2
 8004058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800405c:	f7ff bf9c 	b.w	8003f98 <_malloc_r>
 8004060:	b922      	cbnz	r2, 800406c <_realloc_r+0x20>
 8004062:	f7ff ff4d 	bl	8003f00 <_free_r>
 8004066:	4625      	mov	r5, r4
 8004068:	4628      	mov	r0, r5
 800406a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800406c:	f000 f830 	bl	80040d0 <_malloc_usable_size_r>
 8004070:	42a0      	cmp	r0, r4
 8004072:	d20f      	bcs.n	8004094 <_realloc_r+0x48>
 8004074:	4621      	mov	r1, r4
 8004076:	4638      	mov	r0, r7
 8004078:	f7ff ff8e 	bl	8003f98 <_malloc_r>
 800407c:	4605      	mov	r5, r0
 800407e:	2800      	cmp	r0, #0
 8004080:	d0f2      	beq.n	8004068 <_realloc_r+0x1c>
 8004082:	4631      	mov	r1, r6
 8004084:	4622      	mov	r2, r4
 8004086:	f7ff ff13 	bl	8003eb0 <memcpy>
 800408a:	4631      	mov	r1, r6
 800408c:	4638      	mov	r0, r7
 800408e:	f7ff ff37 	bl	8003f00 <_free_r>
 8004092:	e7e9      	b.n	8004068 <_realloc_r+0x1c>
 8004094:	4635      	mov	r5, r6
 8004096:	e7e7      	b.n	8004068 <_realloc_r+0x1c>

08004098 <_sbrk_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	2300      	movs	r3, #0
 800409c:	4d05      	ldr	r5, [pc, #20]	; (80040b4 <_sbrk_r+0x1c>)
 800409e:	4604      	mov	r4, r0
 80040a0:	4608      	mov	r0, r1
 80040a2:	602b      	str	r3, [r5, #0]
 80040a4:	f7fc ff30 	bl	8000f08 <_sbrk>
 80040a8:	1c43      	adds	r3, r0, #1
 80040aa:	d102      	bne.n	80040b2 <_sbrk_r+0x1a>
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	b103      	cbz	r3, 80040b2 <_sbrk_r+0x1a>
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	bd38      	pop	{r3, r4, r5, pc}
 80040b4:	20000214 	.word	0x20000214

080040b8 <__malloc_lock>:
 80040b8:	4801      	ldr	r0, [pc, #4]	; (80040c0 <__malloc_lock+0x8>)
 80040ba:	f000 b811 	b.w	80040e0 <__retarget_lock_acquire_recursive>
 80040be:	bf00      	nop
 80040c0:	2000021c 	.word	0x2000021c

080040c4 <__malloc_unlock>:
 80040c4:	4801      	ldr	r0, [pc, #4]	; (80040cc <__malloc_unlock+0x8>)
 80040c6:	f000 b80c 	b.w	80040e2 <__retarget_lock_release_recursive>
 80040ca:	bf00      	nop
 80040cc:	2000021c 	.word	0x2000021c

080040d0 <_malloc_usable_size_r>:
 80040d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040d4:	1f18      	subs	r0, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bfbc      	itt	lt
 80040da:	580b      	ldrlt	r3, [r1, r0]
 80040dc:	18c0      	addlt	r0, r0, r3
 80040de:	4770      	bx	lr

080040e0 <__retarget_lock_acquire_recursive>:
 80040e0:	4770      	bx	lr

080040e2 <__retarget_lock_release_recursive>:
 80040e2:	4770      	bx	lr

080040e4 <_init>:
 80040e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e6:	bf00      	nop
 80040e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ea:	bc08      	pop	{r3}
 80040ec:	469e      	mov	lr, r3
 80040ee:	4770      	bx	lr

080040f0 <_fini>:
 80040f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f2:	bf00      	nop
 80040f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f6:	bc08      	pop	{r3}
 80040f8:	469e      	mov	lr, r3
 80040fa:	4770      	bx	lr
