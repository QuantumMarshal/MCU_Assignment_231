
MCU_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005308  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005604  08005604  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08005604  08005604  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005604  08005604  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005604  08005604  00015604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005608  08005608  00015608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800560c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  200000d8  080056e4  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  080056e4  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001605a  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d9e  00000000  00000000  0003615b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00038f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00039d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019901  00000000  00000000  0003aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012321  00000000  00000000  00054311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bcf0  00000000  00000000  00066632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2322  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf8  00000000  00000000  000f2378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d8 	.word	0x200000d8
 8000128:	00000000 	.word	0x00000000
 800012c:	080053fc 	.word	0x080053fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000dc 	.word	0x200000dc
 8000148:	080053fc 	.word	0x080053fc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_UART_RxCpltCallback>:
#include "UART.h"

uint8_t temp = 0;
char str[40];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a08      	ldr	r2, [pc, #32]	; (800018c <HAL_UART_RxCpltCallback+0x30>)
 800016a:	4293      	cmp	r3, r2
 800016c:	d10a      	bne.n	8000184 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 800016e:	2332      	movs	r3, #50	; 0x32
 8000170:	2201      	movs	r2, #1
 8000172:	4907      	ldr	r1, [pc, #28]	; (8000190 <HAL_UART_RxCpltCallback+0x34>)
 8000174:	4807      	ldr	r0, [pc, #28]	; (8000194 <HAL_UART_RxCpltCallback+0x38>)
 8000176:	f003 fead 	bl	8003ed4 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 800017a:	2201      	movs	r2, #1
 800017c:	4904      	ldr	r1, [pc, #16]	; (8000190 <HAL_UART_RxCpltCallback+0x34>)
 800017e:	4805      	ldr	r0, [pc, #20]	; (8000194 <HAL_UART_RxCpltCallback+0x38>)
 8000180:	f003 ff2b 	bl	8003fda <HAL_UART_Receive_IT>
	}
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	40004400 	.word	0x40004400
 8000190:	200000f4 	.word	0x200000f4
 8000194:	2000052c 	.word	0x2000052c

08000198 <uart_led>:

void uart_led(int num1, int num2){
 8000198:	b580      	push	{r7, lr}
 800019a:	b09c      	sub	sp, #112	; 0x70
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
	char str[100];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str,"!Road1=%d; Road2=%d#\r\n", num1, num2), 100);
 80001a2:	f107 000c 	add.w	r0, r7, #12
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	687a      	ldr	r2, [r7, #4]
 80001aa:	4907      	ldr	r1, [pc, #28]	; (80001c8 <uart_led+0x30>)
 80001ac:	f004 fcec 	bl	8004b88 <siprintf>
 80001b0:	4603      	mov	r3, r0
 80001b2:	b29a      	uxth	r2, r3
 80001b4:	f107 010c 	add.w	r1, r7, #12
 80001b8:	2364      	movs	r3, #100	; 0x64
 80001ba:	4804      	ldr	r0, [pc, #16]	; (80001cc <uart_led+0x34>)
 80001bc:	f003 fe8a 	bl	8003ed4 <HAL_UART_Transmit>
}
 80001c0:	bf00      	nop
 80001c2:	3770      	adds	r7, #112	; 0x70
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	08005414 	.word	0x08005414
 80001cc:	2000052c 	.word	0x2000052c

080001d0 <print_string>:

void print_string(const char *str){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 80001d8:	6878      	ldr	r0, [r7, #4]
 80001da:	f7ff ffb7 	bl	800014c <strlen>
 80001de:	4603      	mov	r3, r0
 80001e0:	b29a      	uxth	r2, r3
 80001e2:	2364      	movs	r3, #100	; 0x64
 80001e4:	6879      	ldr	r1, [r7, #4]
 80001e6:	4803      	ldr	r0, [pc, #12]	; (80001f4 <print_string+0x24>)
 80001e8:	f003 fe74 	bl	8003ed4 <HAL_UART_Transmit>
}
 80001ec:	bf00      	nop
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	2000052c 	.word	0x2000052c

080001f8 <print_value>:

void print_value(int num1, int num2){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b09c      	sub	sp, #112	; 0x70
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
	char str[100];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str,"!Old value=%d; New value=%d#\r\n", num1, num2), 100);
 8000202:	f107 000c 	add.w	r0, r7, #12
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	687a      	ldr	r2, [r7, #4]
 800020a:	4907      	ldr	r1, [pc, #28]	; (8000228 <print_value+0x30>)
 800020c:	f004 fcbc 	bl	8004b88 <siprintf>
 8000210:	4603      	mov	r3, r0
 8000212:	b29a      	uxth	r2, r3
 8000214:	f107 010c 	add.w	r1, r7, #12
 8000218:	2364      	movs	r3, #100	; 0x64
 800021a:	4804      	ldr	r0, [pc, #16]	; (800022c <print_value+0x34>)
 800021c:	f003 fe5a 	bl	8003ed4 <HAL_UART_Transmit>
}
 8000220:	bf00      	nop
 8000222:	3770      	adds	r7, #112	; 0x70
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	0800542c 	.word	0x0800542c
 800022c:	2000052c 	.word	0x2000052c

08000230 <isButtonPressed>:
int KeyReg3[NUM_BUTTON] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int TimeOutForKeyPress[NUM_BUTTON] =  {200, 200, 200, 200};
int button_flag[NUM_BUTTON] = {0, 0, 0, 0};

int isButtonPressed(int num){
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	if(button_flag[num] == 1){
 8000238:	4a09      	ldr	r2, [pc, #36]	; (8000260 <isButtonPressed+0x30>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d106      	bne.n	8000252 <isButtonPressed+0x22>
		button_flag[num] = 0;
 8000244:	4a06      	ldr	r2, [pc, #24]	; (8000260 <isButtonPressed+0x30>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2100      	movs	r1, #0
 800024a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800024e:	2301      	movs	r3, #1
 8000250:	e000      	b.n	8000254 <isButtonPressed+0x24>
	}
	return 0;
 8000252:	2300      	movs	r3, #0
}
 8000254:	4618      	mov	r0, r3
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	200000f8 	.word	0x200000f8

08000264 <subKeyProcess>:

void subKeyProcess(int num){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[num]=1;
 800026c:	4a04      	ldr	r2, [pc, #16]	; (8000280 <subKeyProcess+0x1c>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2101      	movs	r1, #1
 8000272:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	200000f8 	.word	0x200000f8

08000284 <getKeyInput>:

void getKeyInput(){
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
	for (int i=0; i < NUM_BUTTON; i++){
 800028a:	2300      	movs	r3, #0
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	e0a6      	b.n	80003de <getKeyInput+0x15a>
		KeyReg2[i] = KeyReg1[i];
 8000290:	4a57      	ldr	r2, [pc, #348]	; (80003f0 <getKeyInput+0x16c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000298:	4956      	ldr	r1, [pc, #344]	; (80003f4 <getKeyInput+0x170>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80002a0:	4a55      	ldr	r2, [pc, #340]	; (80003f8 <getKeyInput+0x174>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002a8:	4951      	ldr	r1, [pc, #324]	; (80003f0 <getKeyInput+0x16c>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d846      	bhi.n	8000344 <getKeyInput+0xc0>
 80002b6:	a201      	add	r2, pc, #4	; (adr r2, 80002bc <getKeyInput+0x38>)
 80002b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002bc:	080002cd 	.word	0x080002cd
 80002c0:	080002eb 	.word	0x080002eb
 80002c4:	08000309 	.word	0x08000309
 80002c8:	08000327 	.word	0x08000327
		//Add your button here
		switch (i){
		case 0:
			KeyReg0[i] = HAL_GPIO_ReadPin(PED_BTN_GPIO_Port, pin[i]);
 80002cc:	4a4b      	ldr	r2, [pc, #300]	; (80003fc <getKeyInput+0x178>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002d4:	4619      	mov	r1, r3
 80002d6:	484a      	ldr	r0, [pc, #296]	; (8000400 <getKeyInput+0x17c>)
 80002d8:	f002 f9f0 	bl	80026bc <HAL_GPIO_ReadPin>
 80002dc:	4603      	mov	r3, r0
 80002de:	4619      	mov	r1, r3
 80002e0:	4a45      	ldr	r2, [pc, #276]	; (80003f8 <getKeyInput+0x174>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002e8:	e02d      	b.n	8000346 <getKeyInput+0xc2>
		case 1:
			KeyReg0[i] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, pin[i]);
 80002ea:	4a44      	ldr	r2, [pc, #272]	; (80003fc <getKeyInput+0x178>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002f2:	4619      	mov	r1, r3
 80002f4:	4842      	ldr	r0, [pc, #264]	; (8000400 <getKeyInput+0x17c>)
 80002f6:	f002 f9e1 	bl	80026bc <HAL_GPIO_ReadPin>
 80002fa:	4603      	mov	r3, r0
 80002fc:	4619      	mov	r1, r3
 80002fe:	4a3e      	ldr	r2, [pc, #248]	; (80003f8 <getKeyInput+0x174>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000306:	e01e      	b.n	8000346 <getKeyInput+0xc2>
		case 2:
			KeyReg0[i] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, pin[i]);
 8000308:	4a3c      	ldr	r2, [pc, #240]	; (80003fc <getKeyInput+0x178>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000310:	4619      	mov	r1, r3
 8000312:	483b      	ldr	r0, [pc, #236]	; (8000400 <getKeyInput+0x17c>)
 8000314:	f002 f9d2 	bl	80026bc <HAL_GPIO_ReadPin>
 8000318:	4603      	mov	r3, r0
 800031a:	4619      	mov	r1, r3
 800031c:	4a36      	ldr	r2, [pc, #216]	; (80003f8 <getKeyInput+0x174>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000324:	e00f      	b.n	8000346 <getKeyInput+0xc2>
		case 3:
			KeyReg0[i] = HAL_GPIO_ReadPin(BTN3_GPIO_Port, pin[i]);
 8000326:	4a35      	ldr	r2, [pc, #212]	; (80003fc <getKeyInput+0x178>)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800032e:	4619      	mov	r1, r3
 8000330:	4834      	ldr	r0, [pc, #208]	; (8000404 <getKeyInput+0x180>)
 8000332:	f002 f9c3 	bl	80026bc <HAL_GPIO_ReadPin>
 8000336:	4603      	mov	r3, r0
 8000338:	4619      	mov	r1, r3
 800033a:	4a2f      	ldr	r2, [pc, #188]	; (80003f8 <getKeyInput+0x174>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000342:	e000      	b.n	8000346 <getKeyInput+0xc2>
		default:
			break;
 8000344:	bf00      	nop
		}


		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000346:	4a2a      	ldr	r2, [pc, #168]	; (80003f0 <getKeyInput+0x16c>)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034e:	492a      	ldr	r1, [pc, #168]	; (80003f8 <getKeyInput+0x174>)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000356:	429a      	cmp	r2, r3
 8000358:	d13e      	bne.n	80003d8 <getKeyInput+0x154>
 800035a:	4a25      	ldr	r2, [pc, #148]	; (80003f0 <getKeyInput+0x16c>)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000362:	4924      	ldr	r1, [pc, #144]	; (80003f4 <getKeyInput+0x170>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800036a:	429a      	cmp	r2, r3
 800036c:	d134      	bne.n	80003d8 <getKeyInput+0x154>
			if (KeyReg2[i] != KeyReg3[i]){
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <getKeyInput+0x170>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000376:	4924      	ldr	r1, [pc, #144]	; (8000408 <getKeyInput+0x184>)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800037e:	429a      	cmp	r2, r3
 8000380:	d016      	beq.n	80003b0 <getKeyInput+0x12c>
				KeyReg3[i] = KeyReg2[i];
 8000382:	4a1c      	ldr	r2, [pc, #112]	; (80003f4 <getKeyInput+0x170>)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800038a:	491f      	ldr	r1, [pc, #124]	; (8000408 <getKeyInput+0x184>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 8000392:	4a1d      	ldr	r2, [pc, #116]	; (8000408 <getKeyInput+0x184>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d11c      	bne.n	80003d8 <getKeyInput+0x154>
					TimeOutForKeyPress[i] = 200;
 800039e:	4a1b      	ldr	r2, [pc, #108]	; (800040c <getKeyInput+0x188>)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	21c8      	movs	r1, #200	; 0xc8
 80003a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f7ff ff5b 	bl	8000264 <subKeyProcess>
 80003ae:	e013      	b.n	80003d8 <getKeyInput+0x154>
				}
			}

			else{ //press without release
				TimeOutForKeyPress[i]--;
 80003b0:	4a16      	ldr	r2, [pc, #88]	; (800040c <getKeyInput+0x188>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b8:	1e5a      	subs	r2, r3, #1
 80003ba:	4914      	ldr	r1, [pc, #80]	; (800040c <getKeyInput+0x188>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 80003c2:	4a12      	ldr	r2, [pc, #72]	; (800040c <getKeyInput+0x188>)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d104      	bne.n	80003d8 <getKeyInput+0x154>
					KeyReg3[i] = NORMAL_STATE;
 80003ce:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <getKeyInput+0x184>)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2101      	movs	r1, #1
 80003d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i < NUM_BUTTON; i++){
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	3301      	adds	r3, #1
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	f77f af55 	ble.w	8000290 <getKeyInput+0xc>
				}

			}
		}
	}
}
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000018 	.word	0x20000018
 80003f4:	20000028 	.word	0x20000028
 80003f8:	20000008 	.word	0x20000008
 80003fc:	20000000 	.word	0x20000000
 8000400:	40010800 	.word	0x40010800
 8000404:	40010c00 	.word	0x40010c00
 8000408:	20000038 	.word	0x20000038
 800040c:	20000048 	.word	0x20000048

08000410 <startBuzzer>:
#include "buzzer.h"

extern TIM_HandleTypeDef htim3;

int res = 0;
void startBuzzer(){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8000414:	4b16      	ldr	r3, [pc, #88]	; (8000470 <startBuzzer+0x60>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d126      	bne.n	800046a <startBuzzer+0x5a>
		print_string("Buzzer");
 800041c:	4815      	ldr	r0, [pc, #84]	; (8000474 <startBuzzer+0x64>)
 800041e:	f7ff fed7 	bl	80001d0 <print_string>
//		double temp = (1-(double)timerRoad1/redTime)*100;
//
//		int res = (int)round(temp);
		if (res >= 100){
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <startBuzzer+0x68>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2b63      	cmp	r3, #99	; 0x63
 8000428:	dd03      	ble.n	8000432 <startBuzzer+0x22>
			res = 0;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <startBuzzer+0x68>)
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	e004      	b.n	800043c <startBuzzer+0x2c>
		}
		else {
			res += 20;
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <startBuzzer+0x68>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	3314      	adds	r3, #20
 8000438:	4a0f      	ldr	r2, [pc, #60]	; (8000478 <startBuzzer+0x68>)
 800043a:	6013      	str	r3, [r2, #0]
		}

		if (ped_sig) {
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <startBuzzer+0x6c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d005      	beq.n	8000450 <startBuzzer+0x40>
			__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,res);
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <startBuzzer+0x68>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <startBuzzer+0x70>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	635a      	str	r2, [r3, #52]	; 0x34
 800044e:	e003      	b.n	8000458 <startBuzzer+0x48>
		}
		else {
			__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <startBuzzer+0x70>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2200      	movs	r2, #0
 8000456:	635a      	str	r2, [r3, #52]	; 0x34
		}
		ped_sig = 1 - ped_sig;
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <startBuzzer+0x6c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f1c3 0301 	rsb	r3, r3, #1
 8000460:	4a06      	ldr	r2, [pc, #24]	; (800047c <startBuzzer+0x6c>)
 8000462:	6013      	str	r3, [r2, #0]

//		double temp1 = ((double)timerRoad1/redTime)*100;
//
//		int timeBuz = (int)round(temp1);

		setTimer3(10);
 8000464:	200a      	movs	r0, #10
 8000466:	f000 fe71 	bl	800114c <setTimer3>
	}
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000468 	.word	0x20000468
 8000474:	0800545c 	.word	0x0800545c
 8000478:	20000108 	.word	0x20000108
 800047c:	20000120 	.word	0x20000120
 8000480:	2000049c 	.word	0x2000049c

08000484 <offbuzzer>:

void offbuzzer(){
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <offbuzzer+0x14>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2200      	movs	r2, #0
 800048e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	2000049c 	.word	0x2000049c

0800049c <offAllLed>:

#include "led_control.h"

int toggle_sig = 0;
// TURN OFF LED
void offAllLed(){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TF_LED_1_GPIO_Port, TF_LED_1_Pin, RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a6:	4810      	ldr	r0, [pc, #64]	; (80004e8 <offAllLed+0x4c>)
 80004a8:	f002 f91f 	bl	80026ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_2_GPIO_Port, TF_LED_2_Pin, RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2108      	movs	r1, #8
 80004b0:	480e      	ldr	r0, [pc, #56]	; (80004ec <offAllLed+0x50>)
 80004b2:	f002 f91a 	bl	80026ea <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TF_LED_3_GPIO_Port, TF_LED_3_Pin, RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2120      	movs	r1, #32
 80004ba:	480c      	ldr	r0, [pc, #48]	; (80004ec <offAllLed+0x50>)
 80004bc:	f002 f915 	bl	80026ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_4_GPIO_Port, TF_LED_4_Pin, RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2110      	movs	r1, #16
 80004c4:	4809      	ldr	r0, [pc, #36]	; (80004ec <offAllLed+0x50>)
 80004c6:	f002 f910 	bl	80026ea <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PED_LED_1_GPIO_Port, PED_LED_1_Pin, RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d0:	4806      	ldr	r0, [pc, #24]	; (80004ec <offAllLed+0x50>)
 80004d2:	f002 f90a 	bl	80026ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LED_2_GPIO_Port, PED_LED_2_Pin, RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <offAllLed+0x4c>)
 80004de:	f002 f904 	bl	80026ea <HAL_GPIO_WritePin>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40010800 	.word	0x40010800
 80004ec:	40010c00 	.word	0x40010c00

080004f0 <offPEDLed>:

	HAL_GPIO_WritePin(TF_LED_3_GPIO_Port, TF_LED_3_Pin, RESET);
	HAL_GPIO_WritePin(TF_LED_4_GPIO_Port, TF_LED_4_Pin, RESET);
}

void offPEDLed(){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_LED_1_GPIO_Port, PED_LED_1_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <offPEDLed+0x20>)
 80004fc:	f002 f8f5 	bl	80026ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LED_2_GPIO_Port, PED_LED_2_Pin, RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000506:	4803      	ldr	r0, [pc, #12]	; (8000514 <offPEDLed+0x24>)
 8000508:	f002 f8ef 	bl	80026ea <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40010c00 	.word	0x40010c00
 8000514:	40010800 	.word	0x40010800

08000518 <onTFRed1>:

// TURN ON TRAFFIC LIGHT 1
void onTFRed1() {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TF_LED_1_GPIO_Port, TF_LED_1_Pin, SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <onTFRed1+0x20>)
 8000524:	f002 f8e1 	bl	80026ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_2_GPIO_Port, TF_LED_2_Pin, RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2108      	movs	r1, #8
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <onTFRed1+0x24>)
 800052e:	f002 f8dc 	bl	80026ea <HAL_GPIO_WritePin>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40010800 	.word	0x40010800
 800053c:	40010c00 	.word	0x40010c00

08000540 <onTFGreen1>:
void onTFGreen1(){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TF_LED_1_GPIO_Port, TF_LED_1_Pin, RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <onTFGreen1+0x20>)
 800054c:	f002 f8cd 	bl	80026ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_2_GPIO_Port, TF_LED_2_Pin, SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2108      	movs	r1, #8
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <onTFGreen1+0x24>)
 8000556:	f002 f8c8 	bl	80026ea <HAL_GPIO_WritePin>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40010800 	.word	0x40010800
 8000564:	40010c00 	.word	0x40010c00

08000568 <onTFYellow1>:
void onTFYellow1(){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TF_LED_1_GPIO_Port, TF_LED_1_Pin, SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <onTFYellow1+0x20>)
 8000574:	f002 f8b9 	bl	80026ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_2_GPIO_Port, TF_LED_2_Pin, SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2108      	movs	r1, #8
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <onTFYellow1+0x24>)
 800057e:	f002 f8b4 	bl	80026ea <HAL_GPIO_WritePin>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40010800 	.word	0x40010800
 800058c:	40010c00 	.word	0x40010c00

08000590 <onTFRed2>:

// TURN ON TRAFFIC LIGHT 2
void onTFRed2(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TF_LED_3_GPIO_Port, TF_LED_3_Pin, SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2120      	movs	r1, #32
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <onTFRed2+0x1c>)
 800059a:	f002 f8a6 	bl	80026ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_4_GPIO_Port, TF_LED_4_Pin, RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2110      	movs	r1, #16
 80005a2:	4802      	ldr	r0, [pc, #8]	; (80005ac <onTFRed2+0x1c>)
 80005a4:	f002 f8a1 	bl	80026ea <HAL_GPIO_WritePin>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40010c00 	.word	0x40010c00

080005b0 <onTFGreen2>:
void onTFGreen2(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TF_LED_3_GPIO_Port, TF_LED_3_Pin, RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2120      	movs	r1, #32
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <onTFGreen2+0x1c>)
 80005ba:	f002 f896 	bl	80026ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_4_GPIO_Port, TF_LED_4_Pin, SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2110      	movs	r1, #16
 80005c2:	4802      	ldr	r0, [pc, #8]	; (80005cc <onTFGreen2+0x1c>)
 80005c4:	f002 f891 	bl	80026ea <HAL_GPIO_WritePin>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40010c00 	.word	0x40010c00

080005d0 <onTFYellow2>:
void onTFYellow2(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TF_LED_3_GPIO_Port, TF_LED_3_Pin, SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2120      	movs	r1, #32
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <onTFYellow2+0x1c>)
 80005da:	f002 f886 	bl	80026ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TF_LED_4_GPIO_Port, TF_LED_4_Pin, SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	2110      	movs	r1, #16
 80005e2:	4802      	ldr	r0, [pc, #8]	; (80005ec <onTFYellow2+0x1c>)
 80005e4:	f002 f881 	bl	80026ea <HAL_GPIO_WritePin>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40010c00 	.word	0x40010c00

080005f0 <onPEDRed>:

// TURN ON PEDESTRIAN LIGHT
void onPEDRed(){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_LED_1_GPIO_Port, PED_LED_1_Pin, SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <onPEDRed+0x20>)
 80005fc:	f002 f875 	bl	80026ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LED_2_GPIO_Port, PED_LED_2_Pin, RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <onPEDRed+0x24>)
 8000608:	f002 f86f 	bl	80026ea <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40010c00 	.word	0x40010c00
 8000614:	40010800 	.word	0x40010800

08000618 <onPEDGreen>:
void onPEDGreen(){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_LED_1_GPIO_Port, PED_LED_1_Pin, RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <onPEDGreen+0x20>)
 8000624:	f002 f861 	bl	80026ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_LED_2_GPIO_Port, PED_LED_2_Pin, SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062e:	4803      	ldr	r0, [pc, #12]	; (800063c <onPEDGreen+0x24>)
 8000630:	f002 f85b 	bl	80026ea <HAL_GPIO_WritePin>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40010c00 	.word	0x40010c00
 800063c:	40010800 	.word	0x40010800

08000640 <toggleGreen>:

void toggleGreen(){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PED_LED_2_GPIO_Port, PED_LED_2_Pin);
 8000644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <toggleGreen+0x14>)
 800064a:	f002 f866 	bl	800271a <HAL_GPIO_TogglePin>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40010800 	.word	0x40010800

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 fc88 	bl	8001f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f83c 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f968 	bl	8000938 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000668:	f000 f87a 	bl	8000760 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800066c:	f000 f93a 	bl	80008e4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000670:	f000 f8c2 	bl	80007f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000674:	4811      	ldr	r0, [pc, #68]	; (80006bc <main+0x64>)
 8000676:	f002 fcc7 	bl	8003008 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800067a:	2100      	movs	r1, #0
 800067c:	4810      	ldr	r0, [pc, #64]	; (80006c0 <main+0x68>)
 800067e:	f002 fd6d 	bl	800315c <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	490f      	ldr	r1, [pc, #60]	; (80006c4 <main+0x6c>)
 8000686:	4810      	ldr	r0, [pc, #64]	; (80006c8 <main+0x70>)
 8000688:	f003 fca7 	bl	8003fda <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(timerRun, 0, 1);
 800068c:	2201      	movs	r2, #1
 800068e:	2100      	movs	r1, #0
 8000690:	480e      	ldr	r0, [pc, #56]	; (80006cc <main+0x74>)
 8000692:	f000 faa9 	bl	8000be8 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 1);
 8000696:	2201      	movs	r2, #1
 8000698:	2100      	movs	r1, #0
 800069a:	480d      	ldr	r0, [pc, #52]	; (80006d0 <main+0x78>)
 800069c:	f000 faa4 	bl	8000be8 <SCH_Add_Task>
  SCH_Add_Task(fsm_traffic_light, 0, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2100      	movs	r1, #0
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <main+0x7c>)
 80006a6:	f000 fa9f 	bl	8000be8 <SCH_Add_Task>
  SCH_Add_Task(fsm_ped, 0, 1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2100      	movs	r1, #0
 80006ae:	480a      	ldr	r0, [pc, #40]	; (80006d8 <main+0x80>)
 80006b0:	f000 fa9a 	bl	8000be8 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Task();
 80006b4:	f000 fce2 	bl	800107c <SCH_Dispatch_Task>
 80006b8:	e7fc      	b.n	80006b4 <main+0x5c>
 80006ba:	bf00      	nop
 80006bc:	200004e4 	.word	0x200004e4
 80006c0:	2000049c 	.word	0x2000049c
 80006c4:	200000f4 	.word	0x200000f4
 80006c8:	2000052c 	.word	0x2000052c
 80006cc:	080011c5 	.word	0x080011c5
 80006d0:	08000285 	.word	0x08000285
 80006d4:	080015d9 	.word	0x080015d9
 80006d8:	08000a35 	.word	0x08000a35

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b090      	sub	sp, #64	; 0x40
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0318 	add.w	r3, r7, #24
 80006e6:	2228      	movs	r2, #40	; 0x28
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 fa44 	bl	8004b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fe:	2302      	movs	r3, #2
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000702:	2301      	movs	r3, #1
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000706:	2310      	movs	r3, #16
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800070e:	2300      	movs	r3, #0
 8000710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000712:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0318 	add.w	r3, r7, #24
 800071c:	4618      	mov	r0, r3
 800071e:	f002 f815 	bl	800274c <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000728:	f000 f97e 	bl	8000a28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000738:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2102      	movs	r1, #2
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fa80 	bl	8002c4c <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000752:	f000 f969 	bl	8000a28 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3740      	adds	r7, #64	; 0x40
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800077c:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_TIM2_Init+0x94>)
 800077e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000782:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_TIM2_Init+0x94>)
 8000786:	f240 32e7 	movw	r2, #999	; 0x3e7
 800078a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_TIM2_Init+0x94>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_TIM2_Init+0x94>)
 8000794:	223f      	movs	r2, #63	; 0x3f
 8000796:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_TIM2_Init+0x94>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_TIM2_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a4:	4813      	ldr	r0, [pc, #76]	; (80007f4 <MX_TIM2_Init+0x94>)
 80007a6:	f002 fbdf 	bl	8002f68 <HAL_TIM_Base_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007b0:	f000 f93a 	bl	8000a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4619      	mov	r1, r3
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <MX_TIM2_Init+0x94>)
 80007c2:	f002 ff37 	bl	8003634 <HAL_TIM_ConfigClockSource>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007cc:	f000 f92c 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_TIM2_Init+0x94>)
 80007de:	f003 fab9 	bl	8003d54 <HAL_TIMEx_MasterConfigSynchronization>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007e8:	f000 f91e 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200004e4 	.word	0x200004e4

080007f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	; 0x38
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000828:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <MX_TIM3_Init+0xe4>)
 800082a:	4a2d      	ldr	r2, [pc, #180]	; (80008e0 <MX_TIM3_Init+0xe8>)
 800082c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_TIM3_Init+0xe4>)
 8000830:	223f      	movs	r2, #63	; 0x3f
 8000832:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b29      	ldr	r3, [pc, #164]	; (80008dc <MX_TIM3_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_TIM3_Init+0xe4>)
 800083c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000840:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_TIM3_Init+0xe4>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000848:	4b24      	ldr	r3, [pc, #144]	; (80008dc <MX_TIM3_Init+0xe4>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800084e:	4823      	ldr	r0, [pc, #140]	; (80008dc <MX_TIM3_Init+0xe4>)
 8000850:	f002 fb8a 	bl	8002f68 <HAL_TIM_Base_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800085a:	f000 f8e5 	bl	8000a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000864:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000868:	4619      	mov	r1, r3
 800086a:	481c      	ldr	r0, [pc, #112]	; (80008dc <MX_TIM3_Init+0xe4>)
 800086c:	f002 fee2 	bl	8003634 <HAL_TIM_ConfigClockSource>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000876:	f000 f8d7 	bl	8000a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800087a:	4818      	ldr	r0, [pc, #96]	; (80008dc <MX_TIM3_Init+0xe4>)
 800087c:	f002 fc16 	bl	80030ac <HAL_TIM_PWM_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000886:	f000 f8cf 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000892:	f107 0320 	add.w	r3, r7, #32
 8000896:	4619      	mov	r1, r3
 8000898:	4810      	ldr	r0, [pc, #64]	; (80008dc <MX_TIM3_Init+0xe4>)
 800089a:	f003 fa5b 	bl	8003d54 <HAL_TIMEx_MasterConfigSynchronization>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80008a4:	f000 f8c0 	bl	8000a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a8:	2360      	movs	r3, #96	; 0x60
 80008aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	4619      	mov	r1, r3
 80008be:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_TIM3_Init+0xe4>)
 80008c0:	f002 fdf6 	bl	80034b0 <HAL_TIM_PWM_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80008ca:	f000 f8ad 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008ce:	4803      	ldr	r0, [pc, #12]	; (80008dc <MX_TIM3_Init+0xe4>)
 80008d0:	f000 fd7c 	bl	80013cc <HAL_TIM_MspPostInit>

}
 80008d4:	bf00      	nop
 80008d6:	3738      	adds	r7, #56	; 0x38
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000049c 	.word	0x2000049c
 80008e0:	40000400 	.word	0x40000400

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <MX_USART2_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 800091c:	f003 fa8a 	bl	8003e34 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000926:	f000 f87f 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000052c 	.word	0x2000052c
 8000934:	40004400 	.word	0x40004400

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <MX_GPIO_Init+0xd0>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a2d      	ldr	r2, [pc, #180]	; (8000a08 <MX_GPIO_Init+0xd0>)
 8000952:	f043 0304 	orr.w	r3, r3, #4
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b2b      	ldr	r3, [pc, #172]	; (8000a08 <MX_GPIO_Init+0xd0>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0304 	and.w	r3, r3, #4
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <MX_GPIO_Init+0xd0>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a27      	ldr	r2, [pc, #156]	; (8000a08 <MX_GPIO_Init+0xd0>)
 800096a:	f043 0308 	orr.w	r3, r3, #8
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <MX_GPIO_Init+0xd0>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0308 	and.w	r3, r3, #8
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PED_LED_1_Pin|TF_LED_2_Pin|TF_LED_4_Pin|TF_LED_3_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000982:	4822      	ldr	r0, [pc, #136]	; (8000a0c <MX_GPIO_Init+0xd4>)
 8000984:	f001 feb1 	bl	80026ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PED_LED_2_Pin|TF_LED_1_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800098e:	4820      	ldr	r0, [pc, #128]	; (8000a10 <MX_GPIO_Init+0xd8>)
 8000990:	f001 feab 	bl	80026ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PED_BTN_Pin BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = PED_BTN_Pin|BTN1_Pin|BTN2_Pin;
 8000994:	2313      	movs	r3, #19
 8000996:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099c:	2301      	movs	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	4619      	mov	r1, r3
 80009a6:	481a      	ldr	r0, [pc, #104]	; (8000a10 <MX_GPIO_Init+0xd8>)
 80009a8:	f001 fd04 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN3_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin;
 80009ac:	2301      	movs	r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BTN3_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	4619      	mov	r1, r3
 80009be:	4813      	ldr	r0, [pc, #76]	; (8000a0c <MX_GPIO_Init+0xd4>)
 80009c0:	f001 fcf8 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_LED_1_Pin TF_LED_2_Pin TF_LED_4_Pin TF_LED_3_Pin */
  GPIO_InitStruct.Pin = PED_LED_1_Pin|TF_LED_2_Pin|TF_LED_4_Pin|TF_LED_3_Pin;
 80009c4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80009c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2302      	movs	r3, #2
 80009d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	4619      	mov	r1, r3
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <MX_GPIO_Init+0xd4>)
 80009de:	f001 fce9 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_LED_2_Pin TF_LED_1_Pin */
  GPIO_InitStruct.Pin = PED_LED_2_Pin|TF_LED_1_Pin;
 80009e2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80009e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2302      	movs	r3, #2
 80009f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4619      	mov	r1, r3
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_GPIO_Init+0xd8>)
 80009fc:	f001 fcda 	bl	80023b4 <HAL_GPIO_Init>

}
 8000a00:	bf00      	nop
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010c00 	.word	0x40010c00
 8000a10:	40010800 	.word	0x40010800

08000a14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000a1c:	f000 f8bc 	bl	8000b98 <SCH_Update>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <fsm_ped>:
 */

#include "ped_fsm.h"
int TIME_OUT_FOR_PEDESTRIAN = 1000;

void fsm_ped(){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	switch (ped_status){
 8000a38:	4b51      	ldr	r3, [pc, #324]	; (8000b80 <fsm_ped+0x14c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b04      	cmp	r3, #4
 8000a3e:	f200 8091 	bhi.w	8000b64 <fsm_ped+0x130>
 8000a42:	a201      	add	r2, pc, #4	; (adr r2, 8000a48 <fsm_ped+0x14>)
 8000a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a48:	08000a5d 	.word	0x08000a5d
 8000a4c:	08000a87 	.word	0x08000a87
 8000a50:	08000abb 	.word	0x08000abb
 8000a54:	08000af5 	.word	0x08000af5
 8000a58:	08000b29 	.word	0x08000b29
	case INIT:
		offPEDLed();
 8000a5c:	f7ff fd48 	bl	80004f0 <offPEDLed>
		if (isButtonPressed(0) == 1){
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff fbe5 	bl	8000230 <isButtonPressed>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d17f      	bne.n	8000b6c <fsm_ped+0x138>
			ped_flag = 1;
 8000a6c:	4b45      	ldr	r3, [pc, #276]	; (8000b84 <fsm_ped+0x150>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	601a      	str	r2, [r3, #0]
			ped_status = led_status;
 8000a72:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <fsm_ped+0x154>)
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	4b42      	ldr	r3, [pc, #264]	; (8000b80 <fsm_ped+0x14c>)
 8000a78:	701a      	strb	r2, [r3, #0]
			setTimer4(TIME_OUT_FOR_PEDESTRIAN);
 8000a7a:	4b44      	ldr	r3, [pc, #272]	; (8000b8c <fsm_ped+0x158>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 fb78 	bl	8001174 <setTimer4>
		}
		break;
 8000a84:	e072      	b.n	8000b6c <fsm_ped+0x138>

	case REDGREEN:
		onPEDRed();
 8000a86:	f7ff fdb3 	bl	80005f0 <onPEDRed>
		offbuzzer();
 8000a8a:	f7ff fcfb 	bl	8000484 <offbuzzer>

		if (timer4_flag == 1){
 8000a8e:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <fsm_ped+0x15c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d16c      	bne.n	8000b70 <fsm_ped+0x13c>
			ped_status = INIT;
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <fsm_ped+0x14c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
			ped_flag = 0;
 8000a9c:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <fsm_ped+0x150>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 fb66 	bl	8001174 <setTimer4>
			setTimer5(0);
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f000 fb77 	bl	800119c <setTimer5>
			setTimer3(0);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 fb4c 	bl	800114c <setTimer3>
			offbuzzer();
 8000ab4:	f7ff fce6 	bl	8000484 <offbuzzer>
		}

		break;
 8000ab8:	e05a      	b.n	8000b70 <fsm_ped+0x13c>

	case REDYELLOW:
		onPEDRed();
 8000aba:	f7ff fd99 	bl	80005f0 <onPEDRed>
		offbuzzer();
 8000abe:	f7ff fce1 	bl	8000484 <offbuzzer>

		if (timer4_flag == 1){
 8000ac2:	4b33      	ldr	r3, [pc, #204]	; (8000b90 <fsm_ped+0x15c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d110      	bne.n	8000aec <fsm_ped+0xb8>
			ped_status = INIT;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <fsm_ped+0x14c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
			ped_flag = 0;
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <fsm_ped+0x150>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 fb4c 	bl	8001174 <setTimer4>
			setTimer5(0);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 fb5d 	bl	800119c <setTimer5>
			setTimer3(0);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 fb32 	bl	800114c <setTimer3>
			offbuzzer();
 8000ae8:	f7ff fccc 	bl	8000484 <offbuzzer>
		}
		setTimer3(1);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f000 fb2d 	bl	800114c <setTimer3>

		break;
 8000af2:	e042      	b.n	8000b7a <fsm_ped+0x146>

	case GREENRED:
		onPEDGreen();
 8000af4:	f7ff fd90 	bl	8000618 <onPEDGreen>
		startBuzzer();
 8000af8:	f7ff fc8a 	bl	8000410 <startBuzzer>
		if (timer4_flag == 1){
 8000afc:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <fsm_ped+0x15c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d137      	bne.n	8000b74 <fsm_ped+0x140>
			ped_status = INIT;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <fsm_ped+0x14c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
			ped_flag = 0;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <fsm_ped+0x150>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000b10:	2000      	movs	r0, #0
 8000b12:	f000 fb2f 	bl	8001174 <setTimer4>
			setTimer5(0);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 fb40 	bl	800119c <setTimer5>
			setTimer3(0);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f000 fb15 	bl	800114c <setTimer3>
			offbuzzer();
 8000b22:	f7ff fcaf 	bl	8000484 <offbuzzer>
		}

		break;
 8000b26:	e025      	b.n	8000b74 <fsm_ped+0x140>

	case YELLOWRED:
		if (timer5_flag == 1){
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <fsm_ped+0x160>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d104      	bne.n	8000b3a <fsm_ped+0x106>
			toggleGreen();
 8000b30:	f7ff fd86 	bl	8000640 <toggleGreen>
			setTimer5(25);
 8000b34:	2019      	movs	r0, #25
 8000b36:	f000 fb31 	bl	800119c <setTimer5>
		}
		startBuzzer();
 8000b3a:	f7ff fc69 	bl	8000410 <startBuzzer>

		if (timer4_flag == 1){
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <fsm_ped+0x15c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d118      	bne.n	8000b78 <fsm_ped+0x144>
			ped_status = INIT;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <fsm_ped+0x14c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
			ped_flag = 0;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <fsm_ped+0x150>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 fb0e 	bl	8001174 <setTimer4>
			setTimer5(0);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 fb1f 	bl	800119c <setTimer5>
			offbuzzer();
 8000b5e:	f7ff fc91 	bl	8000484 <offbuzzer>
		}

		break;
 8000b62:	e009      	b.n	8000b78 <fsm_ped+0x144>

	default:
		ped_status = INIT;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <fsm_ped+0x14c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
		break;
 8000b6a:	e006      	b.n	8000b7a <fsm_ped+0x146>
		break;
 8000b6c:	bf00      	nop
 8000b6e:	e004      	b.n	8000b7a <fsm_ped+0x146>
		break;
 8000b70:	bf00      	nop
 8000b72:	e002      	b.n	8000b7a <fsm_ped+0x146>
		break;
 8000b74:	bf00      	nop
 8000b76:	e000      	b.n	8000b7a <fsm_ped+0x146>
		break;
 8000b78:	bf00      	nop
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000010e 	.word	0x2000010e
 8000b84:	2000011c 	.word	0x2000011c
 8000b88:	2000010c 	.word	0x2000010c
 8000b8c:	20000064 	.word	0x20000064
 8000b90:	20000470 	.word	0x20000470
 8000b94:	20000478 	.word	0x20000478

08000b98 <SCH_Update>:
static uint32_t count_SCH_Update = 0;


static uint32_t Get_New_Task_ID(void);

void SCH_Update(void){
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	count_SCH_Update ++;
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <SCH_Update+0x48>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <SCH_Update+0x48>)
 8000ba4:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <SCH_Update+0x4c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d013      	beq.n	8000bd6 <SCH_Update+0x3e>
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <SCH_Update+0x4c>)
 8000bb0:	7b1b      	ldrb	r3, [r3, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10f      	bne.n	8000bd6 <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <SCH_Update+0x4c>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d004      	beq.n	8000bc8 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <SCH_Update+0x4c>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <SCH_Update+0x4c>)
 8000bc6:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <SCH_Update+0x4c>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SCH_Update+0x4c>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000450 	.word	0x20000450
 8000be4:	2000012c 	.word	0x2000012c

08000be8 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]

	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8000c00:	2300      	movs	r3, #0
 8000c02:	77fb      	strb	r3, [r7, #31]
 8000c04:	e133      	b.n	8000e6e <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 8000c06:	7ffa      	ldrb	r2, [r7, #31]
 8000c08:	49a1      	ldr	r1, [pc, #644]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	3304      	adds	r3, #4
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
		if(sumDelay > DELAY){
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	f240 80c1 	bls.w	8000daa <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 8000c28:	7ffa      	ldrb	r2, [r7, #31]
 8000c2a:	4999      	ldr	r1, [pc, #612]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	440b      	add	r3, r1
 8000c36:	3304      	adds	r3, #4
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	4413      	add	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 8000c44:	7ffa      	ldrb	r2, [r7, #31]
 8000c46:	69b9      	ldr	r1, [r7, #24]
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	1ac9      	subs	r1, r1, r3
 8000c4c:	4890      	ldr	r0, [pc, #576]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000c4e:	4613      	mov	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4403      	add	r3, r0
 8000c58:	3304      	adds	r3, #4
 8000c5a:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8000c5c:	2327      	movs	r3, #39	; 0x27
 8000c5e:	75fb      	strb	r3, [r7, #23]
 8000c60:	e04c      	b.n	8000cfc <SCH_Add_Task+0x114>
//				if(SCH_tasks_G[i - 1].pTask != 0)
				{
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	1e59      	subs	r1, r3, #1
 8000c66:	7dfa      	ldrb	r2, [r7, #23]
 8000c68:	4889      	ldr	r0, [pc, #548]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	440b      	add	r3, r1
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4403      	add	r3, r0
 8000c74:	6819      	ldr	r1, [r3, #0]
 8000c76:	4886      	ldr	r0, [pc, #536]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000c78:	4613      	mov	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	4413      	add	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4403      	add	r3, r0
 8000c82:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 8000c84:	7dfb      	ldrb	r3, [r7, #23]
 8000c86:	1e59      	subs	r1, r3, #1
 8000c88:	7dfa      	ldrb	r2, [r7, #23]
 8000c8a:	4881      	ldr	r0, [pc, #516]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	440b      	add	r3, r1
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4403      	add	r3, r0
 8000c96:	3308      	adds	r3, #8
 8000c98:	6819      	ldr	r1, [r3, #0]
 8000c9a:	487d      	ldr	r0, [pc, #500]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4403      	add	r3, r0
 8000ca6:	3308      	adds	r3, #8
 8000ca8:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8000caa:	7dfb      	ldrb	r3, [r7, #23]
 8000cac:	1e59      	subs	r1, r3, #1
 8000cae:	7dfa      	ldrb	r2, [r7, #23]
 8000cb0:	4877      	ldr	r0, [pc, #476]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4403      	add	r3, r0
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	6819      	ldr	r1, [r3, #0]
 8000cc0:	4873      	ldr	r0, [pc, #460]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4403      	add	r3, r0
 8000ccc:	3304      	adds	r3, #4
 8000cce:	6019      	str	r1, [r3, #0]
//					SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
					SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	1e59      	subs	r1, r3, #1
 8000cd4:	7dfa      	ldrb	r2, [r7, #23]
 8000cd6:	486e      	ldr	r0, [pc, #440]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000cd8:	460b      	mov	r3, r1
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	440b      	add	r3, r1
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4403      	add	r3, r0
 8000ce2:	3310      	adds	r3, #16
 8000ce4:	6819      	ldr	r1, [r3, #0]
 8000ce6:	486a      	ldr	r0, [pc, #424]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4403      	add	r3, r0
 8000cf2:	3310      	adds	r3, #16
 8000cf4:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	75fb      	strb	r3, [r7, #23]
 8000cfc:	7dfa      	ldrb	r2, [r7, #23]
 8000cfe:	7ffb      	ldrb	r3, [r7, #31]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8ae      	bhi.n	8000c62 <SCH_Add_Task+0x7a>
				}
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8000d04:	7ffa      	ldrb	r2, [r7, #31]
 8000d06:	4962      	ldr	r1, [pc, #392]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 8000d16:	7ffa      	ldrb	r2, [r7, #31]
 8000d18:	495d      	ldr	r1, [pc, #372]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	440b      	add	r3, r1
 8000d24:	3304      	adds	r3, #4
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8000d2a:	7ffa      	ldrb	r2, [r7, #31]
 8000d2c:	4958      	ldr	r1, [pc, #352]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	440b      	add	r3, r1
 8000d38:	3308      	adds	r3, #8
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	601a      	str	r2, [r3, #0]
			if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8000d3e:	7ffa      	ldrb	r2, [r7, #31]
 8000d40:	4953      	ldr	r1, [pc, #332]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10a      	bne.n	8000d6a <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 8000d54:	7ffa      	ldrb	r2, [r7, #31]
 8000d56:	494e      	ldr	r1, [pc, #312]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	330c      	adds	r3, #12
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	e009      	b.n	8000d7e <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 8000d6a:	7ffa      	ldrb	r2, [r7, #31]
 8000d6c:	4948      	ldr	r1, [pc, #288]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	440b      	add	r3, r1
 8000d78:	330c      	adds	r3, #12
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8000d7e:	7ffc      	ldrb	r4, [r7, #31]
 8000d80:	f000 f9a4 	bl	80010cc <Get_New_Task_ID>
 8000d84:	4602      	mov	r2, r0
 8000d86:	4942      	ldr	r1, [pc, #264]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000d88:	4623      	mov	r3, r4
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4423      	add	r3, r4
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	440b      	add	r3, r1
 8000d92:	3310      	adds	r3, #16
 8000d94:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 8000d96:	7ffa      	ldrb	r2, [r7, #31]
 8000d98:	493d      	ldr	r1, [pc, #244]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	440b      	add	r3, r1
 8000da4:	3310      	adds	r3, #16
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	e06e      	b.n	8000e88 <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 8000daa:	7ffa      	ldrb	r2, [r7, #31]
 8000dac:	4938      	ldr	r1, [pc, #224]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	440b      	add	r3, r1
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d154      	bne.n	8000e68 <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8000dbe:	7ffa      	ldrb	r2, [r7, #31]
 8000dc0:	4933      	ldr	r1, [pc, #204]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	440b      	add	r3, r1
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 8000dd0:	7ffa      	ldrb	r2, [r7, #31]
 8000dd2:	68b9      	ldr	r1, [r7, #8]
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	1ac9      	subs	r1, r1, r3
 8000dd8:	482d      	ldr	r0, [pc, #180]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4403      	add	r3, r0
 8000de4:	3304      	adds	r3, #4
 8000de6:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8000de8:	7ffa      	ldrb	r2, [r7, #31]
 8000dea:	4929      	ldr	r1, [pc, #164]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	440b      	add	r3, r1
 8000df6:	3308      	adds	r3, #8
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8000dfc:	7ffa      	ldrb	r2, [r7, #31]
 8000dfe:	4924      	ldr	r1, [pc, #144]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	440b      	add	r3, r1
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10a      	bne.n	8000e28 <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 8000e12:	7ffa      	ldrb	r2, [r7, #31]
 8000e14:	491e      	ldr	r1, [pc, #120]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	440b      	add	r3, r1
 8000e20:	330c      	adds	r3, #12
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	e009      	b.n	8000e3c <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 8000e28:	7ffa      	ldrb	r2, [r7, #31]
 8000e2a:	4919      	ldr	r1, [pc, #100]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	440b      	add	r3, r1
 8000e36:	330c      	adds	r3, #12
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8000e3c:	7ffc      	ldrb	r4, [r7, #31]
 8000e3e:	f000 f945 	bl	80010cc <Get_New_Task_ID>
 8000e42:	4602      	mov	r2, r0
 8000e44:	4912      	ldr	r1, [pc, #72]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000e46:	4623      	mov	r3, r4
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4423      	add	r3, r4
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	440b      	add	r3, r1
 8000e50:	3310      	adds	r3, #16
 8000e52:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 8000e54:	7ffa      	ldrb	r2, [r7, #31]
 8000e56:	490e      	ldr	r1, [pc, #56]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000e58:	4613      	mov	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	3310      	adds	r3, #16
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	e00f      	b.n	8000e88 <SCH_Add_Task+0x2a0>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8000e68:	7ffb      	ldrb	r3, [r7, #31]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	77fb      	strb	r3, [r7, #31]
 8000e6e:	7ffb      	ldrb	r3, [r7, #31]
 8000e70:	2b27      	cmp	r3, #39	; 0x27
 8000e72:	f67f aec8 	bls.w	8000c06 <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 8000e76:	7ffa      	ldrb	r2, [r7, #31]
 8000e78:	4905      	ldr	r1, [pc, #20]	; (8000e90 <SCH_Add_Task+0x2a8>)
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	3310      	adds	r3, #16
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3724      	adds	r7, #36	; 0x24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd90      	pop	{r4, r7, pc}
 8000e90:	2000012c 	.word	0x2000012c

08000e94 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 80e2 	beq.w	800106c <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	e0da      	b.n	8001064 <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 8000eae:	7bfa      	ldrb	r2, [r7, #15]
 8000eb0:	4971      	ldr	r1, [pc, #452]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	440b      	add	r3, r1
 8000ebc:	3310      	adds	r3, #16
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	f040 80cb 	bne.w	800105e <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d02b      	beq.n	8000f2a <SCH_Delete_Task+0x96>
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	2b26      	cmp	r3, #38	; 0x26
 8000ed6:	d828      	bhi.n	8000f2a <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	4966      	ldr	r1, [pc, #408]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d01d      	beq.n	8000f2a <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4961      	ldr	r1, [pc, #388]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	3304      	adds	r3, #4
 8000f00:	6819      	ldr	r1, [r3, #0]
 8000f02:	7bfa      	ldrb	r2, [r7, #15]
 8000f04:	485c      	ldr	r0, [pc, #368]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4403      	add	r3, r0
 8000f10:	3304      	adds	r3, #4
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	3201      	adds	r2, #1
 8000f18:	4419      	add	r1, r3
 8000f1a:	4857      	ldr	r0, [pc, #348]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4403      	add	r3, r0
 8000f26:	3304      	adds	r3, #4
 8000f28:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	73bb      	strb	r3, [r7, #14]
 8000f2e:	e060      	b.n	8000ff2 <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 8000f30:	7bbb      	ldrb	r3, [r7, #14]
 8000f32:	1c59      	adds	r1, r3, #1
 8000f34:	7bba      	ldrb	r2, [r7, #14]
 8000f36:	4850      	ldr	r0, [pc, #320]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000f38:	460b      	mov	r3, r1
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4403      	add	r3, r0
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	484c      	ldr	r0, [pc, #304]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4403      	add	r3, r0
 8000f50:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	1c59      	adds	r1, r3, #1
 8000f56:	7bba      	ldrb	r2, [r7, #14]
 8000f58:	4847      	ldr	r0, [pc, #284]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	440b      	add	r3, r1
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4403      	add	r3, r0
 8000f64:	3308      	adds	r3, #8
 8000f66:	6819      	ldr	r1, [r3, #0]
 8000f68:	4843      	ldr	r0, [pc, #268]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4403      	add	r3, r0
 8000f74:	3308      	adds	r3, #8
 8000f76:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 8000f78:	7bbb      	ldrb	r3, [r7, #14]
 8000f7a:	1c59      	adds	r1, r3, #1
 8000f7c:	7bba      	ldrb	r2, [r7, #14]
 8000f7e:	483e      	ldr	r0, [pc, #248]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000f80:	460b      	mov	r3, r1
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4403      	add	r3, r0
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	6819      	ldr	r1, [r3, #0]
 8000f8e:	483a      	ldr	r0, [pc, #232]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4403      	add	r3, r0
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	1c59      	adds	r1, r3, #1
 8000fa2:	7bba      	ldrb	r2, [r7, #14]
 8000fa4:	4834      	ldr	r0, [pc, #208]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4403      	add	r3, r0
 8000fb0:	330c      	adds	r3, #12
 8000fb2:	7818      	ldrb	r0, [r3, #0]
 8000fb4:	4930      	ldr	r1, [pc, #192]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	330c      	adds	r3, #12
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	1c59      	adds	r1, r3, #1
 8000fca:	7bba      	ldrb	r2, [r7, #14]
 8000fcc:	482a      	ldr	r0, [pc, #168]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000fce:	460b      	mov	r3, r1
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4403      	add	r3, r0
 8000fd8:	3310      	adds	r3, #16
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	4826      	ldr	r0, [pc, #152]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4403      	add	r3, r0
 8000fe8:	3310      	adds	r3, #16
 8000fea:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8000fec:	7bbb      	ldrb	r3, [r7, #14]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	73bb      	strb	r3, [r7, #14]
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	2b26      	cmp	r3, #38	; 0x26
 8000ff6:	d99b      	bls.n	8000f30 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 8000ff8:	7bba      	ldrb	r2, [r7, #14]
 8000ffa:	491f      	ldr	r1, [pc, #124]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 800100a:	7bba      	ldrb	r2, [r7, #14]
 800100c:	491a      	ldr	r1, [pc, #104]	; (8001078 <SCH_Delete_Task+0x1e4>)
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	3308      	adds	r3, #8
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 800101e:	7bba      	ldrb	r2, [r7, #14]
 8001020:	4915      	ldr	r1, [pc, #84]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	3304      	adds	r3, #4
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 8001032:	7bba      	ldrb	r2, [r7, #14]
 8001034:	4910      	ldr	r1, [pc, #64]	; (8001078 <SCH_Delete_Task+0x1e4>)
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	330c      	adds	r3, #12
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	490b      	ldr	r1, [pc, #44]	; (8001078 <SCH_Delete_Task+0x1e4>)
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	3310      	adds	r3, #16
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
				return Return_code;
 800105a:	7b7b      	ldrb	r3, [r7, #13]
 800105c:	e007      	b.n	800106e <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	3301      	adds	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	2b27      	cmp	r3, #39	; 0x27
 8001068:	f67f af21 	bls.w	8000eae <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 800106c:	7b7b      	ldrb	r3, [r7, #13]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	2000012c 	.word	0x2000012c

0800107c <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void){
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <SCH_Dispatch_Task+0x4c>)
 8001084:	7b1b      	ldrb	r3, [r3, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d019      	beq.n	80010be <SCH_Dispatch_Task+0x42>
		(*SCH_tasks_G[0].pTask)(); // Run the task
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <SCH_Dispatch_Task+0x4c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset / reduce RunMe flag
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <SCH_Dispatch_Task+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <SCH_Dispatch_Task+0x4c>)
 8001098:	1d3c      	adds	r4, r7, #4
 800109a:	461d      	mov	r5, r3
 800109c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a0:	682b      	ldr	r3, [r5, #0]
 80010a2:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fef4 	bl	8000e94 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d005      	beq.n	80010be <SCH_Dispatch_Task+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68f9      	ldr	r1, [r7, #12]
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fd95 	bl	8000be8 <SCH_Add_Task>
		}
	}
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bdb0      	pop	{r4, r5, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000012c 	.word	0x2000012c

080010cc <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID(void){
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
	newTaskID++;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <Get_New_Task_ID+0x2c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <Get_New_Task_ID+0x2c>)
 80010d8:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <Get_New_Task_ID+0x2c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d104      	bne.n	80010ec <Get_New_Task_ID+0x20>
		newTaskID++;
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <Get_New_Task_ID+0x2c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	4a03      	ldr	r2, [pc, #12]	; (80010f8 <Get_New_Task_ID+0x2c>)
 80010ea:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 80010ec:	4b02      	ldr	r3, [pc, #8]	; (80010f8 <Get_New_Task_ID+0x2c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	2000044c 	.word	0x2000044c

080010fc <setTimer1>:

int timer7_counter=0;
int timer7_flag=0;


void setTimer1(int duration){
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8001104:	4a05      	ldr	r2, [pc, #20]	; (800111c <setTimer1+0x20>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <setTimer1+0x24>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000454 	.word	0x20000454
 8001120:	20000458 	.word	0x20000458

08001124 <setTimer2>:

void setTimer2(int duration){
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 800112c:	4a05      	ldr	r2, [pc, #20]	; (8001144 <setTimer2+0x20>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <setTimer2+0x24>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000045c 	.word	0x2000045c
 8001148:	20000460 	.word	0x20000460

0800114c <setTimer3>:

void setTimer3(int duration){
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 8001154:	4a05      	ldr	r2, [pc, #20]	; (800116c <setTimer3+0x20>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <setTimer3+0x24>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000464 	.word	0x20000464
 8001170:	20000468 	.word	0x20000468

08001174 <setTimer4>:

void setTimer4(int duration){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 800117c:	4a05      	ldr	r2, [pc, #20]	; (8001194 <setTimer4+0x20>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <setTimer4+0x24>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000046c 	.word	0x2000046c
 8001198:	20000470 	.word	0x20000470

0800119c <setTimer5>:

void setTimer5(int duration){
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	timer5_counter=duration;
 80011a4:	4a05      	ldr	r2, [pc, #20]	; (80011bc <setTimer5+0x20>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <setTimer5+0x24>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000474 	.word	0x20000474
 80011c0:	20000478 	.word	0x20000478

080011c4 <timerRun>:
void setTimer7(int duration){
	timer7_counter=duration;
	timer7_flag=0;
}

void timerRun(){
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 80011c8:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <timerRun+0xec>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	dd0b      	ble.n	80011e8 <timerRun+0x24>
		timer1_counter--;
 80011d0:	4b37      	ldr	r3, [pc, #220]	; (80012b0 <timerRun+0xec>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	4a36      	ldr	r2, [pc, #216]	; (80012b0 <timerRun+0xec>)
 80011d8:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 80011da:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <timerRun+0xec>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	dc02      	bgt.n	80011e8 <timerRun+0x24>
			timer1_flag=1;
 80011e2:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <timerRun+0xf0>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 80011e8:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <timerRun+0xf4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	dd0b      	ble.n	8001208 <timerRun+0x44>
		timer2_counter--;
 80011f0:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <timerRun+0xf4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	4a30      	ldr	r2, [pc, #192]	; (80012b8 <timerRun+0xf4>)
 80011f8:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 80011fa:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <timerRun+0xf4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dc02      	bgt.n	8001208 <timerRun+0x44>
			timer2_flag=1;
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <timerRun+0xf8>)
 8001204:	2201      	movs	r2, #1
 8001206:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0){
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <timerRun+0xfc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	dd0b      	ble.n	8001228 <timerRun+0x64>
		timer3_counter--;
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <timerRun+0xfc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	4a2a      	ldr	r2, [pc, #168]	; (80012c0 <timerRun+0xfc>)
 8001218:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <timerRun+0xfc>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	dc02      	bgt.n	8001228 <timerRun+0x64>
			timer3_flag=1;
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <timerRun+0x100>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0){
 8001228:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <timerRun+0x104>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	dd0b      	ble.n	8001248 <timerRun+0x84>
		timer4_counter--;
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <timerRun+0x104>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3b01      	subs	r3, #1
 8001236:	4a24      	ldr	r2, [pc, #144]	; (80012c8 <timerRun+0x104>)
 8001238:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0){
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <timerRun+0x104>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	dc02      	bgt.n	8001248 <timerRun+0x84>
			timer4_flag=1;
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <timerRun+0x108>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0){
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <timerRun+0x10c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	dd0b      	ble.n	8001268 <timerRun+0xa4>
		timer5_counter--;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <timerRun+0x10c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3b01      	subs	r3, #1
 8001256:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <timerRun+0x10c>)
 8001258:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0){
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <timerRun+0x10c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	dc02      	bgt.n	8001268 <timerRun+0xa4>
			timer5_flag=1;
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <timerRun+0x110>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer6_counter > 0){
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <timerRun+0x114>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	dd0b      	ble.n	8001288 <timerRun+0xc4>
		timer6_counter--;
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <timerRun+0x114>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3b01      	subs	r3, #1
 8001276:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <timerRun+0x114>)
 8001278:	6013      	str	r3, [r2, #0]
		if (timer6_counter <= 0){
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <timerRun+0x114>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	dc02      	bgt.n	8001288 <timerRun+0xc4>
			timer6_flag=1;
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <timerRun+0x118>)
 8001284:	2201      	movs	r2, #1
 8001286:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer7_counter > 0){
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <timerRun+0x11c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	dd0b      	ble.n	80012a8 <timerRun+0xe4>
		timer7_counter--;
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <timerRun+0x11c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3b01      	subs	r3, #1
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <timerRun+0x11c>)
 8001298:	6013      	str	r3, [r2, #0]
		if (timer7_counter <= 0){
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <timerRun+0x11c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	dc02      	bgt.n	80012a8 <timerRun+0xe4>
			timer7_flag=1;
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <timerRun+0x120>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	20000454 	.word	0x20000454
 80012b4:	20000458 	.word	0x20000458
 80012b8:	2000045c 	.word	0x2000045c
 80012bc:	20000460 	.word	0x20000460
 80012c0:	20000464 	.word	0x20000464
 80012c4:	20000468 	.word	0x20000468
 80012c8:	2000046c 	.word	0x2000046c
 80012cc:	20000470 	.word	0x20000470
 80012d0:	20000474 	.word	0x20000474
 80012d4:	20000478 	.word	0x20000478
 80012d8:	2000047c 	.word	0x2000047c
 80012dc:	20000480 	.word	0x20000480
 80012e0:	20000484 	.word	0x20000484
 80012e4:	20000488 	.word	0x20000488

080012e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_MspInit+0x5c>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	4a14      	ldr	r2, [pc, #80]	; (8001344 <HAL_MspInit+0x5c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6193      	str	r3, [r2, #24]
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_MspInit+0x5c>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_MspInit+0x5c>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_MspInit+0x5c>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	61d3      	str	r3, [r2, #28]
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_MspInit+0x5c>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_MspInit+0x60>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_MspInit+0x60>)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000
 8001348:	40010000 	.word	0x40010000

0800134c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135c:	d114      	bne.n	8001388 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800135e:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_TIM_Base_MspInit+0x78>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a18      	ldr	r2, [pc, #96]	; (80013c4 <HAL_TIM_Base_MspInit+0x78>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_TIM_Base_MspInit+0x78>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	201c      	movs	r0, #28
 800137c:	f000 ff31 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001380:	201c      	movs	r0, #28
 8001382:	f000 ff4a 	bl	800221a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001386:	e018      	b.n	80013ba <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_TIM_Base_MspInit+0x7c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d113      	bne.n	80013ba <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_TIM_Base_MspInit+0x78>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <HAL_TIM_Base_MspInit+0x78>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	61d3      	str	r3, [r2, #28]
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_TIM_Base_MspInit+0x78>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	201d      	movs	r0, #29
 80013b0:	f000 ff17 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013b4:	201d      	movs	r0, #29
 80013b6:	f000 ff30 	bl	800221a <HAL_NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40000400 	.word	0x40000400

080013cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <HAL_TIM_MspPostInit+0x58>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d117      	bne.n	800141c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_TIM_MspPostInit+0x5c>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <HAL_TIM_MspPostInit+0x5c>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_TIM_MspPostInit+0x5c>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001404:	2340      	movs	r3, #64	; 0x40
 8001406:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2302      	movs	r3, #2
 800140e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4619      	mov	r1, r3
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <HAL_TIM_MspPostInit+0x60>)
 8001418:	f000 ffcc 	bl	80023b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40000400 	.word	0x40000400
 8001428:	40021000 	.word	0x40021000
 800142c:	40010800 	.word	0x40010800

08001430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <HAL_UART_MspInit+0x98>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d137      	bne.n	80014c0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <HAL_UART_MspInit+0x9c>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <HAL_UART_MspInit+0x9c>)
 8001456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145a:	61d3      	str	r3, [r2, #28]
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_UART_MspInit+0x9c>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_UART_MspInit+0x9c>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a17      	ldr	r2, [pc, #92]	; (80014cc <HAL_UART_MspInit+0x9c>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_UART_MspInit+0x9c>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001480:	2304      	movs	r3, #4
 8001482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	4619      	mov	r1, r3
 8001492:	480f      	ldr	r0, [pc, #60]	; (80014d0 <HAL_UART_MspInit+0xa0>)
 8001494:	f000 ff8e 	bl	80023b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001498:	2308      	movs	r3, #8
 800149a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4619      	mov	r1, r3
 80014aa:	4809      	ldr	r0, [pc, #36]	; (80014d0 <HAL_UART_MspInit+0xa0>)
 80014ac:	f000 ff82 	bl	80023b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	2026      	movs	r0, #38	; 0x26
 80014b6:	f000 fe94 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014ba:	2026      	movs	r0, #38	; 0x26
 80014bc:	f000 fead 	bl	800221a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014c0:	bf00      	nop
 80014c2:	3720      	adds	r7, #32
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40004400 	.word	0x40004400
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40010800 	.word	0x40010800

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <NMI_Handler+0x4>

080014da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler+0x4>

080014e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151a:	f000 fd6f 	bl	8001ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <TIM2_IRQHandler+0x10>)
 800152a:	f001 feb9 	bl	80032a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200004e4 	.word	0x200004e4

08001538 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <TIM3_IRQHandler+0x10>)
 800153e:	f001 feaf 	bl	80032a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000049c 	.word	0x2000049c

0800154c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <USART2_IRQHandler+0x10>)
 8001552:	f002 fd67 	bl	8004024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000052c 	.word	0x2000052c

08001560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001568:	4a14      	ldr	r2, [pc, #80]	; (80015bc <_sbrk+0x5c>)
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <_sbrk+0x60>)
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <_sbrk+0x64>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <_sbrk+0x68>)
 8001580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	429a      	cmp	r2, r3
 800158e:	d207      	bcs.n	80015a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001590:	f003 fac8 	bl	8004b24 <__errno>
 8001594:	4603      	mov	r3, r0
 8001596:	220c      	movs	r2, #12
 8001598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	e009      	b.n	80015b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <_sbrk+0x64>)
 80015b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20005000 	.word	0x20005000
 80015c0:	00000400 	.word	0x00000400
 80015c4:	2000048c 	.word	0x2000048c
 80015c8:	20000588 	.word	0x20000588

080015cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <fsm_traffic_light>:
 */


#include "traffic_light_fsm.h"

void fsm_traffic_light(){
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	switch (led_status){
 80015dc:	4b7b      	ldr	r3, [pc, #492]	; (80017cc <fsm_traffic_light+0x1f4>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b0b      	cmp	r3, #11
 80015e2:	f200 8470 	bhi.w	8001ec6 <fsm_traffic_light+0x8ee>
 80015e6:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <fsm_traffic_light+0x14>)
 80015e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ec:	0800161d 	.word	0x0800161d
 80015f0:	0800165d 	.word	0x0800165d
 80015f4:	0800170d 	.word	0x0800170d
 80015f8:	08001809 	.word	0x08001809
 80015fc:	080018bf 	.word	0x080018bf
 8001600:	0800197f 	.word	0x0800197f
 8001604:	08001a0d 	.word	0x08001a0d
 8001608:	08001ae1 	.word	0x08001ae1
 800160c:	08001b6f 	.word	0x08001b6f
 8001610:	08001bfd 	.word	0x08001bfd
 8001614:	08001c93 	.word	0x08001c93
 8001618:	08001d2d 	.word	0x08001d2d
	case INIT:
		offAllLed();
 800161c:	f7fe ff3e 	bl	800049c <offAllLed>

		led_status = REDGREEN;
 8001620:	4b6a      	ldr	r3, [pc, #424]	; (80017cc <fsm_traffic_light+0x1f4>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
		setTimer1(greenTime*100);
 8001626:	4b6a      	ldr	r3, [pc, #424]	; (80017d0 <fsm_traffic_light+0x1f8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2264      	movs	r2, #100	; 0x64
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fd63 	bl	80010fc <setTimer1>
		setTimer2(100);
 8001636:	2064      	movs	r0, #100	; 0x64
 8001638:	f7ff fd74 	bl	8001124 <setTimer2>
		setTimer3(1);
 800163c:	2001      	movs	r0, #1
 800163e:	f7ff fd85 	bl	800114c <setTimer3>

		timerRoad1 = redTime;
 8001642:	4b64      	ldr	r3, [pc, #400]	; (80017d4 <fsm_traffic_light+0x1fc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a64      	ldr	r2, [pc, #400]	; (80017d8 <fsm_traffic_light+0x200>)
 8001648:	6013      	str	r3, [r2, #0]
		timerRoad2 = greenTime;
 800164a:	4b61      	ldr	r3, [pc, #388]	; (80017d0 <fsm_traffic_light+0x1f8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a63      	ldr	r2, [pc, #396]	; (80017dc <fsm_traffic_light+0x204>)
 8001650:	6013      	str	r3, [r2, #0]
		print_string("AUTOMATION MODE\r\n");
 8001652:	4863      	ldr	r0, [pc, #396]	; (80017e0 <fsm_traffic_light+0x208>)
 8001654:	f7fe fdbc 	bl	80001d0 <print_string>
		break;
 8001658:	f000 bc4c 	b.w	8001ef4 <fsm_traffic_light+0x91c>

	case REDGREEN:
		onTFRed1();
 800165c:	f7fe ff5c 	bl	8000518 <onTFRed1>
		onTFGreen2();
 8001660:	f7fe ffa6 	bl	80005b0 <onTFGreen2>

		if (timer2_flag == 1){
 8001664:	4b5f      	ldr	r3, [pc, #380]	; (80017e4 <fsm_traffic_light+0x20c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d11c      	bne.n	80016a6 <fsm_traffic_light+0xce>
			setTimer2(100);
 800166c:	2064      	movs	r0, #100	; 0x64
 800166e:	f7ff fd59 	bl	8001124 <setTimer2>
			timerRoad1--;
 8001672:	4b59      	ldr	r3, [pc, #356]	; (80017d8 <fsm_traffic_light+0x200>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3b01      	subs	r3, #1
 8001678:	4a57      	ldr	r2, [pc, #348]	; (80017d8 <fsm_traffic_light+0x200>)
 800167a:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 800167c:	4b57      	ldr	r3, [pc, #348]	; (80017dc <fsm_traffic_light+0x204>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3b01      	subs	r3, #1
 8001682:	4a56      	ldr	r2, [pc, #344]	; (80017dc <fsm_traffic_light+0x204>)
 8001684:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = yellowTime;
 8001686:	4b55      	ldr	r3, [pc, #340]	; (80017dc <fsm_traffic_light+0x204>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	dc03      	bgt.n	8001696 <fsm_traffic_light+0xbe>
 800168e:	4b56      	ldr	r3, [pc, #344]	; (80017e8 <fsm_traffic_light+0x210>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a52      	ldr	r2, [pc, #328]	; (80017dc <fsm_traffic_light+0x204>)
 8001694:	6013      	str	r3, [r2, #0]
			uart_led(timerRoad1, timerRoad2);
 8001696:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <fsm_traffic_light+0x200>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a50      	ldr	r2, [pc, #320]	; (80017dc <fsm_traffic_light+0x204>)
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fd79 	bl	8000198 <uart_led>
		}

		if (timer1_flag == 1){
 80016a6:	4b51      	ldr	r3, [pc, #324]	; (80017ec <fsm_traffic_light+0x214>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d112      	bne.n	80016d4 <fsm_traffic_light+0xfc>
			setTimer1(yellowTime*100);
 80016ae:	4b4e      	ldr	r3, [pc, #312]	; (80017e8 <fsm_traffic_light+0x210>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2264      	movs	r2, #100	; 0x64
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fd1f 	bl	80010fc <setTimer1>
			led_status = REDYELLOW;
 80016be:	4b43      	ldr	r3, [pc, #268]	; (80017cc <fsm_traffic_light+0x1f4>)
 80016c0:	2202      	movs	r2, #2
 80016c2:	701a      	strb	r2, [r3, #0]

			if (ped_flag == 1){
 80016c4:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <fsm_traffic_light+0x218>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d103      	bne.n	80016d4 <fsm_traffic_light+0xfc>
				ped_status = led_status;
 80016cc:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <fsm_traffic_light+0x1f4>)
 80016ce:	781a      	ldrb	r2, [r3, #0]
 80016d0:	4b48      	ldr	r3, [pc, #288]	; (80017f4 <fsm_traffic_light+0x21c>)
 80016d2:	701a      	strb	r2, [r3, #0]
			}

		}

		if (isButtonPressed(1) == 1) {
 80016d4:	2001      	movs	r0, #1
 80016d6:	f7fe fdab 	bl	8000230 <isButtonPressed>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b01      	cmp	r3, #1
 80016de:	f040 83f4 	bne.w	8001eca <fsm_traffic_light+0x8f2>
			offAllLed();
 80016e2:	f7fe fedb 	bl	800049c <offAllLed>
			print_string("MANUAL MODE\r\n");
 80016e6:	4844      	ldr	r0, [pc, #272]	; (80017f8 <fsm_traffic_light+0x220>)
 80016e8:	f7fe fd72 	bl	80001d0 <print_string>

			led_status = MAN_REDGREEN;
 80016ec:	4b37      	ldr	r3, [pc, #220]	; (80017cc <fsm_traffic_light+0x1f4>)
 80016ee:	2205      	movs	r2, #5
 80016f0:	701a      	strb	r2, [r3, #0]
			newRed = redTime;
 80016f2:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <fsm_traffic_light+0x1fc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a41      	ldr	r2, [pc, #260]	; (80017fc <fsm_traffic_light+0x224>)
 80016f8:	6013      	str	r3, [r2, #0]
			newGreen = greenTime;
 80016fa:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <fsm_traffic_light+0x1f8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a40      	ldr	r2, [pc, #256]	; (8001800 <fsm_traffic_light+0x228>)
 8001700:	6013      	str	r3, [r2, #0]
			newYellow = yellowTime;
 8001702:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <fsm_traffic_light+0x210>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a3f      	ldr	r2, [pc, #252]	; (8001804 <fsm_traffic_light+0x22c>)
 8001708:	6013      	str	r3, [r2, #0]
		}

		break;
 800170a:	e3de      	b.n	8001eca <fsm_traffic_light+0x8f2>

	case REDYELLOW:
		onTFRed1();
 800170c:	f7fe ff04 	bl	8000518 <onTFRed1>
		onTFYellow2();
 8001710:	f7fe ff5e 	bl	80005d0 <onTFYellow2>

		if (timer2_flag == 1){
 8001714:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <fsm_traffic_light+0x20c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d124      	bne.n	8001766 <fsm_traffic_light+0x18e>
			setTimer2(100);
 800171c:	2064      	movs	r0, #100	; 0x64
 800171e:	f7ff fd01 	bl	8001124 <setTimer2>
			timerRoad1--;
 8001722:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <fsm_traffic_light+0x200>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3b01      	subs	r3, #1
 8001728:	4a2b      	ldr	r2, [pc, #172]	; (80017d8 <fsm_traffic_light+0x200>)
 800172a:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <fsm_traffic_light+0x204>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3b01      	subs	r3, #1
 8001732:	4a2a      	ldr	r2, [pc, #168]	; (80017dc <fsm_traffic_light+0x204>)
 8001734:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = greenTime;
 8001736:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <fsm_traffic_light+0x200>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	dc03      	bgt.n	8001746 <fsm_traffic_light+0x16e>
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <fsm_traffic_light+0x1f8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a25      	ldr	r2, [pc, #148]	; (80017d8 <fsm_traffic_light+0x200>)
 8001744:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = redTime;
 8001746:	4b25      	ldr	r3, [pc, #148]	; (80017dc <fsm_traffic_light+0x204>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	dc03      	bgt.n	8001756 <fsm_traffic_light+0x17e>
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <fsm_traffic_light+0x1fc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a22      	ldr	r2, [pc, #136]	; (80017dc <fsm_traffic_light+0x204>)
 8001754:	6013      	str	r3, [r2, #0]
			uart_led(timerRoad1, timerRoad2);
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <fsm_traffic_light+0x200>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a20      	ldr	r2, [pc, #128]	; (80017dc <fsm_traffic_light+0x204>)
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fd19 	bl	8000198 <uart_led>
		}

		if(timer1_flag == 1){
 8001766:	4b21      	ldr	r3, [pc, #132]	; (80017ec <fsm_traffic_light+0x214>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d112      	bne.n	8001794 <fsm_traffic_light+0x1bc>
			setTimer1(greenTime*100);
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <fsm_traffic_light+0x1f8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2264      	movs	r2, #100	; 0x64
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fcbf 	bl	80010fc <setTimer1>
			led_status = GREENRED;
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <fsm_traffic_light+0x1f4>)
 8001780:	2203      	movs	r2, #3
 8001782:	701a      	strb	r2, [r3, #0]

			if (ped_flag == 1){
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <fsm_traffic_light+0x218>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d103      	bne.n	8001794 <fsm_traffic_light+0x1bc>
				ped_status = led_status;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <fsm_traffic_light+0x1f4>)
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <fsm_traffic_light+0x21c>)
 8001792:	701a      	strb	r2, [r3, #0]
			}
		}

		if (isButtonPressed(1) == 1) {
 8001794:	2001      	movs	r0, #1
 8001796:	f7fe fd4b 	bl	8000230 <isButtonPressed>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	f040 8396 	bne.w	8001ece <fsm_traffic_light+0x8f6>
			offAllLed();
 80017a2:	f7fe fe7b 	bl	800049c <offAllLed>
			print_string("MANUAL MODE\r\n");
 80017a6:	4814      	ldr	r0, [pc, #80]	; (80017f8 <fsm_traffic_light+0x220>)
 80017a8:	f7fe fd12 	bl	80001d0 <print_string>

			led_status = MAN_REDYELLOW;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <fsm_traffic_light+0x1f4>)
 80017ae:	2206      	movs	r2, #6
 80017b0:	701a      	strb	r2, [r3, #0]
			newRed = redTime;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <fsm_traffic_light+0x1fc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a11      	ldr	r2, [pc, #68]	; (80017fc <fsm_traffic_light+0x224>)
 80017b8:	6013      	str	r3, [r2, #0]
			newGreen = greenTime;
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <fsm_traffic_light+0x1f8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <fsm_traffic_light+0x228>)
 80017c0:	6013      	str	r3, [r2, #0]
			newYellow = yellowTime;
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <fsm_traffic_light+0x210>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <fsm_traffic_light+0x22c>)
 80017c8:	6013      	str	r3, [r2, #0]
		}

		break;
 80017ca:	e380      	b.n	8001ece <fsm_traffic_light+0x8f6>
 80017cc:	2000010c 	.word	0x2000010c
 80017d0:	2000005c 	.word	0x2000005c
 80017d4:	20000058 	.word	0x20000058
 80017d8:	20000124 	.word	0x20000124
 80017dc:	20000128 	.word	0x20000128
 80017e0:	08005464 	.word	0x08005464
 80017e4:	20000460 	.word	0x20000460
 80017e8:	20000060 	.word	0x20000060
 80017ec:	20000458 	.word	0x20000458
 80017f0:	2000011c 	.word	0x2000011c
 80017f4:	2000010e 	.word	0x2000010e
 80017f8:	08005478 	.word	0x08005478
 80017fc:	20000110 	.word	0x20000110
 8001800:	20000114 	.word	0x20000114
 8001804:	20000118 	.word	0x20000118

	case GREENRED:
		onTFGreen1();
 8001808:	f7fe fe9a 	bl	8000540 <onTFGreen1>
		onTFRed2();
 800180c:	f7fe fec0 	bl	8000590 <onTFRed2>

		if (timer2_flag == 1){
 8001810:	4ba2      	ldr	r3, [pc, #648]	; (8001a9c <fsm_traffic_light+0x4c4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d11c      	bne.n	8001852 <fsm_traffic_light+0x27a>
			setTimer2(100);
 8001818:	2064      	movs	r0, #100	; 0x64
 800181a:	f7ff fc83 	bl	8001124 <setTimer2>
			timerRoad1--;
 800181e:	4ba0      	ldr	r3, [pc, #640]	; (8001aa0 <fsm_traffic_light+0x4c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3b01      	subs	r3, #1
 8001824:	4a9e      	ldr	r2, [pc, #632]	; (8001aa0 <fsm_traffic_light+0x4c8>)
 8001826:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = yellowTime;
 8001828:	4b9d      	ldr	r3, [pc, #628]	; (8001aa0 <fsm_traffic_light+0x4c8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	dc03      	bgt.n	8001838 <fsm_traffic_light+0x260>
 8001830:	4b9c      	ldr	r3, [pc, #624]	; (8001aa4 <fsm_traffic_light+0x4cc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a9a      	ldr	r2, [pc, #616]	; (8001aa0 <fsm_traffic_light+0x4c8>)
 8001836:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 8001838:	4b9b      	ldr	r3, [pc, #620]	; (8001aa8 <fsm_traffic_light+0x4d0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3b01      	subs	r3, #1
 800183e:	4a9a      	ldr	r2, [pc, #616]	; (8001aa8 <fsm_traffic_light+0x4d0>)
 8001840:	6013      	str	r3, [r2, #0]
			uart_led(timerRoad1, timerRoad2);
 8001842:	4b97      	ldr	r3, [pc, #604]	; (8001aa0 <fsm_traffic_light+0x4c8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a98      	ldr	r2, [pc, #608]	; (8001aa8 <fsm_traffic_light+0x4d0>)
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fca3 	bl	8000198 <uart_led>
		}


		if(timer1_flag == 1){
 8001852:	4b96      	ldr	r3, [pc, #600]	; (8001aac <fsm_traffic_light+0x4d4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d115      	bne.n	8001886 <fsm_traffic_light+0x2ae>
			setTimer1(yellowTime*100);
 800185a:	4b92      	ldr	r3, [pc, #584]	; (8001aa4 <fsm_traffic_light+0x4cc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2264      	movs	r2, #100	; 0x64
 8001860:	fb02 f303 	mul.w	r3, r2, r3
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fc49 	bl	80010fc <setTimer1>
			led_status = YELLOWRED;
 800186a:	4b91      	ldr	r3, [pc, #580]	; (8001ab0 <fsm_traffic_light+0x4d8>)
 800186c:	2204      	movs	r2, #4
 800186e:	701a      	strb	r2, [r3, #0]
			if (ped_flag == 1){
 8001870:	4b90      	ldr	r3, [pc, #576]	; (8001ab4 <fsm_traffic_light+0x4dc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d106      	bne.n	8001886 <fsm_traffic_light+0x2ae>
				setTimer5(25);
 8001878:	2019      	movs	r0, #25
 800187a:	f7ff fc8f 	bl	800119c <setTimer5>
				ped_status = led_status;
 800187e:	4b8c      	ldr	r3, [pc, #560]	; (8001ab0 <fsm_traffic_light+0x4d8>)
 8001880:	781a      	ldrb	r2, [r3, #0]
 8001882:	4b8d      	ldr	r3, [pc, #564]	; (8001ab8 <fsm_traffic_light+0x4e0>)
 8001884:	701a      	strb	r2, [r3, #0]
			}
		}

		if (isButtonPressed(1) == 1) {
 8001886:	2001      	movs	r0, #1
 8001888:	f7fe fcd2 	bl	8000230 <isButtonPressed>
 800188c:	4603      	mov	r3, r0
 800188e:	2b01      	cmp	r3, #1
 8001890:	f040 831f 	bne.w	8001ed2 <fsm_traffic_light+0x8fa>
			offAllLed();
 8001894:	f7fe fe02 	bl	800049c <offAllLed>
			print_string("MANUAL MODE\r\n");
 8001898:	4888      	ldr	r0, [pc, #544]	; (8001abc <fsm_traffic_light+0x4e4>)
 800189a:	f7fe fc99 	bl	80001d0 <print_string>

			led_status = MAN_GREENRED;
 800189e:	4b84      	ldr	r3, [pc, #528]	; (8001ab0 <fsm_traffic_light+0x4d8>)
 80018a0:	2207      	movs	r2, #7
 80018a2:	701a      	strb	r2, [r3, #0]
			newRed = redTime;
 80018a4:	4b86      	ldr	r3, [pc, #536]	; (8001ac0 <fsm_traffic_light+0x4e8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a86      	ldr	r2, [pc, #536]	; (8001ac4 <fsm_traffic_light+0x4ec>)
 80018aa:	6013      	str	r3, [r2, #0]
			newGreen = greenTime;
 80018ac:	4b86      	ldr	r3, [pc, #536]	; (8001ac8 <fsm_traffic_light+0x4f0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a86      	ldr	r2, [pc, #536]	; (8001acc <fsm_traffic_light+0x4f4>)
 80018b2:	6013      	str	r3, [r2, #0]
			newYellow = yellowTime;
 80018b4:	4b7b      	ldr	r3, [pc, #492]	; (8001aa4 <fsm_traffic_light+0x4cc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a85      	ldr	r2, [pc, #532]	; (8001ad0 <fsm_traffic_light+0x4f8>)
 80018ba:	6013      	str	r3, [r2, #0]
		}
		break;
 80018bc:	e309      	b.n	8001ed2 <fsm_traffic_light+0x8fa>

	case YELLOWRED:
		onTFYellow1();
 80018be:	f7fe fe53 	bl	8000568 <onTFYellow1>
		onTFRed2();
 80018c2:	f7fe fe65 	bl	8000590 <onTFRed2>

		if (timer2_flag == 1){
 80018c6:	4b75      	ldr	r3, [pc, #468]	; (8001a9c <fsm_traffic_light+0x4c4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d124      	bne.n	8001918 <fsm_traffic_light+0x340>
			setTimer2(100);
 80018ce:	2064      	movs	r0, #100	; 0x64
 80018d0:	f7ff fc28 	bl	8001124 <setTimer2>
			timerRoad1--;
 80018d4:	4b72      	ldr	r3, [pc, #456]	; (8001aa0 <fsm_traffic_light+0x4c8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	3b01      	subs	r3, #1
 80018da:	4a71      	ldr	r2, [pc, #452]	; (8001aa0 <fsm_traffic_light+0x4c8>)
 80018dc:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = redTime;
 80018de:	4b70      	ldr	r3, [pc, #448]	; (8001aa0 <fsm_traffic_light+0x4c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	dc03      	bgt.n	80018ee <fsm_traffic_light+0x316>
 80018e6:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <fsm_traffic_light+0x4e8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a6d      	ldr	r2, [pc, #436]	; (8001aa0 <fsm_traffic_light+0x4c8>)
 80018ec:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 80018ee:	4b6e      	ldr	r3, [pc, #440]	; (8001aa8 <fsm_traffic_light+0x4d0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	4a6c      	ldr	r2, [pc, #432]	; (8001aa8 <fsm_traffic_light+0x4d0>)
 80018f6:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = greenTime;
 80018f8:	4b6b      	ldr	r3, [pc, #428]	; (8001aa8 <fsm_traffic_light+0x4d0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	dc03      	bgt.n	8001908 <fsm_traffic_light+0x330>
 8001900:	4b71      	ldr	r3, [pc, #452]	; (8001ac8 <fsm_traffic_light+0x4f0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a68      	ldr	r2, [pc, #416]	; (8001aa8 <fsm_traffic_light+0x4d0>)
 8001906:	6013      	str	r3, [r2, #0]
			uart_led(timerRoad1, timerRoad2);
 8001908:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <fsm_traffic_light+0x4c8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a66      	ldr	r2, [pc, #408]	; (8001aa8 <fsm_traffic_light+0x4d0>)
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fc40 	bl	8000198 <uart_led>
		}

		if (timer1_flag == 1){
 8001918:	4b64      	ldr	r3, [pc, #400]	; (8001aac <fsm_traffic_light+0x4d4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d112      	bne.n	8001946 <fsm_traffic_light+0x36e>
			setTimer1(greenTime*100);
 8001920:	4b69      	ldr	r3, [pc, #420]	; (8001ac8 <fsm_traffic_light+0x4f0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2264      	movs	r2, #100	; 0x64
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fbe6 	bl	80010fc <setTimer1>
			led_status = REDGREEN;
 8001930:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <fsm_traffic_light+0x4d8>)
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
			if (ped_flag == 1){
 8001936:	4b5f      	ldr	r3, [pc, #380]	; (8001ab4 <fsm_traffic_light+0x4dc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d103      	bne.n	8001946 <fsm_traffic_light+0x36e>
				ped_status = led_status;
 800193e:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <fsm_traffic_light+0x4d8>)
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	4b5d      	ldr	r3, [pc, #372]	; (8001ab8 <fsm_traffic_light+0x4e0>)
 8001944:	701a      	strb	r2, [r3, #0]
			}
		}

		if (isButtonPressed(1) == 1) {
 8001946:	2001      	movs	r0, #1
 8001948:	f7fe fc72 	bl	8000230 <isButtonPressed>
 800194c:	4603      	mov	r3, r0
 800194e:	2b01      	cmp	r3, #1
 8001950:	f040 82c1 	bne.w	8001ed6 <fsm_traffic_light+0x8fe>
			offAllLed();
 8001954:	f7fe fda2 	bl	800049c <offAllLed>
			print_string("MANUAL MODE\r\n");
 8001958:	4858      	ldr	r0, [pc, #352]	; (8001abc <fsm_traffic_light+0x4e4>)
 800195a:	f7fe fc39 	bl	80001d0 <print_string>

			led_status = MAN_YELLOWRED;
 800195e:	4b54      	ldr	r3, [pc, #336]	; (8001ab0 <fsm_traffic_light+0x4d8>)
 8001960:	2208      	movs	r2, #8
 8001962:	701a      	strb	r2, [r3, #0]
			newRed = redTime;
 8001964:	4b56      	ldr	r3, [pc, #344]	; (8001ac0 <fsm_traffic_light+0x4e8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a56      	ldr	r2, [pc, #344]	; (8001ac4 <fsm_traffic_light+0x4ec>)
 800196a:	6013      	str	r3, [r2, #0]
			newGreen = greenTime;
 800196c:	4b56      	ldr	r3, [pc, #344]	; (8001ac8 <fsm_traffic_light+0x4f0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a56      	ldr	r2, [pc, #344]	; (8001acc <fsm_traffic_light+0x4f4>)
 8001972:	6013      	str	r3, [r2, #0]
			newYellow = yellowTime;
 8001974:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <fsm_traffic_light+0x4cc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a55      	ldr	r2, [pc, #340]	; (8001ad0 <fsm_traffic_light+0x4f8>)
 800197a:	6013      	str	r3, [r2, #0]
		}
		break;
 800197c:	e2ab      	b.n	8001ed6 <fsm_traffic_light+0x8fe>

	case MAN_REDGREEN:
		onTFRed1();
 800197e:	f7fe fdcb 	bl	8000518 <onTFRed1>
		onTFGreen2();
 8001982:	f7fe fe15 	bl	80005b0 <onTFGreen2>

		if (isButtonPressed(1) == 1){
 8001986:	2001      	movs	r0, #1
 8001988:	f7fe fc52 	bl	8000230 <isButtonPressed>
 800198c:	4603      	mov	r3, r0
 800198e:	2b01      	cmp	r3, #1
 8001990:	d112      	bne.n	80019b8 <fsm_traffic_light+0x3e0>
			offAllLed();
 8001992:	f7fe fd83 	bl	800049c <offAllLed>
			print_string("TUNING MODE: SET RED LED\r\n");
 8001996:	484f      	ldr	r0, [pc, #316]	; (8001ad4 <fsm_traffic_light+0x4fc>)
 8001998:	f7fe fc1a 	bl	80001d0 <print_string>
			print_value(redTime, newRed);
 800199c:	4b48      	ldr	r3, [pc, #288]	; (8001ac0 <fsm_traffic_light+0x4e8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a48      	ldr	r2, [pc, #288]	; (8001ac4 <fsm_traffic_light+0x4ec>)
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fc26 	bl	80001f8 <print_value>
			led_status = SET_RED;
 80019ac:	4b40      	ldr	r3, [pc, #256]	; (8001ab0 <fsm_traffic_light+0x4d8>)
 80019ae:	2209      	movs	r2, #9
 80019b0:	701a      	strb	r2, [r3, #0]
			temp_status = REDGREEN;
 80019b2:	4b49      	ldr	r3, [pc, #292]	; (8001ad8 <fsm_traffic_light+0x500>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1){
 80019b8:	2002      	movs	r0, #2
 80019ba:	f7fe fc39 	bl	8000230 <isButtonPressed>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d102      	bne.n	80019ca <fsm_traffic_light+0x3f2>
			led_status = MAN_REDYELLOW;
 80019c4:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <fsm_traffic_light+0x4d8>)
 80019c6:	2206      	movs	r2, #6
 80019c8:	701a      	strb	r2, [r3, #0]
		}

		if (isButtonPressed(3) == 1){
 80019ca:	2003      	movs	r0, #3
 80019cc:	f7fe fc30 	bl	8000230 <isButtonPressed>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	f040 8281 	bne.w	8001eda <fsm_traffic_light+0x902>
			print_string("AUTOMATION MODE\r\n");
 80019d8:	4840      	ldr	r0, [pc, #256]	; (8001adc <fsm_traffic_light+0x504>)
 80019da:	f7fe fbf9 	bl	80001d0 <print_string>
			led_status = REDGREEN;
 80019de:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <fsm_traffic_light+0x4d8>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]

			timerRoad1 = redTime;
 80019e4:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <fsm_traffic_light+0x4e8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2d      	ldr	r2, [pc, #180]	; (8001aa0 <fsm_traffic_light+0x4c8>)
 80019ea:	6013      	str	r3, [r2, #0]
			timerRoad2 = greenTime;
 80019ec:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <fsm_traffic_light+0x4f0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a2d      	ldr	r2, [pc, #180]	; (8001aa8 <fsm_traffic_light+0x4d0>)
 80019f2:	6013      	str	r3, [r2, #0]

			setTimer1(greenTime*100);
 80019f4:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <fsm_traffic_light+0x4f0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2264      	movs	r2, #100	; 0x64
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fb7c 	bl	80010fc <setTimer1>
			setTimer2(100);
 8001a04:	2064      	movs	r0, #100	; 0x64
 8001a06:	f7ff fb8d 	bl	8001124 <setTimer2>
		}

		break;
 8001a0a:	e266      	b.n	8001eda <fsm_traffic_light+0x902>

	case MAN_REDYELLOW:
		onTFRed1();
 8001a0c:	f7fe fd84 	bl	8000518 <onTFRed1>
		onTFYellow2();
 8001a10:	f7fe fdde 	bl	80005d0 <onTFYellow2>

		if (isButtonPressed(1) == 1){
 8001a14:	2001      	movs	r0, #1
 8001a16:	f7fe fc0b 	bl	8000230 <isButtonPressed>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d112      	bne.n	8001a46 <fsm_traffic_light+0x46e>
			offAllLed();
 8001a20:	f7fe fd3c 	bl	800049c <offAllLed>
			print_string("TUNING MODE: SET RED LED\r\n");
 8001a24:	482b      	ldr	r0, [pc, #172]	; (8001ad4 <fsm_traffic_light+0x4fc>)
 8001a26:	f7fe fbd3 	bl	80001d0 <print_string>
			print_value(redTime, newRed);
 8001a2a:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <fsm_traffic_light+0x4e8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a25      	ldr	r2, [pc, #148]	; (8001ac4 <fsm_traffic_light+0x4ec>)
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fbdf 	bl	80001f8 <print_value>
			led_status = SET_RED;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <fsm_traffic_light+0x4d8>)
 8001a3c:	2209      	movs	r2, #9
 8001a3e:	701a      	strb	r2, [r3, #0]
			temp_status = REDYELLOW;
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <fsm_traffic_light+0x500>)
 8001a42:	2202      	movs	r2, #2
 8001a44:	701a      	strb	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1){
 8001a46:	2002      	movs	r0, #2
 8001a48:	f7fe fbf2 	bl	8000230 <isButtonPressed>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d102      	bne.n	8001a58 <fsm_traffic_light+0x480>
			led_status = MAN_GREENRED;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <fsm_traffic_light+0x4d8>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	701a      	strb	r2, [r3, #0]
		}
		if (isButtonPressed(3) == 1){
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f7fe fbe9 	bl	8000230 <isButtonPressed>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	f040 823c 	bne.w	8001ede <fsm_traffic_light+0x906>
			print_string("AUTOMATION MODE\r\n");
 8001a66:	481d      	ldr	r0, [pc, #116]	; (8001adc <fsm_traffic_light+0x504>)
 8001a68:	f7fe fbb2 	bl	80001d0 <print_string>
			led_status = REDYELLOW;
 8001a6c:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <fsm_traffic_light+0x4d8>)
 8001a6e:	2202      	movs	r2, #2
 8001a70:	701a      	strb	r2, [r3, #0]

			timerRoad1 = redTime;
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <fsm_traffic_light+0x4e8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <fsm_traffic_light+0x4c8>)
 8001a78:	6013      	str	r3, [r2, #0]
			timerRoad2 = yellowTime;
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <fsm_traffic_light+0x4cc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <fsm_traffic_light+0x4d0>)
 8001a80:	6013      	str	r3, [r2, #0]

			setTimer1(yellowTime*100);
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <fsm_traffic_light+0x4cc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2264      	movs	r2, #100	; 0x64
 8001a88:	fb02 f303 	mul.w	r3, r2, r3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fb35 	bl	80010fc <setTimer1>
			setTimer2(100);
 8001a92:	2064      	movs	r0, #100	; 0x64
 8001a94:	f7ff fb46 	bl	8001124 <setTimer2>
		}

		break;
 8001a98:	e221      	b.n	8001ede <fsm_traffic_light+0x906>
 8001a9a:	bf00      	nop
 8001a9c:	20000460 	.word	0x20000460
 8001aa0:	20000124 	.word	0x20000124
 8001aa4:	20000060 	.word	0x20000060
 8001aa8:	20000128 	.word	0x20000128
 8001aac:	20000458 	.word	0x20000458
 8001ab0:	2000010c 	.word	0x2000010c
 8001ab4:	2000011c 	.word	0x2000011c
 8001ab8:	2000010e 	.word	0x2000010e
 8001abc:	08005478 	.word	0x08005478
 8001ac0:	20000058 	.word	0x20000058
 8001ac4:	20000110 	.word	0x20000110
 8001ac8:	2000005c 	.word	0x2000005c
 8001acc:	20000114 	.word	0x20000114
 8001ad0:	20000118 	.word	0x20000118
 8001ad4:	08005488 	.word	0x08005488
 8001ad8:	2000010d 	.word	0x2000010d
 8001adc:	08005464 	.word	0x08005464

	case MAN_GREENRED:
		onTFGreen1();
 8001ae0:	f7fe fd2e 	bl	8000540 <onTFGreen1>
		onTFRed2();
 8001ae4:	f7fe fd54 	bl	8000590 <onTFRed2>

		if (isButtonPressed(1) == 1){
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7fe fba1 	bl	8000230 <isButtonPressed>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d112      	bne.n	8001b1a <fsm_traffic_light+0x542>
			offAllLed();
 8001af4:	f7fe fcd2 	bl	800049c <offAllLed>
			print_string("TUNING MODE: SET RED LED\r\n");
 8001af8:	48aa      	ldr	r0, [pc, #680]	; (8001da4 <fsm_traffic_light+0x7cc>)
 8001afa:	f7fe fb69 	bl	80001d0 <print_string>
			print_value(redTime, newRed);
 8001afe:	4baa      	ldr	r3, [pc, #680]	; (8001da8 <fsm_traffic_light+0x7d0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4aaa      	ldr	r2, [pc, #680]	; (8001dac <fsm_traffic_light+0x7d4>)
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fb75 	bl	80001f8 <print_value>
			led_status = SET_RED;
 8001b0e:	4ba8      	ldr	r3, [pc, #672]	; (8001db0 <fsm_traffic_light+0x7d8>)
 8001b10:	2209      	movs	r2, #9
 8001b12:	701a      	strb	r2, [r3, #0]
			temp_status = GREENRED;
 8001b14:	4ba7      	ldr	r3, [pc, #668]	; (8001db4 <fsm_traffic_light+0x7dc>)
 8001b16:	2203      	movs	r2, #3
 8001b18:	701a      	strb	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1){
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f7fe fb88 	bl	8000230 <isButtonPressed>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d102      	bne.n	8001b2c <fsm_traffic_light+0x554>
			led_status = MAN_YELLOWRED;
 8001b26:	4ba2      	ldr	r3, [pc, #648]	; (8001db0 <fsm_traffic_light+0x7d8>)
 8001b28:	2208      	movs	r2, #8
 8001b2a:	701a      	strb	r2, [r3, #0]
		}
		if (isButtonPressed(3) == 1){
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f7fe fb7f 	bl	8000230 <isButtonPressed>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	f040 81d4 	bne.w	8001ee2 <fsm_traffic_light+0x90a>
			print_string("AUTOMATION MODE\r\n");
 8001b3a:	489f      	ldr	r0, [pc, #636]	; (8001db8 <fsm_traffic_light+0x7e0>)
 8001b3c:	f7fe fb48 	bl	80001d0 <print_string>
			led_status = GREENRED;
 8001b40:	4b9b      	ldr	r3, [pc, #620]	; (8001db0 <fsm_traffic_light+0x7d8>)
 8001b42:	2203      	movs	r2, #3
 8001b44:	701a      	strb	r2, [r3, #0]

			timerRoad1 = greenTime;
 8001b46:	4b9d      	ldr	r3, [pc, #628]	; (8001dbc <fsm_traffic_light+0x7e4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a9d      	ldr	r2, [pc, #628]	; (8001dc0 <fsm_traffic_light+0x7e8>)
 8001b4c:	6013      	str	r3, [r2, #0]
			timerRoad2 = redTime;
 8001b4e:	4b96      	ldr	r3, [pc, #600]	; (8001da8 <fsm_traffic_light+0x7d0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a9c      	ldr	r2, [pc, #624]	; (8001dc4 <fsm_traffic_light+0x7ec>)
 8001b54:	6013      	str	r3, [r2, #0]

			setTimer1(greenTime*100);
 8001b56:	4b99      	ldr	r3, [pc, #612]	; (8001dbc <fsm_traffic_light+0x7e4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2264      	movs	r2, #100	; 0x64
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff facb 	bl	80010fc <setTimer1>
			setTimer2(100);
 8001b66:	2064      	movs	r0, #100	; 0x64
 8001b68:	f7ff fadc 	bl	8001124 <setTimer2>
		}

		break;
 8001b6c:	e1b9      	b.n	8001ee2 <fsm_traffic_light+0x90a>

	case MAN_YELLOWRED:
		onTFYellow1();
 8001b6e:	f7fe fcfb 	bl	8000568 <onTFYellow1>
		onTFRed2();
 8001b72:	f7fe fd0d 	bl	8000590 <onTFRed2>

		if (isButtonPressed(1) == 1){
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7fe fb5a 	bl	8000230 <isButtonPressed>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d112      	bne.n	8001ba8 <fsm_traffic_light+0x5d0>
			offAllLed();
 8001b82:	f7fe fc8b 	bl	800049c <offAllLed>
			print_string("TUNING MODE: SET RED LED\r\n");
 8001b86:	4887      	ldr	r0, [pc, #540]	; (8001da4 <fsm_traffic_light+0x7cc>)
 8001b88:	f7fe fb22 	bl	80001d0 <print_string>
			print_value(redTime, newRed);
 8001b8c:	4b86      	ldr	r3, [pc, #536]	; (8001da8 <fsm_traffic_light+0x7d0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a86      	ldr	r2, [pc, #536]	; (8001dac <fsm_traffic_light+0x7d4>)
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	4611      	mov	r1, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fb2e 	bl	80001f8 <print_value>
			led_status = SET_RED;
 8001b9c:	4b84      	ldr	r3, [pc, #528]	; (8001db0 <fsm_traffic_light+0x7d8>)
 8001b9e:	2209      	movs	r2, #9
 8001ba0:	701a      	strb	r2, [r3, #0]
			temp_status = YELLOWRED;
 8001ba2:	4b84      	ldr	r3, [pc, #528]	; (8001db4 <fsm_traffic_light+0x7dc>)
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	701a      	strb	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1){
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f7fe fb41 	bl	8000230 <isButtonPressed>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d102      	bne.n	8001bba <fsm_traffic_light+0x5e2>
			led_status = MAN_REDGREEN;
 8001bb4:	4b7e      	ldr	r3, [pc, #504]	; (8001db0 <fsm_traffic_light+0x7d8>)
 8001bb6:	2205      	movs	r2, #5
 8001bb8:	701a      	strb	r2, [r3, #0]
		}
		if (isButtonPressed(3) == 1){
 8001bba:	2003      	movs	r0, #3
 8001bbc:	f7fe fb38 	bl	8000230 <isButtonPressed>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	f040 818f 	bne.w	8001ee6 <fsm_traffic_light+0x90e>
			print_string("AUTOMATION MODE\n");
 8001bc8:	487f      	ldr	r0, [pc, #508]	; (8001dc8 <fsm_traffic_light+0x7f0>)
 8001bca:	f7fe fb01 	bl	80001d0 <print_string>
			led_status = YELLOWRED;
 8001bce:	4b78      	ldr	r3, [pc, #480]	; (8001db0 <fsm_traffic_light+0x7d8>)
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	701a      	strb	r2, [r3, #0]

			timerRoad1 = yellowTime;
 8001bd4:	4b7d      	ldr	r3, [pc, #500]	; (8001dcc <fsm_traffic_light+0x7f4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a79      	ldr	r2, [pc, #484]	; (8001dc0 <fsm_traffic_light+0x7e8>)
 8001bda:	6013      	str	r3, [r2, #0]
			timerRoad2 = redTime;
 8001bdc:	4b72      	ldr	r3, [pc, #456]	; (8001da8 <fsm_traffic_light+0x7d0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a78      	ldr	r2, [pc, #480]	; (8001dc4 <fsm_traffic_light+0x7ec>)
 8001be2:	6013      	str	r3, [r2, #0]

			setTimer1(yellowTime*100);
 8001be4:	4b79      	ldr	r3, [pc, #484]	; (8001dcc <fsm_traffic_light+0x7f4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2264      	movs	r2, #100	; 0x64
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fa84 	bl	80010fc <setTimer1>
			setTimer2(100);
 8001bf4:	2064      	movs	r0, #100	; 0x64
 8001bf6:	f7ff fa95 	bl	8001124 <setTimer2>
		}

		break;
 8001bfa:	e174      	b.n	8001ee6 <fsm_traffic_light+0x90e>

	case SET_RED:
		onTFRed1();
 8001bfc:	f7fe fc8c 	bl	8000518 <onTFRed1>
		onTFRed2();
 8001c00:	f7fe fcc6 	bl	8000590 <onTFRed2>

		if (isButtonPressed(1) == 1){
 8001c04:	2001      	movs	r0, #1
 8001c06:	f7fe fb13 	bl	8000230 <isButtonPressed>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d10f      	bne.n	8001c30 <fsm_traffic_light+0x658>
			led_status = SET_YELLOW;
 8001c10:	4b67      	ldr	r3, [pc, #412]	; (8001db0 <fsm_traffic_light+0x7d8>)
 8001c12:	220a      	movs	r2, #10
 8001c14:	701a      	strb	r2, [r3, #0]
			print_string("TUNING MODE: SET YELLOW LED\r\n");
 8001c16:	486e      	ldr	r0, [pc, #440]	; (8001dd0 <fsm_traffic_light+0x7f8>)
 8001c18:	f7fe fada 	bl	80001d0 <print_string>
			print_value(yellowTime, newYellow);
 8001c1c:	4b6b      	ldr	r3, [pc, #428]	; (8001dcc <fsm_traffic_light+0x7f4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a6c      	ldr	r2, [pc, #432]	; (8001dd4 <fsm_traffic_light+0x7fc>)
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fae6 	bl	80001f8 <print_value>
			offAllLed();
 8001c2c:	f7fe fc36 	bl	800049c <offAllLed>
		}

		if (isButtonPressed(2) == 1){
 8001c30:	2002      	movs	r0, #2
 8001c32:	f7fe fafd 	bl	8000230 <isButtonPressed>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d113      	bne.n	8001c64 <fsm_traffic_light+0x68c>
			newRed++;
 8001c3c:	4b5b      	ldr	r3, [pc, #364]	; (8001dac <fsm_traffic_light+0x7d4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	4a5a      	ldr	r2, [pc, #360]	; (8001dac <fsm_traffic_light+0x7d4>)
 8001c44:	6013      	str	r3, [r2, #0]
			if (newRed >= 20) newRed = 2;
 8001c46:	4b59      	ldr	r3, [pc, #356]	; (8001dac <fsm_traffic_light+0x7d4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b13      	cmp	r3, #19
 8001c4c:	dd02      	ble.n	8001c54 <fsm_traffic_light+0x67c>
 8001c4e:	4b57      	ldr	r3, [pc, #348]	; (8001dac <fsm_traffic_light+0x7d4>)
 8001c50:	2202      	movs	r2, #2
 8001c52:	601a      	str	r2, [r3, #0]
			print_value(redTime, newRed);
 8001c54:	4b54      	ldr	r3, [pc, #336]	; (8001da8 <fsm_traffic_light+0x7d0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a54      	ldr	r2, [pc, #336]	; (8001dac <fsm_traffic_light+0x7d4>)
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe faca 	bl	80001f8 <print_value>
		}

		if (isButtonPressed(3) == 1){
 8001c64:	2003      	movs	r0, #3
 8001c66:	f7fe fae3 	bl	8000230 <isButtonPressed>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	f040 813c 	bne.w	8001eea <fsm_traffic_light+0x912>
			redTime = newRed;
 8001c72:	4b4e      	ldr	r3, [pc, #312]	; (8001dac <fsm_traffic_light+0x7d4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a4c      	ldr	r2, [pc, #304]	; (8001da8 <fsm_traffic_light+0x7d0>)
 8001c78:	6013      	str	r3, [r2, #0]
			print_string("Saved Red time: ");
 8001c7a:	4857      	ldr	r0, [pc, #348]	; (8001dd8 <fsm_traffic_light+0x800>)
 8001c7c:	f7fe faa8 	bl	80001d0 <print_string>
			print_value(redTime, newRed);
 8001c80:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <fsm_traffic_light+0x7d0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a49      	ldr	r2, [pc, #292]	; (8001dac <fsm_traffic_light+0x7d4>)
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fab4 	bl	80001f8 <print_value>
		}
		break;
 8001c90:	e12b      	b.n	8001eea <fsm_traffic_light+0x912>

	case SET_YELLOW:
		onTFYellow1();
 8001c92:	f7fe fc69 	bl	8000568 <onTFYellow1>
		onTFYellow2();
 8001c96:	f7fe fc9b 	bl	80005d0 <onTFYellow2>

		if (isButtonPressed(1) == 1){
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f7fe fac8 	bl	8000230 <isButtonPressed>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d10f      	bne.n	8001cc6 <fsm_traffic_light+0x6ee>
			led_status = SET_GREEN;
 8001ca6:	4b42      	ldr	r3, [pc, #264]	; (8001db0 <fsm_traffic_light+0x7d8>)
 8001ca8:	220b      	movs	r2, #11
 8001caa:	701a      	strb	r2, [r3, #0]
			print_string("TUNING MODE: SET GREEN LED\r\n");
 8001cac:	484b      	ldr	r0, [pc, #300]	; (8001ddc <fsm_traffic_light+0x804>)
 8001cae:	f7fe fa8f 	bl	80001d0 <print_string>
			print_value(greenTime, newGreen);
 8001cb2:	4b42      	ldr	r3, [pc, #264]	; (8001dbc <fsm_traffic_light+0x7e4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a4a      	ldr	r2, [pc, #296]	; (8001de0 <fsm_traffic_light+0x808>)
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fa9b 	bl	80001f8 <print_value>
			offAllLed();
 8001cc2:	f7fe fbeb 	bl	800049c <offAllLed>
		}
		if (isButtonPressed(2) == 1){
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f7fe fab2 	bl	8000230 <isButtonPressed>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d115      	bne.n	8001cfe <fsm_traffic_light+0x726>
			newYellow++;
 8001cd2:	4b40      	ldr	r3, [pc, #256]	; (8001dd4 <fsm_traffic_light+0x7fc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4a3e      	ldr	r2, [pc, #248]	; (8001dd4 <fsm_traffic_light+0x7fc>)
 8001cda:	6013      	str	r3, [r2, #0]
			if (newYellow >= redTime) newYellow = 1;
 8001cdc:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <fsm_traffic_light+0x7fc>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <fsm_traffic_light+0x7d0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	db02      	blt.n	8001cee <fsm_traffic_light+0x716>
 8001ce8:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <fsm_traffic_light+0x7fc>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
			print_value(yellowTime, newYellow);
 8001cee:	4b37      	ldr	r3, [pc, #220]	; (8001dcc <fsm_traffic_light+0x7f4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a38      	ldr	r2, [pc, #224]	; (8001dd4 <fsm_traffic_light+0x7fc>)
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fa7d 	bl	80001f8 <print_value>
		}

		if (isButtonPressed(3) == 1){
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f7fe fa96 	bl	8000230 <isButtonPressed>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	f040 80f1 	bne.w	8001eee <fsm_traffic_light+0x916>
			yellowTime=newYellow;
 8001d0c:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <fsm_traffic_light+0x7fc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a2e      	ldr	r2, [pc, #184]	; (8001dcc <fsm_traffic_light+0x7f4>)
 8001d12:	6013      	str	r3, [r2, #0]
			print_string("Saved Yellow time: ");
 8001d14:	4833      	ldr	r0, [pc, #204]	; (8001de4 <fsm_traffic_light+0x80c>)
 8001d16:	f7fe fa5b 	bl	80001d0 <print_string>
			print_value(yellowTime, newYellow);
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <fsm_traffic_light+0x7f4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a2d      	ldr	r2, [pc, #180]	; (8001dd4 <fsm_traffic_light+0x7fc>)
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fa67 	bl	80001f8 <print_value>
		}
		break;
 8001d2a:	e0e0      	b.n	8001eee <fsm_traffic_light+0x916>

	case SET_GREEN:
		onTFGreen1();
 8001d2c:	f7fe fc08 	bl	8000540 <onTFGreen1>
		onTFGreen2();
 8001d30:	f7fe fc3e 	bl	80005b0 <onTFGreen2>

		if (isButtonPressed(1) == 1){
 8001d34:	2001      	movs	r0, #1
 8001d36:	f7fe fa7b 	bl	8000230 <isButtonPressed>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	f040 8089 	bne.w	8001e54 <fsm_traffic_light+0x87c>
			greenTime = redTime - yellowTime;
 8001d42:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <fsm_traffic_light+0x7d0>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <fsm_traffic_light+0x7f4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <fsm_traffic_light+0x7e4>)
 8001d4e:	6013      	str	r3, [r2, #0]
			print_string("AUTOMATION MODE\r\n");
 8001d50:	4819      	ldr	r0, [pc, #100]	; (8001db8 <fsm_traffic_light+0x7e0>)
 8001d52:	f7fe fa3d 	bl	80001d0 <print_string>

			if (temp_status == REDGREEN){
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <fsm_traffic_light+0x7dc>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d10e      	bne.n	8001d7c <fsm_traffic_light+0x7a4>
				timerRoad1 = redTime;
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <fsm_traffic_light+0x7d0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a17      	ldr	r2, [pc, #92]	; (8001dc0 <fsm_traffic_light+0x7e8>)
 8001d64:	6013      	str	r3, [r2, #0]
				timerRoad2 = greenTime;
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <fsm_traffic_light+0x7e4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <fsm_traffic_light+0x7ec>)
 8001d6c:	6013      	str	r3, [r2, #0]
				print_string("First status: REDGREEN\r\n");
 8001d6e:	481e      	ldr	r0, [pc, #120]	; (8001de8 <fsm_traffic_light+0x810>)
 8001d70:	f7fe fa2e 	bl	80001d0 <print_string>
				led_status = REDGREEN;
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <fsm_traffic_light+0x7d8>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	e05e      	b.n	8001e3a <fsm_traffic_light+0x862>
			}

			else if (temp_status == REDYELLOW){
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <fsm_traffic_light+0x7dc>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d135      	bne.n	8001df0 <fsm_traffic_light+0x818>
				timerRoad1 = redTime;
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <fsm_traffic_light+0x7d0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <fsm_traffic_light+0x7e8>)
 8001d8a:	6013      	str	r3, [r2, #0]
				timerRoad2 = yellowTime;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <fsm_traffic_light+0x7f4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <fsm_traffic_light+0x7ec>)
 8001d92:	6013      	str	r3, [r2, #0]
				print_string("First status: REDYELLOW\r\n");
 8001d94:	4815      	ldr	r0, [pc, #84]	; (8001dec <fsm_traffic_light+0x814>)
 8001d96:	f7fe fa1b 	bl	80001d0 <print_string>
				led_status = REDYELLOW;
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <fsm_traffic_light+0x7d8>)
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	701a      	strb	r2, [r3, #0]
 8001da0:	e04b      	b.n	8001e3a <fsm_traffic_light+0x862>
 8001da2:	bf00      	nop
 8001da4:	08005488 	.word	0x08005488
 8001da8:	20000058 	.word	0x20000058
 8001dac:	20000110 	.word	0x20000110
 8001db0:	2000010c 	.word	0x2000010c
 8001db4:	2000010d 	.word	0x2000010d
 8001db8:	08005464 	.word	0x08005464
 8001dbc:	2000005c 	.word	0x2000005c
 8001dc0:	20000124 	.word	0x20000124
 8001dc4:	20000128 	.word	0x20000128
 8001dc8:	080054a4 	.word	0x080054a4
 8001dcc:	20000060 	.word	0x20000060
 8001dd0:	080054b8 	.word	0x080054b8
 8001dd4:	20000118 	.word	0x20000118
 8001dd8:	080054d8 	.word	0x080054d8
 8001ddc:	080054ec 	.word	0x080054ec
 8001de0:	20000114 	.word	0x20000114
 8001de4:	0800550c 	.word	0x0800550c
 8001de8:	08005520 	.word	0x08005520
 8001dec:	0800553c 	.word	0x0800553c
			}

			else if (temp_status == YELLOWRED){
 8001df0:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <fsm_traffic_light+0x920>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d10e      	bne.n	8001e16 <fsm_traffic_light+0x83e>
				timerRoad1 = yellowTime;
 8001df8:	4b40      	ldr	r3, [pc, #256]	; (8001efc <fsm_traffic_light+0x924>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a40      	ldr	r2, [pc, #256]	; (8001f00 <fsm_traffic_light+0x928>)
 8001dfe:	6013      	str	r3, [r2, #0]
				timerRoad2 = redTime;
 8001e00:	4b40      	ldr	r3, [pc, #256]	; (8001f04 <fsm_traffic_light+0x92c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a40      	ldr	r2, [pc, #256]	; (8001f08 <fsm_traffic_light+0x930>)
 8001e06:	6013      	str	r3, [r2, #0]
				print_string("First status: YELLOWRED\r\n");
 8001e08:	4840      	ldr	r0, [pc, #256]	; (8001f0c <fsm_traffic_light+0x934>)
 8001e0a:	f7fe f9e1 	bl	80001d0 <print_string>
				led_status = YELLOWRED;
 8001e0e:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <fsm_traffic_light+0x938>)
 8001e10:	2204      	movs	r2, #4
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	e011      	b.n	8001e3a <fsm_traffic_light+0x862>
			}

			else if (temp_status == GREENRED){
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <fsm_traffic_light+0x920>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d10d      	bne.n	8001e3a <fsm_traffic_light+0x862>
				timerRoad1 = greenTime;
 8001e1e:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <fsm_traffic_light+0x93c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a37      	ldr	r2, [pc, #220]	; (8001f00 <fsm_traffic_light+0x928>)
 8001e24:	6013      	str	r3, [r2, #0]
				timerRoad2 = redTime;
 8001e26:	4b37      	ldr	r3, [pc, #220]	; (8001f04 <fsm_traffic_light+0x92c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a37      	ldr	r2, [pc, #220]	; (8001f08 <fsm_traffic_light+0x930>)
 8001e2c:	6013      	str	r3, [r2, #0]
				print_string("First status: GREENRED\r\n");
 8001e2e:	483a      	ldr	r0, [pc, #232]	; (8001f18 <fsm_traffic_light+0x940>)
 8001e30:	f7fe f9ce 	bl	80001d0 <print_string>
				led_status = GREENRED;
 8001e34:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <fsm_traffic_light+0x938>)
 8001e36:	2203      	movs	r2, #3
 8001e38:	701a      	strb	r2, [r3, #0]
			}


			setTimer1(greenTime*100);
 8001e3a:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <fsm_traffic_light+0x93c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2264      	movs	r2, #100	; 0x64
 8001e40:	fb02 f303 	mul.w	r3, r2, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f959 	bl	80010fc <setTimer1>
			setTimer2(100);
 8001e4a:	2064      	movs	r0, #100	; 0x64
 8001e4c:	f7ff f96a 	bl	8001124 <setTimer2>

			offAllLed();
 8001e50:	f7fe fb24 	bl	800049c <offAllLed>
		}

		if (isButtonPressed(2) == 1){
 8001e54:	2002      	movs	r0, #2
 8001e56:	f7fe f9eb 	bl	8000230 <isButtonPressed>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d115      	bne.n	8001e8c <fsm_traffic_light+0x8b4>
			newGreen++;
 8001e60:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <fsm_traffic_light+0x944>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	4a2d      	ldr	r2, [pc, #180]	; (8001f1c <fsm_traffic_light+0x944>)
 8001e68:	6013      	str	r3, [r2, #0]
			if (newGreen >= redTime) newGreen = 1;
 8001e6a:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <fsm_traffic_light+0x944>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <fsm_traffic_light+0x92c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	db02      	blt.n	8001e7c <fsm_traffic_light+0x8a4>
 8001e76:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <fsm_traffic_light+0x944>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
			print_value(greenTime, newGreen);
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <fsm_traffic_light+0x93c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <fsm_traffic_light+0x944>)
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe f9b6 	bl	80001f8 <print_value>
		}

		if (isButtonPressed(3) == 1){
 8001e8c:	2003      	movs	r0, #3
 8001e8e:	f7fe f9cf 	bl	8000230 <isButtonPressed>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d12c      	bne.n	8001ef2 <fsm_traffic_light+0x91a>
			greenTime = newGreen;
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <fsm_traffic_light+0x944>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <fsm_traffic_light+0x93c>)
 8001e9e:	6013      	str	r3, [r2, #0]
			yellowTime = redTime - greenTime;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <fsm_traffic_light+0x92c>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <fsm_traffic_light+0x93c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	4a14      	ldr	r2, [pc, #80]	; (8001efc <fsm_traffic_light+0x924>)
 8001eac:	6013      	str	r3, [r2, #0]
			print_string("Saved Green time: ");
 8001eae:	481c      	ldr	r0, [pc, #112]	; (8001f20 <fsm_traffic_light+0x948>)
 8001eb0:	f7fe f98e 	bl	80001d0 <print_string>
			print_value(greenTime, newGreen);
 8001eb4:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <fsm_traffic_light+0x93c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <fsm_traffic_light+0x944>)
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe f99a 	bl	80001f8 <print_value>
		}
		break;
 8001ec4:	e015      	b.n	8001ef2 <fsm_traffic_light+0x91a>


	default:
		break;
 8001ec6:	bf00      	nop
 8001ec8:	e014      	b.n	8001ef4 <fsm_traffic_light+0x91c>
		break;
 8001eca:	bf00      	nop
 8001ecc:	e012      	b.n	8001ef4 <fsm_traffic_light+0x91c>
		break;
 8001ece:	bf00      	nop
 8001ed0:	e010      	b.n	8001ef4 <fsm_traffic_light+0x91c>
		break;
 8001ed2:	bf00      	nop
 8001ed4:	e00e      	b.n	8001ef4 <fsm_traffic_light+0x91c>
		break;
 8001ed6:	bf00      	nop
 8001ed8:	e00c      	b.n	8001ef4 <fsm_traffic_light+0x91c>
		break;
 8001eda:	bf00      	nop
 8001edc:	e00a      	b.n	8001ef4 <fsm_traffic_light+0x91c>
		break;
 8001ede:	bf00      	nop
 8001ee0:	e008      	b.n	8001ef4 <fsm_traffic_light+0x91c>
		break;
 8001ee2:	bf00      	nop
 8001ee4:	e006      	b.n	8001ef4 <fsm_traffic_light+0x91c>
		break;
 8001ee6:	bf00      	nop
 8001ee8:	e004      	b.n	8001ef4 <fsm_traffic_light+0x91c>
		break;
 8001eea:	bf00      	nop
 8001eec:	e002      	b.n	8001ef4 <fsm_traffic_light+0x91c>
		break;
 8001eee:	bf00      	nop
 8001ef0:	e000      	b.n	8001ef4 <fsm_traffic_light+0x91c>
		break;
 8001ef2:	bf00      	nop
	}


}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	2000010d 	.word	0x2000010d
 8001efc:	20000060 	.word	0x20000060
 8001f00:	20000124 	.word	0x20000124
 8001f04:	20000058 	.word	0x20000058
 8001f08:	20000128 	.word	0x20000128
 8001f0c:	08005558 	.word	0x08005558
 8001f10:	2000010c 	.word	0x2000010c
 8001f14:	2000005c 	.word	0x2000005c
 8001f18:	08005574 	.word	0x08005574
 8001f1c:	20000114 	.word	0x20000114
 8001f20:	08005590 	.word	0x08005590

08001f24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f24:	f7ff fb52 	bl	80015cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f2a:	490c      	ldr	r1, [pc, #48]	; (8001f5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f40:	4c09      	ldr	r4, [pc, #36]	; (8001f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f002 fdef 	bl	8004b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f52:	f7fe fb81 	bl	8000658 <main>
  bx lr
 8001f56:	4770      	bx	lr
  ldr r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f5c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001f60:	0800560c 	.word	0x0800560c
  ldr r2, =_sbss
 8001f64:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001f68:	20000588 	.word	0x20000588

08001f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <ADC1_2_IRQHandler>
	...

08001f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <HAL_Init+0x28>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <HAL_Init+0x28>)
 8001f7a:	f043 0310 	orr.w	r3, r3, #16
 8001f7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f80:	2003      	movs	r0, #3
 8001f82:	f000 f923 	bl	80021cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f86:	200f      	movs	r0, #15
 8001f88:	f000 f808 	bl	8001f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f8c:	f7ff f9ac 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40022000 	.word	0x40022000

08001f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_InitTick+0x54>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_InitTick+0x58>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f93b 	bl	8002236 <HAL_SYSTICK_Config>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00e      	b.n	8001fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b0f      	cmp	r3, #15
 8001fce:	d80a      	bhi.n	8001fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f000 f903 	bl	80021e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fdc:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <HAL_InitTick+0x5c>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e000      	b.n	8001fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000068 	.word	0x20000068
 8001ff4:	20000070 	.word	0x20000070
 8001ff8:	2000006c 	.word	0x2000006c

08001ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_IncTick+0x1c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_IncTick+0x20>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a03      	ldr	r2, [pc, #12]	; (800201c <HAL_IncTick+0x20>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	20000070 	.word	0x20000070
 800201c:	20000574 	.word	0x20000574

08002020 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return uwTick;
 8002024:	4b02      	ldr	r3, [pc, #8]	; (8002030 <HAL_GetTick+0x10>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	20000574 	.word	0x20000574

08002034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002050:	4013      	ands	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800205c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002066:	4a04      	ldr	r2, [pc, #16]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	60d3      	str	r3, [r2, #12]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <__NVIC_GetPriorityGrouping+0x18>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f003 0307 	and.w	r3, r3, #7
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	db0b      	blt.n	80020c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	4906      	ldr	r1, [pc, #24]	; (80020cc <__NVIC_EnableIRQ+0x34>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2001      	movs	r0, #1
 80020ba:	fa00 f202 	lsl.w	r2, r0, r2
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	6039      	str	r1, [r7, #0]
 80020da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	db0a      	blt.n	80020fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	490c      	ldr	r1, [pc, #48]	; (800211c <__NVIC_SetPriority+0x4c>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	0112      	lsls	r2, r2, #4
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	440b      	add	r3, r1
 80020f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f8:	e00a      	b.n	8002110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4908      	ldr	r1, [pc, #32]	; (8002120 <__NVIC_SetPriority+0x50>)
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	3b04      	subs	r3, #4
 8002108:	0112      	lsls	r2, r2, #4
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	440b      	add	r3, r1
 800210e:	761a      	strb	r2, [r3, #24]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000e100 	.word	0xe000e100
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002124:	b480      	push	{r7}
 8002126:	b089      	sub	sp, #36	; 0x24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f1c3 0307 	rsb	r3, r3, #7
 800213e:	2b04      	cmp	r3, #4
 8002140:	bf28      	it	cs
 8002142:	2304      	movcs	r3, #4
 8002144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3304      	adds	r3, #4
 800214a:	2b06      	cmp	r3, #6
 800214c:	d902      	bls.n	8002154 <NVIC_EncodePriority+0x30>
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3b03      	subs	r3, #3
 8002152:	e000      	b.n	8002156 <NVIC_EncodePriority+0x32>
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	401a      	ands	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800216c:	f04f 31ff 	mov.w	r1, #4294967295
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	43d9      	mvns	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	4313      	orrs	r3, r2
         );
}
 800217e:	4618      	mov	r0, r3
 8002180:	3724      	adds	r7, #36	; 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002198:	d301      	bcc.n	800219e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219a:	2301      	movs	r3, #1
 800219c:	e00f      	b.n	80021be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <SysTick_Config+0x40>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a6:	210f      	movs	r1, #15
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f7ff ff90 	bl	80020d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <SysTick_Config+0x40>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <SysTick_Config+0x40>)
 80021b8:	2207      	movs	r2, #7
 80021ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	e000e010 	.word	0xe000e010

080021cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff2d 	bl	8002034 <__NVIC_SetPriorityGrouping>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f4:	f7ff ff42 	bl	800207c <__NVIC_GetPriorityGrouping>
 80021f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	6978      	ldr	r0, [r7, #20]
 8002200:	f7ff ff90 	bl	8002124 <NVIC_EncodePriority>
 8002204:	4602      	mov	r2, r0
 8002206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff5f 	bl	80020d0 <__NVIC_SetPriority>
}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff35 	bl	8002098 <__NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffa2 	bl	8002188 <SysTick_Config>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800224e:	b480      	push	{r7}
 8002250:	b085      	sub	sp, #20
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d008      	beq.n	8002278 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2204      	movs	r2, #4
 800226a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e020      	b.n	80022ba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 020e 	bic.w	r2, r2, #14
 8002286:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0201 	bic.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f202 	lsl.w	r2, r1, r2
 80022a6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d005      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2204      	movs	r2, #4
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	e051      	b.n	800238c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 020e 	bic.w	r2, r2, #14
 80022f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a22      	ldr	r2, [pc, #136]	; (8002398 <HAL_DMA_Abort_IT+0xd4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d029      	beq.n	8002366 <HAL_DMA_Abort_IT+0xa2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a21      	ldr	r2, [pc, #132]	; (800239c <HAL_DMA_Abort_IT+0xd8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d022      	beq.n	8002362 <HAL_DMA_Abort_IT+0x9e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1f      	ldr	r2, [pc, #124]	; (80023a0 <HAL_DMA_Abort_IT+0xdc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01a      	beq.n	800235c <HAL_DMA_Abort_IT+0x98>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a1e      	ldr	r2, [pc, #120]	; (80023a4 <HAL_DMA_Abort_IT+0xe0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d012      	beq.n	8002356 <HAL_DMA_Abort_IT+0x92>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <HAL_DMA_Abort_IT+0xe4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00a      	beq.n	8002350 <HAL_DMA_Abort_IT+0x8c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <HAL_DMA_Abort_IT+0xe8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d102      	bne.n	800234a <HAL_DMA_Abort_IT+0x86>
 8002344:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002348:	e00e      	b.n	8002368 <HAL_DMA_Abort_IT+0xa4>
 800234a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800234e:	e00b      	b.n	8002368 <HAL_DMA_Abort_IT+0xa4>
 8002350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002354:	e008      	b.n	8002368 <HAL_DMA_Abort_IT+0xa4>
 8002356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800235a:	e005      	b.n	8002368 <HAL_DMA_Abort_IT+0xa4>
 800235c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002360:	e002      	b.n	8002368 <HAL_DMA_Abort_IT+0xa4>
 8002362:	2310      	movs	r3, #16
 8002364:	e000      	b.n	8002368 <HAL_DMA_Abort_IT+0xa4>
 8002366:	2301      	movs	r3, #1
 8002368:	4a11      	ldr	r2, [pc, #68]	; (80023b0 <HAL_DMA_Abort_IT+0xec>)
 800236a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
    } 
  }
  return status;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40020008 	.word	0x40020008
 800239c:	4002001c 	.word	0x4002001c
 80023a0:	40020030 	.word	0x40020030
 80023a4:	40020044 	.word	0x40020044
 80023a8:	40020058 	.word	0x40020058
 80023ac:	4002006c 	.word	0x4002006c
 80023b0:	40020000 	.word	0x40020000

080023b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b08b      	sub	sp, #44	; 0x2c
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c6:	e169      	b.n	800269c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023c8:	2201      	movs	r2, #1
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f040 8158 	bne.w	8002696 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4a9a      	ldr	r2, [pc, #616]	; (8002654 <HAL_GPIO_Init+0x2a0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d05e      	beq.n	80024ae <HAL_GPIO_Init+0xfa>
 80023f0:	4a98      	ldr	r2, [pc, #608]	; (8002654 <HAL_GPIO_Init+0x2a0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d875      	bhi.n	80024e2 <HAL_GPIO_Init+0x12e>
 80023f6:	4a98      	ldr	r2, [pc, #608]	; (8002658 <HAL_GPIO_Init+0x2a4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d058      	beq.n	80024ae <HAL_GPIO_Init+0xfa>
 80023fc:	4a96      	ldr	r2, [pc, #600]	; (8002658 <HAL_GPIO_Init+0x2a4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d86f      	bhi.n	80024e2 <HAL_GPIO_Init+0x12e>
 8002402:	4a96      	ldr	r2, [pc, #600]	; (800265c <HAL_GPIO_Init+0x2a8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d052      	beq.n	80024ae <HAL_GPIO_Init+0xfa>
 8002408:	4a94      	ldr	r2, [pc, #592]	; (800265c <HAL_GPIO_Init+0x2a8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d869      	bhi.n	80024e2 <HAL_GPIO_Init+0x12e>
 800240e:	4a94      	ldr	r2, [pc, #592]	; (8002660 <HAL_GPIO_Init+0x2ac>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d04c      	beq.n	80024ae <HAL_GPIO_Init+0xfa>
 8002414:	4a92      	ldr	r2, [pc, #584]	; (8002660 <HAL_GPIO_Init+0x2ac>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d863      	bhi.n	80024e2 <HAL_GPIO_Init+0x12e>
 800241a:	4a92      	ldr	r2, [pc, #584]	; (8002664 <HAL_GPIO_Init+0x2b0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d046      	beq.n	80024ae <HAL_GPIO_Init+0xfa>
 8002420:	4a90      	ldr	r2, [pc, #576]	; (8002664 <HAL_GPIO_Init+0x2b0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d85d      	bhi.n	80024e2 <HAL_GPIO_Init+0x12e>
 8002426:	2b12      	cmp	r3, #18
 8002428:	d82a      	bhi.n	8002480 <HAL_GPIO_Init+0xcc>
 800242a:	2b12      	cmp	r3, #18
 800242c:	d859      	bhi.n	80024e2 <HAL_GPIO_Init+0x12e>
 800242e:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <HAL_GPIO_Init+0x80>)
 8002430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002434:	080024af 	.word	0x080024af
 8002438:	08002489 	.word	0x08002489
 800243c:	0800249b 	.word	0x0800249b
 8002440:	080024dd 	.word	0x080024dd
 8002444:	080024e3 	.word	0x080024e3
 8002448:	080024e3 	.word	0x080024e3
 800244c:	080024e3 	.word	0x080024e3
 8002450:	080024e3 	.word	0x080024e3
 8002454:	080024e3 	.word	0x080024e3
 8002458:	080024e3 	.word	0x080024e3
 800245c:	080024e3 	.word	0x080024e3
 8002460:	080024e3 	.word	0x080024e3
 8002464:	080024e3 	.word	0x080024e3
 8002468:	080024e3 	.word	0x080024e3
 800246c:	080024e3 	.word	0x080024e3
 8002470:	080024e3 	.word	0x080024e3
 8002474:	080024e3 	.word	0x080024e3
 8002478:	08002491 	.word	0x08002491
 800247c:	080024a5 	.word	0x080024a5
 8002480:	4a79      	ldr	r2, [pc, #484]	; (8002668 <HAL_GPIO_Init+0x2b4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d013      	beq.n	80024ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002486:	e02c      	b.n	80024e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	623b      	str	r3, [r7, #32]
          break;
 800248e:	e029      	b.n	80024e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	3304      	adds	r3, #4
 8002496:	623b      	str	r3, [r7, #32]
          break;
 8002498:	e024      	b.n	80024e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	3308      	adds	r3, #8
 80024a0:	623b      	str	r3, [r7, #32]
          break;
 80024a2:	e01f      	b.n	80024e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	330c      	adds	r3, #12
 80024aa:	623b      	str	r3, [r7, #32]
          break;
 80024ac:	e01a      	b.n	80024e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024b6:	2304      	movs	r3, #4
 80024b8:	623b      	str	r3, [r7, #32]
          break;
 80024ba:	e013      	b.n	80024e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d105      	bne.n	80024d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024c4:	2308      	movs	r3, #8
 80024c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	611a      	str	r2, [r3, #16]
          break;
 80024ce:	e009      	b.n	80024e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024d0:	2308      	movs	r3, #8
 80024d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	615a      	str	r2, [r3, #20]
          break;
 80024da:	e003      	b.n	80024e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024dc:	2300      	movs	r3, #0
 80024de:	623b      	str	r3, [r7, #32]
          break;
 80024e0:	e000      	b.n	80024e4 <HAL_GPIO_Init+0x130>
          break;
 80024e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2bff      	cmp	r3, #255	; 0xff
 80024e8:	d801      	bhi.n	80024ee <HAL_GPIO_Init+0x13a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	e001      	b.n	80024f2 <HAL_GPIO_Init+0x13e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3304      	adds	r3, #4
 80024f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	2bff      	cmp	r3, #255	; 0xff
 80024f8:	d802      	bhi.n	8002500 <HAL_GPIO_Init+0x14c>
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	e002      	b.n	8002506 <HAL_GPIO_Init+0x152>
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	3b08      	subs	r3, #8
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	210f      	movs	r1, #15
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	401a      	ands	r2, r3
 8002518:	6a39      	ldr	r1, [r7, #32]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	fa01 f303 	lsl.w	r3, r1, r3
 8002520:	431a      	orrs	r2, r3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80b1 	beq.w	8002696 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002534:	4b4d      	ldr	r3, [pc, #308]	; (800266c <HAL_GPIO_Init+0x2b8>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	4a4c      	ldr	r2, [pc, #304]	; (800266c <HAL_GPIO_Init+0x2b8>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6193      	str	r3, [r2, #24]
 8002540:	4b4a      	ldr	r3, [pc, #296]	; (800266c <HAL_GPIO_Init+0x2b8>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800254c:	4a48      	ldr	r2, [pc, #288]	; (8002670 <HAL_GPIO_Init+0x2bc>)
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	3302      	adds	r3, #2
 8002554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002558:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	220f      	movs	r2, #15
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4013      	ands	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a40      	ldr	r2, [pc, #256]	; (8002674 <HAL_GPIO_Init+0x2c0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d013      	beq.n	80025a0 <HAL_GPIO_Init+0x1ec>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3f      	ldr	r2, [pc, #252]	; (8002678 <HAL_GPIO_Init+0x2c4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d00d      	beq.n	800259c <HAL_GPIO_Init+0x1e8>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a3e      	ldr	r2, [pc, #248]	; (800267c <HAL_GPIO_Init+0x2c8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d007      	beq.n	8002598 <HAL_GPIO_Init+0x1e4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a3d      	ldr	r2, [pc, #244]	; (8002680 <HAL_GPIO_Init+0x2cc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d101      	bne.n	8002594 <HAL_GPIO_Init+0x1e0>
 8002590:	2303      	movs	r3, #3
 8002592:	e006      	b.n	80025a2 <HAL_GPIO_Init+0x1ee>
 8002594:	2304      	movs	r3, #4
 8002596:	e004      	b.n	80025a2 <HAL_GPIO_Init+0x1ee>
 8002598:	2302      	movs	r3, #2
 800259a:	e002      	b.n	80025a2 <HAL_GPIO_Init+0x1ee>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <HAL_GPIO_Init+0x1ee>
 80025a0:	2300      	movs	r3, #0
 80025a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a4:	f002 0203 	and.w	r2, r2, #3
 80025a8:	0092      	lsls	r2, r2, #2
 80025aa:	4093      	lsls	r3, r2
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025b2:	492f      	ldr	r1, [pc, #188]	; (8002670 <HAL_GPIO_Init+0x2bc>)
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	3302      	adds	r3, #2
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d006      	beq.n	80025da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025cc:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <HAL_GPIO_Init+0x2d0>)
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	492c      	ldr	r1, [pc, #176]	; (8002684 <HAL_GPIO_Init+0x2d0>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	608b      	str	r3, [r1, #8]
 80025d8:	e006      	b.n	80025e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <HAL_GPIO_Init+0x2d0>)
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	4928      	ldr	r1, [pc, #160]	; (8002684 <HAL_GPIO_Init+0x2d0>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d006      	beq.n	8002602 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025f4:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_GPIO_Init+0x2d0>)
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	4922      	ldr	r1, [pc, #136]	; (8002684 <HAL_GPIO_Init+0x2d0>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60cb      	str	r3, [r1, #12]
 8002600:	e006      	b.n	8002610 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <HAL_GPIO_Init+0x2d0>)
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	43db      	mvns	r3, r3
 800260a:	491e      	ldr	r1, [pc, #120]	; (8002684 <HAL_GPIO_Init+0x2d0>)
 800260c:	4013      	ands	r3, r2
 800260e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d006      	beq.n	800262a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_GPIO_Init+0x2d0>)
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4918      	ldr	r1, [pc, #96]	; (8002684 <HAL_GPIO_Init+0x2d0>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
 8002628:	e006      	b.n	8002638 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800262a:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_GPIO_Init+0x2d0>)
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	43db      	mvns	r3, r3
 8002632:	4914      	ldr	r1, [pc, #80]	; (8002684 <HAL_GPIO_Init+0x2d0>)
 8002634:	4013      	ands	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d021      	beq.n	8002688 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_GPIO_Init+0x2d0>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	490e      	ldr	r1, [pc, #56]	; (8002684 <HAL_GPIO_Init+0x2d0>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
 8002650:	e021      	b.n	8002696 <HAL_GPIO_Init+0x2e2>
 8002652:	bf00      	nop
 8002654:	10320000 	.word	0x10320000
 8002658:	10310000 	.word	0x10310000
 800265c:	10220000 	.word	0x10220000
 8002660:	10210000 	.word	0x10210000
 8002664:	10120000 	.word	0x10120000
 8002668:	10110000 	.word	0x10110000
 800266c:	40021000 	.word	0x40021000
 8002670:	40010000 	.word	0x40010000
 8002674:	40010800 	.word	0x40010800
 8002678:	40010c00 	.word	0x40010c00
 800267c:	40011000 	.word	0x40011000
 8002680:	40011400 	.word	0x40011400
 8002684:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_GPIO_Init+0x304>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	43db      	mvns	r3, r3
 8002690:	4909      	ldr	r1, [pc, #36]	; (80026b8 <HAL_GPIO_Init+0x304>)
 8002692:	4013      	ands	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	3301      	adds	r3, #1
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	fa22 f303 	lsr.w	r3, r2, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f47f ae8e 	bne.w	80023c8 <HAL_GPIO_Init+0x14>
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	372c      	adds	r7, #44	; 0x2c
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	40010400 	.word	0x40010400

080026bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e001      	b.n	80026de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026de:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	807b      	strh	r3, [r7, #2]
 80026f6:	4613      	mov	r3, r2
 80026f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026fa:	787b      	ldrb	r3, [r7, #1]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002700:	887a      	ldrh	r2, [r7, #2]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002706:	e003      	b.n	8002710 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	041a      	lsls	r2, r3, #16
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	611a      	str	r2, [r3, #16]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800272c:	887a      	ldrh	r2, [r7, #2]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4013      	ands	r3, r2
 8002732:	041a      	lsls	r2, r3, #16
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	43d9      	mvns	r1, r3
 8002738:	887b      	ldrh	r3, [r7, #2]
 800273a:	400b      	ands	r3, r1
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	611a      	str	r2, [r3, #16]
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e26c      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8087 	beq.w	800287a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800276c:	4b92      	ldr	r3, [pc, #584]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b04      	cmp	r3, #4
 8002776:	d00c      	beq.n	8002792 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002778:	4b8f      	ldr	r3, [pc, #572]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	d112      	bne.n	80027aa <HAL_RCC_OscConfig+0x5e>
 8002784:	4b8c      	ldr	r3, [pc, #560]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d10b      	bne.n	80027aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002792:	4b89      	ldr	r3, [pc, #548]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d06c      	beq.n	8002878 <HAL_RCC_OscConfig+0x12c>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d168      	bne.n	8002878 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e246      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x76>
 80027b4:	4b80      	ldr	r3, [pc, #512]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a7f      	ldr	r2, [pc, #508]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	e02e      	b.n	8002820 <HAL_RCC_OscConfig+0xd4>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x98>
 80027ca:	4b7b      	ldr	r3, [pc, #492]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a7a      	ldr	r2, [pc, #488]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b78      	ldr	r3, [pc, #480]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a77      	ldr	r2, [pc, #476]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e01d      	b.n	8002820 <HAL_RCC_OscConfig+0xd4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0xbc>
 80027ee:	4b72      	ldr	r3, [pc, #456]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a71      	ldr	r2, [pc, #452]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b6f      	ldr	r3, [pc, #444]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6e      	ldr	r2, [pc, #440]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0xd4>
 8002808:	4b6b      	ldr	r3, [pc, #428]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a6a      	ldr	r2, [pc, #424]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800280e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a67      	ldr	r2, [pc, #412]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800281a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7ff fbfa 	bl	8002020 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002830:	f7ff fbf6 	bl	8002020 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	; 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1fa      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b5d      	ldr	r3, [pc, #372]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0xe4>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7ff fbe6 	bl	8002020 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002858:	f7ff fbe2 	bl	8002020 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1e6      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	4b53      	ldr	r3, [pc, #332]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x10c>
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d063      	beq.n	800294e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002886:	4b4c      	ldr	r3, [pc, #304]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002892:	4b49      	ldr	r3, [pc, #292]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b08      	cmp	r3, #8
 800289c:	d11c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x18c>
 800289e:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d116      	bne.n	80028d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	4b43      	ldr	r3, [pc, #268]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_RCC_OscConfig+0x176>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e1ba      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c2:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4939      	ldr	r1, [pc, #228]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	e03a      	b.n	800294e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e0:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7ff fb9b 	bl	8002020 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ee:	f7ff fb97 	bl	8002020 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e19b      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4927      	ldr	r1, [pc, #156]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]
 8002920:	e015      	b.n	800294e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002922:	4b26      	ldr	r3, [pc, #152]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff fb7a 	bl	8002020 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002930:	f7ff fb76 	bl	8002020 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e17a      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d03a      	beq.n	80029d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d019      	beq.n	8002996 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002962:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <HAL_RCC_OscConfig+0x274>)
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002968:	f7ff fb5a 	bl	8002020 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002970:	f7ff fb56 	bl	8002020 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e15a      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800298e:	2001      	movs	r0, #1
 8002990:	f000 facc 	bl	8002f2c <RCC_Delay>
 8002994:	e01c      	b.n	80029d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_RCC_OscConfig+0x274>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299c:	f7ff fb40 	bl	8002020 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a2:	e00f      	b.n	80029c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a4:	f7ff fb3c 	bl	8002020 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d908      	bls.n	80029c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e140      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
 80029bc:	42420000 	.word	0x42420000
 80029c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c4:	4b9e      	ldr	r3, [pc, #632]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e9      	bne.n	80029a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80a6 	beq.w	8002b2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e2:	4b97      	ldr	r3, [pc, #604]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10d      	bne.n	8002a0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	4b94      	ldr	r3, [pc, #592]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4a93      	ldr	r2, [pc, #588]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f8:	61d3      	str	r3, [r2, #28]
 80029fa:	4b91      	ldr	r3, [pc, #580]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0a:	4b8e      	ldr	r3, [pc, #568]	; (8002c44 <HAL_RCC_OscConfig+0x4f8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d118      	bne.n	8002a48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a16:	4b8b      	ldr	r3, [pc, #556]	; (8002c44 <HAL_RCC_OscConfig+0x4f8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a8a      	ldr	r2, [pc, #552]	; (8002c44 <HAL_RCC_OscConfig+0x4f8>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a22:	f7ff fafd 	bl	8002020 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2a:	f7ff faf9 	bl	8002020 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b64      	cmp	r3, #100	; 0x64
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e0fd      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	4b81      	ldr	r3, [pc, #516]	; (8002c44 <HAL_RCC_OscConfig+0x4f8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCC_OscConfig+0x312>
 8002a50:	4b7b      	ldr	r3, [pc, #492]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4a7a      	ldr	r2, [pc, #488]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6213      	str	r3, [r2, #32]
 8002a5c:	e02d      	b.n	8002aba <HAL_RCC_OscConfig+0x36e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x334>
 8002a66:	4b76      	ldr	r3, [pc, #472]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4a75      	ldr	r2, [pc, #468]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	6213      	str	r3, [r2, #32]
 8002a72:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	4a72      	ldr	r2, [pc, #456]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	6213      	str	r3, [r2, #32]
 8002a7e:	e01c      	b.n	8002aba <HAL_RCC_OscConfig+0x36e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d10c      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x356>
 8002a88:	4b6d      	ldr	r3, [pc, #436]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a6c      	ldr	r2, [pc, #432]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	4b6a      	ldr	r3, [pc, #424]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	4a69      	ldr	r2, [pc, #420]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6213      	str	r3, [r2, #32]
 8002aa0:	e00b      	b.n	8002aba <HAL_RCC_OscConfig+0x36e>
 8002aa2:	4b67      	ldr	r3, [pc, #412]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	4a66      	ldr	r2, [pc, #408]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6213      	str	r3, [r2, #32]
 8002aae:	4b64      	ldr	r3, [pc, #400]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	4a63      	ldr	r2, [pc, #396]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	f023 0304 	bic.w	r3, r3, #4
 8002ab8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d015      	beq.n	8002aee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac2:	f7ff faad 	bl	8002020 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7ff faa9 	bl	8002020 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0ab      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	4b57      	ldr	r3, [pc, #348]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ee      	beq.n	8002aca <HAL_RCC_OscConfig+0x37e>
 8002aec:	e014      	b.n	8002b18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7ff fa97 	bl	8002020 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7ff fa93 	bl	8002020 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e095      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0c:	4b4c      	ldr	r3, [pc, #304]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ee      	bne.n	8002af6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4b48      	ldr	r3, [pc, #288]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	4a47      	ldr	r2, [pc, #284]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8081 	beq.w	8002c36 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b34:	4b42      	ldr	r3, [pc, #264]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d061      	beq.n	8002c04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d146      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b48:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_RCC_OscConfig+0x4fc>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7ff fa67 	bl	8002020 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b56:	f7ff fa63 	bl	8002020 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e067      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b68:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7c:	d108      	bne.n	8002b90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b7e:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	492d      	ldr	r1, [pc, #180]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a19      	ldr	r1, [r3, #32]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	4927      	ldr	r1, [pc, #156]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_RCC_OscConfig+0x4fc>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7ff fa37 	bl	8002020 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7ff fa33 	bl	8002020 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e037      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x46a>
 8002bd4:	e02f      	b.n	8002c36 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <HAL_RCC_OscConfig+0x4fc>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7ff fa20 	bl	8002020 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7ff fa1c 	bl	8002020 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e020      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x498>
 8002c02:	e018      	b.n	8002c36 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e013      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40007000 	.word	0x40007000
 8002c48:	42420060 	.word	0x42420060

08002c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0d0      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d910      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 0207 	bic.w	r2, r3, #7
 8002c76:	4965      	ldr	r1, [pc, #404]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0b8      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca8:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	494d      	ldr	r1, [pc, #308]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d040      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d115      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e07f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e073      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e06b      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2a:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f023 0203 	bic.w	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4936      	ldr	r1, [pc, #216]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d3c:	f7ff f970 	bl	8002020 <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d44:	f7ff f96c 	bl	8002020 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e053      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 020c 	and.w	r2, r3, #12
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d1eb      	bne.n	8002d44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d210      	bcs.n	8002d9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 0207 	bic.w	r2, r3, #7
 8002d82:	4922      	ldr	r1, [pc, #136]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e032      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4916      	ldr	r1, [pc, #88]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	490e      	ldr	r1, [pc, #56]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dda:	f000 f821 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	490a      	ldr	r1, [pc, #40]	; (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002dec:	5ccb      	ldrb	r3, [r1, r3]
 8002dee:	fa22 f303 	lsr.w	r3, r2, r3
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1cc>)
 8002df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x1d0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff f8ce 	bl	8001f9c <HAL_InitTick>

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40022000 	.word	0x40022000
 8002e10:	40021000 	.word	0x40021000
 8002e14:	080055a4 	.word	0x080055a4
 8002e18:	20000068 	.word	0x20000068
 8002e1c:	2000006c 	.word	0x2000006c

08002e20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	2300      	movs	r3, #0
 8002e34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e3a:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d002      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x30>
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCC_GetSysClockFreq+0x36>
 8002e4e:	e027      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e52:	613b      	str	r3, [r7, #16]
      break;
 8002e54:	e027      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	0c9b      	lsrs	r3, r3, #18
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e60:	5cd3      	ldrb	r3, [r2, r3]
 8002e62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d010      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	0c5b      	lsrs	r3, r3, #17
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	4a11      	ldr	r2, [pc, #68]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e7a:	5cd3      	ldrb	r3, [r2, r3]
 8002e7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a0d      	ldr	r2, [pc, #52]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e82:	fb02 f203 	mul.w	r2, r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	e004      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e94:	fb02 f303 	mul.w	r3, r2, r3
 8002e98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	613b      	str	r3, [r7, #16]
      break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ea2:	613b      	str	r3, [r7, #16]
      break;
 8002ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea6:	693b      	ldr	r3, [r7, #16]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	007a1200 	.word	0x007a1200
 8002ebc:	080055bc 	.word	0x080055bc
 8002ec0:	080055cc 	.word	0x080055cc
 8002ec4:	003d0900 	.word	0x003d0900

08002ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ecc:	4b02      	ldr	r3, [pc, #8]	; (8002ed8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr
 8002ed8:	20000068 	.word	0x20000068

08002edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ee0:	f7ff fff2 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	4903      	ldr	r1, [pc, #12]	; (8002f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	080055b4 	.word	0x080055b4

08002f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f08:	f7ff ffde 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	0adb      	lsrs	r3, r3, #11
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	4903      	ldr	r1, [pc, #12]	; (8002f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f1a:	5ccb      	ldrb	r3, [r1, r3]
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000
 8002f28:	080055b4 	.word	0x080055b4

08002f2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f34:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <RCC_Delay+0x34>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <RCC_Delay+0x38>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	0a5b      	lsrs	r3, r3, #9
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	fb02 f303 	mul.w	r3, r2, r3
 8002f46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f48:	bf00      	nop
  }
  while (Delay --);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1e5a      	subs	r2, r3, #1
 8002f4e:	60fa      	str	r2, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f9      	bne.n	8002f48 <RCC_Delay+0x1c>
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	20000068 	.word	0x20000068
 8002f64:	10624dd3 	.word	0x10624dd3

08002f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e041      	b.n	8002ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fe f9dc 	bl	800134c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f000 fc30 	bl	800380c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	d001      	beq.n	8003020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e03a      	b.n	8003096 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <HAL_TIM_Base_Start_IT+0x98>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00e      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0x58>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304a:	d009      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0x58>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a14      	ldr	r2, [pc, #80]	; (80030a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d004      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0x58>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a13      	ldr	r2, [pc, #76]	; (80030a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d111      	bne.n	8003084 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b06      	cmp	r3, #6
 8003070:	d010      	beq.n	8003094 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0201 	orr.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	e007      	b.n	8003094 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800

080030ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e041      	b.n	8003142 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f839 	bl	800314a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f000 fb8e 	bl	800380c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <HAL_TIM_PWM_Start+0x24>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e022      	b.n	80031c6 <HAL_TIM_PWM_Start+0x6a>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b04      	cmp	r3, #4
 8003184:	d109      	bne.n	800319a <HAL_TIM_PWM_Start+0x3e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	bf14      	ite	ne
 8003192:	2301      	movne	r3, #1
 8003194:	2300      	moveq	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	e015      	b.n	80031c6 <HAL_TIM_PWM_Start+0x6a>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d109      	bne.n	80031b4 <HAL_TIM_PWM_Start+0x58>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	bf14      	ite	ne
 80031ac:	2301      	movne	r3, #1
 80031ae:	2300      	moveq	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	e008      	b.n	80031c6 <HAL_TIM_PWM_Start+0x6a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e05e      	b.n	800328c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d104      	bne.n	80031de <HAL_TIM_PWM_Start+0x82>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031dc:	e013      	b.n	8003206 <HAL_TIM_PWM_Start+0xaa>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d104      	bne.n	80031ee <HAL_TIM_PWM_Start+0x92>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ec:	e00b      	b.n	8003206 <HAL_TIM_PWM_Start+0xaa>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d104      	bne.n	80031fe <HAL_TIM_PWM_Start+0xa2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fc:	e003      	b.n	8003206 <HAL_TIM_PWM_Start+0xaa>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2202      	movs	r2, #2
 8003202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2201      	movs	r2, #1
 800320c:	6839      	ldr	r1, [r7, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fd7c 	bl	8003d0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1e      	ldr	r2, [pc, #120]	; (8003294 <HAL_TIM_PWM_Start+0x138>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d107      	bne.n	800322e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800322c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a18      	ldr	r2, [pc, #96]	; (8003294 <HAL_TIM_PWM_Start+0x138>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00e      	beq.n	8003256 <HAL_TIM_PWM_Start+0xfa>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003240:	d009      	beq.n	8003256 <HAL_TIM_PWM_Start+0xfa>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a14      	ldr	r2, [pc, #80]	; (8003298 <HAL_TIM_PWM_Start+0x13c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_TIM_PWM_Start+0xfa>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a12      	ldr	r2, [pc, #72]	; (800329c <HAL_TIM_PWM_Start+0x140>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d111      	bne.n	800327a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b06      	cmp	r3, #6
 8003266:	d010      	beq.n	800328a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003278:	e007      	b.n	800328a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0201 	orr.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800

080032a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d122      	bne.n	80032fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d11b      	bne.n	80032fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0202 	mvn.w	r2, #2
 80032cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fa76 	bl	80037d4 <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa69 	bl	80037c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fa78 	bl	80037e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b04      	cmp	r3, #4
 8003308:	d122      	bne.n	8003350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b04      	cmp	r3, #4
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0204 	mvn.w	r2, #4
 8003320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa4c 	bl	80037d4 <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fa3f 	bl	80037c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fa4e 	bl	80037e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b08      	cmp	r3, #8
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b08      	cmp	r3, #8
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0208 	mvn.w	r2, #8
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2204      	movs	r2, #4
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fa22 	bl	80037d4 <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa15 	bl	80037c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fa24 	bl	80037e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0210 	mvn.w	r2, #16
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2208      	movs	r2, #8
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f9f8 	bl	80037d4 <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f9eb 	bl	80037c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f9fa 	bl	80037e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d10e      	bne.n	8003424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d107      	bne.n	8003424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0201 	mvn.w	r2, #1
 800341c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fd faf8 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b80      	cmp	r3, #128	; 0x80
 8003430:	d10e      	bne.n	8003450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d107      	bne.n	8003450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fce9 	bl	8003e22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d10e      	bne.n	800347c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b40      	cmp	r3, #64	; 0x40
 800346a:	d107      	bne.n	800347c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f9be 	bl	80037f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b20      	cmp	r3, #32
 8003488:	d10e      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b20      	cmp	r3, #32
 8003496:	d107      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0220 	mvn.w	r2, #32
 80034a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fcb4 	bl	8003e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e0ae      	b.n	800362c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b0c      	cmp	r3, #12
 80034da:	f200 809f 	bhi.w	800361c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034de:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e4:	08003519 	.word	0x08003519
 80034e8:	0800361d 	.word	0x0800361d
 80034ec:	0800361d 	.word	0x0800361d
 80034f0:	0800361d 	.word	0x0800361d
 80034f4:	08003559 	.word	0x08003559
 80034f8:	0800361d 	.word	0x0800361d
 80034fc:	0800361d 	.word	0x0800361d
 8003500:	0800361d 	.word	0x0800361d
 8003504:	0800359b 	.word	0x0800359b
 8003508:	0800361d 	.word	0x0800361d
 800350c:	0800361d 	.word	0x0800361d
 8003510:	0800361d 	.word	0x0800361d
 8003514:	080035db 	.word	0x080035db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f9d6 	bl	80038d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699a      	ldr	r2, [r3, #24]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0208 	orr.w	r2, r2, #8
 8003532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0204 	bic.w	r2, r2, #4
 8003542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6999      	ldr	r1, [r3, #24]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	619a      	str	r2, [r3, #24]
      break;
 8003556:	e064      	b.n	8003622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fa1c 	bl	800399c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6999      	ldr	r1, [r3, #24]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	021a      	lsls	r2, r3, #8
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	619a      	str	r2, [r3, #24]
      break;
 8003598:	e043      	b.n	8003622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fa65 	bl	8003a70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0208 	orr.w	r2, r2, #8
 80035b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69da      	ldr	r2, [r3, #28]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0204 	bic.w	r2, r2, #4
 80035c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69d9      	ldr	r1, [r3, #28]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	61da      	str	r2, [r3, #28]
      break;
 80035d8:	e023      	b.n	8003622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 faaf 	bl	8003b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69d9      	ldr	r1, [r3, #28]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	021a      	lsls	r2, r3, #8
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	61da      	str	r2, [r3, #28]
      break;
 800361a:	e002      	b.n	8003622 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	75fb      	strb	r3, [r7, #23]
      break;
 8003620:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800362a:	7dfb      	ldrb	r3, [r7, #23]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_TIM_ConfigClockSource+0x1c>
 800364c:	2302      	movs	r3, #2
 800364e:	e0b4      	b.n	80037ba <HAL_TIM_ConfigClockSource+0x186>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800366e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003676:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003688:	d03e      	beq.n	8003708 <HAL_TIM_ConfigClockSource+0xd4>
 800368a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800368e:	f200 8087 	bhi.w	80037a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003696:	f000 8086 	beq.w	80037a6 <HAL_TIM_ConfigClockSource+0x172>
 800369a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800369e:	d87f      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x16c>
 80036a0:	2b70      	cmp	r3, #112	; 0x70
 80036a2:	d01a      	beq.n	80036da <HAL_TIM_ConfigClockSource+0xa6>
 80036a4:	2b70      	cmp	r3, #112	; 0x70
 80036a6:	d87b      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x16c>
 80036a8:	2b60      	cmp	r3, #96	; 0x60
 80036aa:	d050      	beq.n	800374e <HAL_TIM_ConfigClockSource+0x11a>
 80036ac:	2b60      	cmp	r3, #96	; 0x60
 80036ae:	d877      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x16c>
 80036b0:	2b50      	cmp	r3, #80	; 0x50
 80036b2:	d03c      	beq.n	800372e <HAL_TIM_ConfigClockSource+0xfa>
 80036b4:	2b50      	cmp	r3, #80	; 0x50
 80036b6:	d873      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x16c>
 80036b8:	2b40      	cmp	r3, #64	; 0x40
 80036ba:	d058      	beq.n	800376e <HAL_TIM_ConfigClockSource+0x13a>
 80036bc:	2b40      	cmp	r3, #64	; 0x40
 80036be:	d86f      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x16c>
 80036c0:	2b30      	cmp	r3, #48	; 0x30
 80036c2:	d064      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x15a>
 80036c4:	2b30      	cmp	r3, #48	; 0x30
 80036c6:	d86b      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x16c>
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d060      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x15a>
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d867      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d05c      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x15a>
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d05a      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x15a>
 80036d8:	e062      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6899      	ldr	r1, [r3, #8]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f000 faf0 	bl	8003cce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	609a      	str	r2, [r3, #8]
      break;
 8003706:	e04f      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	6899      	ldr	r1, [r3, #8]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f000 fad9 	bl	8003cce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800372a:	609a      	str	r2, [r3, #8]
      break;
 800372c:	e03c      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	461a      	mov	r2, r3
 800373c:	f000 fa50 	bl	8003be0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2150      	movs	r1, #80	; 0x50
 8003746:	4618      	mov	r0, r3
 8003748:	f000 faa7 	bl	8003c9a <TIM_ITRx_SetConfig>
      break;
 800374c:	e02c      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	6859      	ldr	r1, [r3, #4]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	461a      	mov	r2, r3
 800375c:	f000 fa6e 	bl	8003c3c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2160      	movs	r1, #96	; 0x60
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fa97 	bl	8003c9a <TIM_ITRx_SetConfig>
      break;
 800376c:	e01c      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6859      	ldr	r1, [r3, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	461a      	mov	r2, r3
 800377c:	f000 fa30 	bl	8003be0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2140      	movs	r1, #64	; 0x40
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fa87 	bl	8003c9a <TIM_ITRx_SetConfig>
      break;
 800378c:	e00c      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f000 fa7e 	bl	8003c9a <TIM_ITRx_SetConfig>
      break;
 800379e:	e003      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      break;
 80037a4:	e000      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr

080037e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
	...

0800380c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a29      	ldr	r2, [pc, #164]	; (80038c4 <TIM_Base_SetConfig+0xb8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00b      	beq.n	800383c <TIM_Base_SetConfig+0x30>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382a:	d007      	beq.n	800383c <TIM_Base_SetConfig+0x30>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a26      	ldr	r2, [pc, #152]	; (80038c8 <TIM_Base_SetConfig+0xbc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_Base_SetConfig+0x30>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a25      	ldr	r2, [pc, #148]	; (80038cc <TIM_Base_SetConfig+0xc0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d108      	bne.n	800384e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <TIM_Base_SetConfig+0xb8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00b      	beq.n	800386e <TIM_Base_SetConfig+0x62>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385c:	d007      	beq.n	800386e <TIM_Base_SetConfig+0x62>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <TIM_Base_SetConfig+0xbc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d003      	beq.n	800386e <TIM_Base_SetConfig+0x62>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a18      	ldr	r2, [pc, #96]	; (80038cc <TIM_Base_SetConfig+0xc0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d108      	bne.n	8003880 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a07      	ldr	r2, [pc, #28]	; (80038c4 <TIM_Base_SetConfig+0xb8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d103      	bne.n	80038b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	615a      	str	r2, [r3, #20]
}
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800

080038d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f023 0201 	bic.w	r2, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0303 	bic.w	r3, r3, #3
 8003906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f023 0302 	bic.w	r3, r3, #2
 8003918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a1c      	ldr	r2, [pc, #112]	; (8003998 <TIM_OC1_SetConfig+0xc8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d10c      	bne.n	8003946 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f023 0308 	bic.w	r3, r3, #8
 8003932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f023 0304 	bic.w	r3, r3, #4
 8003944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a13      	ldr	r2, [pc, #76]	; (8003998 <TIM_OC1_SetConfig+0xc8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d111      	bne.n	8003972 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800395c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	621a      	str	r2, [r3, #32]
}
 800398c:	bf00      	nop
 800398e:	371c      	adds	r7, #28
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40012c00 	.word	0x40012c00

0800399c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f023 0210 	bic.w	r2, r3, #16
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f023 0320 	bic.w	r3, r3, #32
 80039e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <TIM_OC2_SetConfig+0xd0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d10d      	bne.n	8003a18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <TIM_OC2_SetConfig+0xd0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d113      	bne.n	8003a48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr
 8003a6c:	40012c00 	.word	0x40012c00

08003a70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0303 	bic.w	r3, r3, #3
 8003aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <TIM_OC3_SetConfig+0xd0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d10d      	bne.n	8003aea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a14      	ldr	r2, [pc, #80]	; (8003b40 <TIM_OC3_SetConfig+0xd0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d113      	bne.n	8003b1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	621a      	str	r2, [r3, #32]
}
 8003b34:	bf00      	nop
 8003b36:	371c      	adds	r7, #28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40012c00 	.word	0x40012c00

08003b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	031b      	lsls	r3, r3, #12
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a0f      	ldr	r2, [pc, #60]	; (8003bdc <TIM_OC4_SetConfig+0x98>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d109      	bne.n	8003bb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	019b      	lsls	r3, r3, #6
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	40012c00 	.word	0x40012c00

08003be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f023 0201 	bic.w	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 030a 	bic.w	r3, r3, #10
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	621a      	str	r2, [r3, #32]
}
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f023 0210 	bic.w	r2, r3, #16
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	031b      	lsls	r3, r3, #12
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	621a      	str	r2, [r3, #32]
}
 8003c90:	bf00      	nop
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f043 0307 	orr.w	r3, r3, #7
 8003cbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	609a      	str	r2, [r3, #8]
}
 8003cc4:	bf00      	nop
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b087      	sub	sp, #28
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	021a      	lsls	r2, r3, #8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	609a      	str	r2, [r3, #8]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2201      	movs	r2, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1a      	ldr	r2, [r3, #32]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	401a      	ands	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a1a      	ldr	r2, [r3, #32]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	fa01 f303 	lsl.w	r3, r1, r3
 8003d44:	431a      	orrs	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	621a      	str	r2, [r3, #32]
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e046      	b.n	8003dfa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a16      	ldr	r2, [pc, #88]	; (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00e      	beq.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db8:	d009      	beq.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d004      	beq.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a10      	ldr	r2, [pc, #64]	; (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d10c      	bne.n	8003de8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800

08003e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr

08003e22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e042      	b.n	8003ecc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fd fae8 	bl	8001430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2224      	movs	r2, #36	; 0x24
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fdc5 	bl	8004a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	; 0x28
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d16d      	bne.n	8003fd0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_UART_Transmit+0x2c>
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e066      	b.n	8003fd2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2221      	movs	r2, #33	; 0x21
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f12:	f7fe f885 	bl	8002020 <HAL_GetTick>
 8003f16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	88fa      	ldrh	r2, [r7, #6]
 8003f1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	88fa      	ldrh	r2, [r7, #6]
 8003f22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2c:	d108      	bne.n	8003f40 <HAL_UART_Transmit+0x6c>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d104      	bne.n	8003f40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	e003      	b.n	8003f48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f48:	e02a      	b.n	8003fa0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2200      	movs	r2, #0
 8003f52:	2180      	movs	r1, #128	; 0x80
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fb14 	bl	8004582 <UART_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e036      	b.n	8003fd2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10b      	bne.n	8003f82 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	3302      	adds	r3, #2
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	e007      	b.n	8003f92 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	781a      	ldrb	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1cf      	bne.n	8003f4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2140      	movs	r1, #64	; 0x40
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fae4 	bl	8004582 <UART_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e006      	b.n	8003fd2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e000      	b.n	8003fd2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d112      	bne.n	800401a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_UART_Receive_IT+0x26>
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e00b      	b.n	800401c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	461a      	mov	r2, r3
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fb24 	bl	800465e <UART_Start_Receive_IT>
 8004016:	4603      	mov	r3, r0
 8004018:	e000      	b.n	800401c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b0ba      	sub	sp, #232	; 0xe8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800404a:	2300      	movs	r3, #0
 800404c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004050:	2300      	movs	r3, #0
 8004052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10f      	bne.n	800408a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_UART_IRQHandler+0x66>
 8004076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fc01 	bl	800488a <UART_Receive_IT>
      return;
 8004088:	e25b      	b.n	8004542 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800408a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 80de 	beq.w	8004250 <HAL_UART_IRQHandler+0x22c>
 8004094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d106      	bne.n	80040ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80d1 	beq.w	8004250 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00b      	beq.n	80040d2 <HAL_UART_IRQHandler+0xae>
 80040ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	f043 0201 	orr.w	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_UART_IRQHandler+0xd2>
 80040de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d005      	beq.n	80040f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	f043 0202 	orr.w	r2, r3, #2
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00b      	beq.n	800411a <HAL_UART_IRQHandler+0xf6>
 8004102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	f043 0204 	orr.w	r2, r3, #4
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800411a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d011      	beq.n	800414a <HAL_UART_IRQHandler+0x126>
 8004126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d105      	bne.n	800413e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	f043 0208 	orr.w	r2, r3, #8
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 81f2 	beq.w	8004538 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_UART_IRQHandler+0x14e>
 8004160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fb8c 	bl	800488a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf14      	ite	ne
 8004180:	2301      	movne	r3, #1
 8004182:	2300      	moveq	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <HAL_UART_IRQHandler+0x17a>
 8004196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d04f      	beq.n	800423e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fa96 	bl	80046d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d041      	beq.n	8004236 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3314      	adds	r3, #20
 80041b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3314      	adds	r3, #20
 80041da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1d9      	bne.n	80041b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d013      	beq.n	800422e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	4a7e      	ldr	r2, [pc, #504]	; (8004404 <HAL_UART_IRQHandler+0x3e0>)
 800420c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe f856 	bl	80022c4 <HAL_DMA_Abort_IT>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d016      	beq.n	800424c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004228:	4610      	mov	r0, r2
 800422a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	e00e      	b.n	800424c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f993 	bl	800455a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	e00a      	b.n	800424c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f98f 	bl	800455a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423c:	e006      	b.n	800424c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f98b 	bl	800455a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800424a:	e175      	b.n	8004538 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800424c:	bf00      	nop
    return;
 800424e:	e173      	b.n	8004538 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	2b01      	cmp	r3, #1
 8004256:	f040 814f 	bne.w	80044f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800425a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 8148 	beq.w	80044f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8141 	beq.w	80044f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004276:	2300      	movs	r3, #0
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80b6 	beq.w	8004408 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8145 	beq.w	800453c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ba:	429a      	cmp	r2, r3
 80042bc:	f080 813e 	bcs.w	800453c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	f000 8088 	beq.w	80043e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	330c      	adds	r3, #12
 80042fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004300:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004304:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800430c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1d9      	bne.n	80042d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3314      	adds	r3, #20
 8004326:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800432a:	e853 3f00 	ldrex	r3, [r3]
 800432e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004330:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3314      	adds	r3, #20
 8004340:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004344:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004348:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800434c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e1      	bne.n	8004320 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3314      	adds	r3, #20
 8004362:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800436c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800436e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3314      	adds	r3, #20
 800437c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004380:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004382:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004386:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800438e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e3      	bne.n	800435c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	330c      	adds	r3, #12
 80043a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b4:	f023 0310 	bic.w	r3, r3, #16
 80043b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	330c      	adds	r3, #12
 80043c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80043c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80043c8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e3      	bne.n	80043a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fd ff35 	bl	800224e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f8b6 	bl	800456c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004400:	e09c      	b.n	800453c <HAL_UART_IRQHandler+0x518>
 8004402:	bf00      	nop
 8004404:	08004795 	.word	0x08004795
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004410:	b29b      	uxth	r3, r3
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 808e 	beq.w	8004540 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8089 	beq.w	8004540 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800443e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004452:	647a      	str	r2, [r7, #68]	; 0x44
 8004454:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e3      	bne.n	800442e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3314      	adds	r3, #20
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	623b      	str	r3, [r7, #32]
   return(result);
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3314      	adds	r3, #20
 8004486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800448a:	633a      	str	r2, [r7, #48]	; 0x30
 800448c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e3      	bne.n	8004466 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0310 	bic.w	r3, r3, #16
 80044c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	330c      	adds	r3, #12
 80044cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80044d0:	61fa      	str	r2, [r7, #28]
 80044d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	69b9      	ldr	r1, [r7, #24]
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	617b      	str	r3, [r7, #20]
   return(result);
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e3      	bne.n	80044ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044ee:	4619      	mov	r1, r3
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f83b 	bl	800456c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044f6:	e023      	b.n	8004540 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <HAL_UART_IRQHandler+0x4f4>
 8004504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f953 	bl	80047bc <UART_Transmit_IT>
    return;
 8004516:	e014      	b.n	8004542 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00e      	beq.n	8004542 <HAL_UART_IRQHandler+0x51e>
 8004524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f992 	bl	800485a <UART_EndTransmit_IT>
    return;
 8004536:	e004      	b.n	8004542 <HAL_UART_IRQHandler+0x51e>
    return;
 8004538:	bf00      	nop
 800453a:	e002      	b.n	8004542 <HAL_UART_IRQHandler+0x51e>
      return;
 800453c:	bf00      	nop
 800453e:	e000      	b.n	8004542 <HAL_UART_IRQHandler+0x51e>
      return;
 8004540:	bf00      	nop
  }
}
 8004542:	37e8      	adds	r7, #232	; 0xe8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr

08004582 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b090      	sub	sp, #64	; 0x40
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	4613      	mov	r3, r2
 8004590:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004592:	e050      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459a:	d04c      	beq.n	8004636 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800459c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80045a2:	f7fd fd3d 	bl	8002020 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d241      	bcs.n	8004636 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045d2:	637a      	str	r2, [r7, #52]	; 0x34
 80045d4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1e5      	bne.n	80045b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3314      	adds	r3, #20
 80045ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	e853 3f00 	ldrex	r3, [r3]
 80045f4:	613b      	str	r3, [r7, #16]
   return(result);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3314      	adds	r3, #20
 8004604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004606:	623a      	str	r2, [r7, #32]
 8004608:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460a:	69f9      	ldr	r1, [r7, #28]
 800460c:	6a3a      	ldr	r2, [r7, #32]
 800460e:	e841 2300 	strex	r3, r2, [r1]
 8004612:	61bb      	str	r3, [r7, #24]
   return(result);
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e5      	bne.n	80045e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e00f      	b.n	8004656 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4013      	ands	r3, r2
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	429a      	cmp	r2, r3
 8004644:	bf0c      	ite	eq
 8004646:	2301      	moveq	r3, #1
 8004648:	2300      	movne	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	429a      	cmp	r2, r3
 8004652:	d09f      	beq.n	8004594 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3740      	adds	r7, #64	; 0x40
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	4613      	mov	r3, r2
 800466a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	88fa      	ldrh	r2, [r7, #6]
 8004676:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	88fa      	ldrh	r2, [r7, #6]
 800467c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2222      	movs	r2, #34	; 0x22
 8004688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0220 	orr.w	r2, r2, #32
 80046c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b095      	sub	sp, #84	; 0x54
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	330c      	adds	r3, #12
 80046de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	330c      	adds	r3, #12
 80046f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046f8:	643a      	str	r2, [r7, #64]	; 0x40
 80046fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e5      	bne.n	80046d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3314      	adds	r3, #20
 8004712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	61fb      	str	r3, [r7, #28]
   return(result);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	64bb      	str	r3, [r7, #72]	; 0x48
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3314      	adds	r3, #20
 800472a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800472c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e5      	bne.n	800470c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	2b01      	cmp	r3, #1
 8004746:	d119      	bne.n	800477c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	330c      	adds	r3, #12
 800474e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	60bb      	str	r3, [r7, #8]
   return(result);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f023 0310 	bic.w	r3, r3, #16
 800475e:	647b      	str	r3, [r7, #68]	; 0x44
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	330c      	adds	r3, #12
 8004766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004768:	61ba      	str	r2, [r7, #24]
 800476a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	6979      	ldr	r1, [r7, #20]
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	e841 2300 	strex	r3, r2, [r1]
 8004774:	613b      	str	r3, [r7, #16]
   return(result);
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e5      	bne.n	8004748 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	631a      	str	r2, [r3, #48]	; 0x30
}
 800478a:	bf00      	nop
 800478c:	3754      	adds	r7, #84	; 0x54
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7ff fed3 	bl	800455a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047b4:	bf00      	nop
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b21      	cmp	r3, #33	; 0x21
 80047ce:	d13e      	bne.n	800484e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d8:	d114      	bne.n	8004804 <UART_Transmit_IT+0x48>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d110      	bne.n	8004804 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	1c9a      	adds	r2, r3, #2
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	621a      	str	r2, [r3, #32]
 8004802:	e008      	b.n	8004816 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	1c59      	adds	r1, r3, #1
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6211      	str	r1, [r2, #32]
 800480e:	781a      	ldrb	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29b      	uxth	r3, r3
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	4619      	mov	r1, r3
 8004824:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10f      	bne.n	800484a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004838:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004848:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr

0800485a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004870:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff fe64 	bl	8004548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b08c      	sub	sp, #48	; 0x30
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b22      	cmp	r3, #34	; 0x22
 800489c:	f040 80ae 	bne.w	80049fc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a8:	d117      	bne.n	80048da <UART_Receive_IT+0x50>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d113      	bne.n	80048da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	1c9a      	adds	r2, r3, #2
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	629a      	str	r2, [r3, #40]	; 0x28
 80048d8:	e026      	b.n	8004928 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ec:	d007      	beq.n	80048fe <UART_Receive_IT+0x74>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10a      	bne.n	800490c <UART_Receive_IT+0x82>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	b2da      	uxtb	r2, r3
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	e008      	b.n	800491e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004918:	b2da      	uxtb	r2, r3
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29b      	uxth	r3, r3
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	4619      	mov	r1, r3
 8004936:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004938:	2b00      	cmp	r3, #0
 800493a:	d15d      	bne.n	80049f8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0220 	bic.w	r2, r2, #32
 800494a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800495a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0201 	bic.w	r2, r2, #1
 800496a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	2b01      	cmp	r3, #1
 8004980:	d135      	bne.n	80049ee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	613b      	str	r3, [r7, #16]
   return(result);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f023 0310 	bic.w	r3, r3, #16
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a8:	623a      	str	r2, [r7, #32]
 80049aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ac:	69f9      	ldr	r1, [r7, #28]
 80049ae:	6a3a      	ldr	r2, [r7, #32]
 80049b0:	e841 2300 	strex	r3, r2, [r1]
 80049b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e5      	bne.n	8004988 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d10a      	bne.n	80049e0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049e4:	4619      	mov	r1, r3
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff fdc0 	bl	800456c <HAL_UARTEx_RxEventCallback>
 80049ec:	e002      	b.n	80049f4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fb fbb4 	bl	800015c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	e002      	b.n	80049fe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	e000      	b.n	80049fe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049fc:	2302      	movs	r3, #2
  }
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3730      	adds	r7, #48	; 0x30
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a42:	f023 030c 	bic.w	r3, r3, #12
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2c      	ldr	r2, [pc, #176]	; (8004b1c <UART_SetConfig+0x114>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d103      	bne.n	8004a78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a70:	f7fe fa48 	bl	8002f04 <HAL_RCC_GetPCLK2Freq>
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	e002      	b.n	8004a7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7fe fa30 	bl	8002edc <HAL_RCC_GetPCLK1Freq>
 8004a7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	009a      	lsls	r2, r3, #2
 8004a88:	441a      	add	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	4a22      	ldr	r2, [pc, #136]	; (8004b20 <UART_SetConfig+0x118>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	0119      	lsls	r1, r3, #4
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009a      	lsls	r2, r3, #2
 8004aa8:	441a      	add	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ab4:	4b1a      	ldr	r3, [pc, #104]	; (8004b20 <UART_SetConfig+0x118>)
 8004ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	2064      	movs	r0, #100	; 0x64
 8004abe:	fb00 f303 	mul.w	r3, r0, r3
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	3332      	adds	r3, #50	; 0x32
 8004ac8:	4a15      	ldr	r2, [pc, #84]	; (8004b20 <UART_SetConfig+0x118>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ad4:	4419      	add	r1, r3
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aec:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <UART_SetConfig+0x118>)
 8004aee:	fba3 0302 	umull	r0, r3, r3, r2
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2064      	movs	r0, #100	; 0x64
 8004af6:	fb00 f303 	mul.w	r3, r0, r3
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a07      	ldr	r2, [pc, #28]	; (8004b20 <UART_SetConfig+0x118>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 020f 	and.w	r2, r3, #15
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	440a      	add	r2, r1
 8004b12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40013800 	.word	0x40013800
 8004b20:	51eb851f 	.word	0x51eb851f

08004b24 <__errno>:
 8004b24:	4b01      	ldr	r3, [pc, #4]	; (8004b2c <__errno+0x8>)
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000074 	.word	0x20000074

08004b30 <__libc_init_array>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	2600      	movs	r6, #0
 8004b34:	4d0c      	ldr	r5, [pc, #48]	; (8004b68 <__libc_init_array+0x38>)
 8004b36:	4c0d      	ldr	r4, [pc, #52]	; (8004b6c <__libc_init_array+0x3c>)
 8004b38:	1b64      	subs	r4, r4, r5
 8004b3a:	10a4      	asrs	r4, r4, #2
 8004b3c:	42a6      	cmp	r6, r4
 8004b3e:	d109      	bne.n	8004b54 <__libc_init_array+0x24>
 8004b40:	f000 fc5c 	bl	80053fc <_init>
 8004b44:	2600      	movs	r6, #0
 8004b46:	4d0a      	ldr	r5, [pc, #40]	; (8004b70 <__libc_init_array+0x40>)
 8004b48:	4c0a      	ldr	r4, [pc, #40]	; (8004b74 <__libc_init_array+0x44>)
 8004b4a:	1b64      	subs	r4, r4, r5
 8004b4c:	10a4      	asrs	r4, r4, #2
 8004b4e:	42a6      	cmp	r6, r4
 8004b50:	d105      	bne.n	8004b5e <__libc_init_array+0x2e>
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
 8004b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b58:	4798      	blx	r3
 8004b5a:	3601      	adds	r6, #1
 8004b5c:	e7ee      	b.n	8004b3c <__libc_init_array+0xc>
 8004b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b62:	4798      	blx	r3
 8004b64:	3601      	adds	r6, #1
 8004b66:	e7f2      	b.n	8004b4e <__libc_init_array+0x1e>
 8004b68:	08005604 	.word	0x08005604
 8004b6c:	08005604 	.word	0x08005604
 8004b70:	08005604 	.word	0x08005604
 8004b74:	08005608 	.word	0x08005608

08004b78 <memset>:
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4402      	add	r2, r0
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d100      	bne.n	8004b82 <memset+0xa>
 8004b80:	4770      	bx	lr
 8004b82:	f803 1b01 	strb.w	r1, [r3], #1
 8004b86:	e7f9      	b.n	8004b7c <memset+0x4>

08004b88 <siprintf>:
 8004b88:	b40e      	push	{r1, r2, r3}
 8004b8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b8e:	b500      	push	{lr}
 8004b90:	b09c      	sub	sp, #112	; 0x70
 8004b92:	ab1d      	add	r3, sp, #116	; 0x74
 8004b94:	9002      	str	r0, [sp, #8]
 8004b96:	9006      	str	r0, [sp, #24]
 8004b98:	9107      	str	r1, [sp, #28]
 8004b9a:	9104      	str	r1, [sp, #16]
 8004b9c:	4808      	ldr	r0, [pc, #32]	; (8004bc0 <siprintf+0x38>)
 8004b9e:	4909      	ldr	r1, [pc, #36]	; (8004bc4 <siprintf+0x3c>)
 8004ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ba4:	9105      	str	r1, [sp, #20]
 8004ba6:	6800      	ldr	r0, [r0, #0]
 8004ba8:	a902      	add	r1, sp, #8
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	f000 f868 	bl	8004c80 <_svfiprintf_r>
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	9b02      	ldr	r3, [sp, #8]
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	b01c      	add	sp, #112	; 0x70
 8004bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bbc:	b003      	add	sp, #12
 8004bbe:	4770      	bx	lr
 8004bc0:	20000074 	.word	0x20000074
 8004bc4:	ffff0208 	.word	0xffff0208

08004bc8 <__ssputs_r>:
 8004bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bcc:	688e      	ldr	r6, [r1, #8]
 8004bce:	4682      	mov	sl, r0
 8004bd0:	429e      	cmp	r6, r3
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	4690      	mov	r8, r2
 8004bd6:	461f      	mov	r7, r3
 8004bd8:	d838      	bhi.n	8004c4c <__ssputs_r+0x84>
 8004bda:	898a      	ldrh	r2, [r1, #12]
 8004bdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004be0:	d032      	beq.n	8004c48 <__ssputs_r+0x80>
 8004be2:	6825      	ldr	r5, [r4, #0]
 8004be4:	6909      	ldr	r1, [r1, #16]
 8004be6:	3301      	adds	r3, #1
 8004be8:	eba5 0901 	sub.w	r9, r5, r1
 8004bec:	6965      	ldr	r5, [r4, #20]
 8004bee:	444b      	add	r3, r9
 8004bf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bf8:	106d      	asrs	r5, r5, #1
 8004bfa:	429d      	cmp	r5, r3
 8004bfc:	bf38      	it	cc
 8004bfe:	461d      	movcc	r5, r3
 8004c00:	0553      	lsls	r3, r2, #21
 8004c02:	d531      	bpl.n	8004c68 <__ssputs_r+0xa0>
 8004c04:	4629      	mov	r1, r5
 8004c06:	f000 fb53 	bl	80052b0 <_malloc_r>
 8004c0a:	4606      	mov	r6, r0
 8004c0c:	b950      	cbnz	r0, 8004c24 <__ssputs_r+0x5c>
 8004c0e:	230c      	movs	r3, #12
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295
 8004c14:	f8ca 3000 	str.w	r3, [sl]
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c1e:	81a3      	strh	r3, [r4, #12]
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	464a      	mov	r2, r9
 8004c26:	6921      	ldr	r1, [r4, #16]
 8004c28:	f000 face 	bl	80051c8 <memcpy>
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c36:	81a3      	strh	r3, [r4, #12]
 8004c38:	6126      	str	r6, [r4, #16]
 8004c3a:	444e      	add	r6, r9
 8004c3c:	6026      	str	r6, [r4, #0]
 8004c3e:	463e      	mov	r6, r7
 8004c40:	6165      	str	r5, [r4, #20]
 8004c42:	eba5 0509 	sub.w	r5, r5, r9
 8004c46:	60a5      	str	r5, [r4, #8]
 8004c48:	42be      	cmp	r6, r7
 8004c4a:	d900      	bls.n	8004c4e <__ssputs_r+0x86>
 8004c4c:	463e      	mov	r6, r7
 8004c4e:	4632      	mov	r2, r6
 8004c50:	4641      	mov	r1, r8
 8004c52:	6820      	ldr	r0, [r4, #0]
 8004c54:	f000 fac6 	bl	80051e4 <memmove>
 8004c58:	68a3      	ldr	r3, [r4, #8]
 8004c5a:	6822      	ldr	r2, [r4, #0]
 8004c5c:	1b9b      	subs	r3, r3, r6
 8004c5e:	4432      	add	r2, r6
 8004c60:	2000      	movs	r0, #0
 8004c62:	60a3      	str	r3, [r4, #8]
 8004c64:	6022      	str	r2, [r4, #0]
 8004c66:	e7db      	b.n	8004c20 <__ssputs_r+0x58>
 8004c68:	462a      	mov	r2, r5
 8004c6a:	f000 fb7b 	bl	8005364 <_realloc_r>
 8004c6e:	4606      	mov	r6, r0
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d1e1      	bne.n	8004c38 <__ssputs_r+0x70>
 8004c74:	4650      	mov	r0, sl
 8004c76:	6921      	ldr	r1, [r4, #16]
 8004c78:	f000 face 	bl	8005218 <_free_r>
 8004c7c:	e7c7      	b.n	8004c0e <__ssputs_r+0x46>
	...

08004c80 <_svfiprintf_r>:
 8004c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c84:	4698      	mov	r8, r3
 8004c86:	898b      	ldrh	r3, [r1, #12]
 8004c88:	4607      	mov	r7, r0
 8004c8a:	061b      	lsls	r3, r3, #24
 8004c8c:	460d      	mov	r5, r1
 8004c8e:	4614      	mov	r4, r2
 8004c90:	b09d      	sub	sp, #116	; 0x74
 8004c92:	d50e      	bpl.n	8004cb2 <_svfiprintf_r+0x32>
 8004c94:	690b      	ldr	r3, [r1, #16]
 8004c96:	b963      	cbnz	r3, 8004cb2 <_svfiprintf_r+0x32>
 8004c98:	2140      	movs	r1, #64	; 0x40
 8004c9a:	f000 fb09 	bl	80052b0 <_malloc_r>
 8004c9e:	6028      	str	r0, [r5, #0]
 8004ca0:	6128      	str	r0, [r5, #16]
 8004ca2:	b920      	cbnz	r0, 8004cae <_svfiprintf_r+0x2e>
 8004ca4:	230c      	movs	r3, #12
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cac:	e0d1      	b.n	8004e52 <_svfiprintf_r+0x1d2>
 8004cae:	2340      	movs	r3, #64	; 0x40
 8004cb0:	616b      	str	r3, [r5, #20]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb6:	2320      	movs	r3, #32
 8004cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cbc:	2330      	movs	r3, #48	; 0x30
 8004cbe:	f04f 0901 	mov.w	r9, #1
 8004cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e6c <_svfiprintf_r+0x1ec>
 8004cca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cce:	4623      	mov	r3, r4
 8004cd0:	469a      	mov	sl, r3
 8004cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cd6:	b10a      	cbz	r2, 8004cdc <_svfiprintf_r+0x5c>
 8004cd8:	2a25      	cmp	r2, #37	; 0x25
 8004cda:	d1f9      	bne.n	8004cd0 <_svfiprintf_r+0x50>
 8004cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ce0:	d00b      	beq.n	8004cfa <_svfiprintf_r+0x7a>
 8004ce2:	465b      	mov	r3, fp
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	4638      	mov	r0, r7
 8004cea:	f7ff ff6d 	bl	8004bc8 <__ssputs_r>
 8004cee:	3001      	adds	r0, #1
 8004cf0:	f000 80aa 	beq.w	8004e48 <_svfiprintf_r+0x1c8>
 8004cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf6:	445a      	add	r2, fp
 8004cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8004cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80a2 	beq.w	8004e48 <_svfiprintf_r+0x1c8>
 8004d04:	2300      	movs	r3, #0
 8004d06:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d0e:	f10a 0a01 	add.w	sl, sl, #1
 8004d12:	9304      	str	r3, [sp, #16]
 8004d14:	9307      	str	r3, [sp, #28]
 8004d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d1c:	4654      	mov	r4, sl
 8004d1e:	2205      	movs	r2, #5
 8004d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d24:	4851      	ldr	r0, [pc, #324]	; (8004e6c <_svfiprintf_r+0x1ec>)
 8004d26:	f000 fa41 	bl	80051ac <memchr>
 8004d2a:	9a04      	ldr	r2, [sp, #16]
 8004d2c:	b9d8      	cbnz	r0, 8004d66 <_svfiprintf_r+0xe6>
 8004d2e:	06d0      	lsls	r0, r2, #27
 8004d30:	bf44      	itt	mi
 8004d32:	2320      	movmi	r3, #32
 8004d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d38:	0711      	lsls	r1, r2, #28
 8004d3a:	bf44      	itt	mi
 8004d3c:	232b      	movmi	r3, #43	; 0x2b
 8004d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d42:	f89a 3000 	ldrb.w	r3, [sl]
 8004d46:	2b2a      	cmp	r3, #42	; 0x2a
 8004d48:	d015      	beq.n	8004d76 <_svfiprintf_r+0xf6>
 8004d4a:	4654      	mov	r4, sl
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f04f 0c0a 	mov.w	ip, #10
 8004d52:	9a07      	ldr	r2, [sp, #28]
 8004d54:	4621      	mov	r1, r4
 8004d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d5a:	3b30      	subs	r3, #48	; 0x30
 8004d5c:	2b09      	cmp	r3, #9
 8004d5e:	d94e      	bls.n	8004dfe <_svfiprintf_r+0x17e>
 8004d60:	b1b0      	cbz	r0, 8004d90 <_svfiprintf_r+0x110>
 8004d62:	9207      	str	r2, [sp, #28]
 8004d64:	e014      	b.n	8004d90 <_svfiprintf_r+0x110>
 8004d66:	eba0 0308 	sub.w	r3, r0, r8
 8004d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	46a2      	mov	sl, r4
 8004d72:	9304      	str	r3, [sp, #16]
 8004d74:	e7d2      	b.n	8004d1c <_svfiprintf_r+0x9c>
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	1d19      	adds	r1, r3, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	9103      	str	r1, [sp, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bfbb      	ittet	lt
 8004d82:	425b      	neglt	r3, r3
 8004d84:	f042 0202 	orrlt.w	r2, r2, #2
 8004d88:	9307      	strge	r3, [sp, #28]
 8004d8a:	9307      	strlt	r3, [sp, #28]
 8004d8c:	bfb8      	it	lt
 8004d8e:	9204      	strlt	r2, [sp, #16]
 8004d90:	7823      	ldrb	r3, [r4, #0]
 8004d92:	2b2e      	cmp	r3, #46	; 0x2e
 8004d94:	d10c      	bne.n	8004db0 <_svfiprintf_r+0x130>
 8004d96:	7863      	ldrb	r3, [r4, #1]
 8004d98:	2b2a      	cmp	r3, #42	; 0x2a
 8004d9a:	d135      	bne.n	8004e08 <_svfiprintf_r+0x188>
 8004d9c:	9b03      	ldr	r3, [sp, #12]
 8004d9e:	3402      	adds	r4, #2
 8004da0:	1d1a      	adds	r2, r3, #4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	9203      	str	r2, [sp, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bfb8      	it	lt
 8004daa:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dae:	9305      	str	r3, [sp, #20]
 8004db0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e7c <_svfiprintf_r+0x1fc>
 8004db4:	2203      	movs	r2, #3
 8004db6:	4650      	mov	r0, sl
 8004db8:	7821      	ldrb	r1, [r4, #0]
 8004dba:	f000 f9f7 	bl	80051ac <memchr>
 8004dbe:	b140      	cbz	r0, 8004dd2 <_svfiprintf_r+0x152>
 8004dc0:	2340      	movs	r3, #64	; 0x40
 8004dc2:	eba0 000a 	sub.w	r0, r0, sl
 8004dc6:	fa03 f000 	lsl.w	r0, r3, r0
 8004dca:	9b04      	ldr	r3, [sp, #16]
 8004dcc:	3401      	adds	r4, #1
 8004dce:	4303      	orrs	r3, r0
 8004dd0:	9304      	str	r3, [sp, #16]
 8004dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd6:	2206      	movs	r2, #6
 8004dd8:	4825      	ldr	r0, [pc, #148]	; (8004e70 <_svfiprintf_r+0x1f0>)
 8004dda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dde:	f000 f9e5 	bl	80051ac <memchr>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d038      	beq.n	8004e58 <_svfiprintf_r+0x1d8>
 8004de6:	4b23      	ldr	r3, [pc, #140]	; (8004e74 <_svfiprintf_r+0x1f4>)
 8004de8:	bb1b      	cbnz	r3, 8004e32 <_svfiprintf_r+0x1b2>
 8004dea:	9b03      	ldr	r3, [sp, #12]
 8004dec:	3307      	adds	r3, #7
 8004dee:	f023 0307 	bic.w	r3, r3, #7
 8004df2:	3308      	adds	r3, #8
 8004df4:	9303      	str	r3, [sp, #12]
 8004df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df8:	4433      	add	r3, r6
 8004dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfc:	e767      	b.n	8004cce <_svfiprintf_r+0x4e>
 8004dfe:	460c      	mov	r4, r1
 8004e00:	2001      	movs	r0, #1
 8004e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e06:	e7a5      	b.n	8004d54 <_svfiprintf_r+0xd4>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f04f 0c0a 	mov.w	ip, #10
 8004e0e:	4619      	mov	r1, r3
 8004e10:	3401      	adds	r4, #1
 8004e12:	9305      	str	r3, [sp, #20]
 8004e14:	4620      	mov	r0, r4
 8004e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e1a:	3a30      	subs	r2, #48	; 0x30
 8004e1c:	2a09      	cmp	r2, #9
 8004e1e:	d903      	bls.n	8004e28 <_svfiprintf_r+0x1a8>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0c5      	beq.n	8004db0 <_svfiprintf_r+0x130>
 8004e24:	9105      	str	r1, [sp, #20]
 8004e26:	e7c3      	b.n	8004db0 <_svfiprintf_r+0x130>
 8004e28:	4604      	mov	r4, r0
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e30:	e7f0      	b.n	8004e14 <_svfiprintf_r+0x194>
 8004e32:	ab03      	add	r3, sp, #12
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	462a      	mov	r2, r5
 8004e38:	4638      	mov	r0, r7
 8004e3a:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <_svfiprintf_r+0x1f8>)
 8004e3c:	a904      	add	r1, sp, #16
 8004e3e:	f3af 8000 	nop.w
 8004e42:	1c42      	adds	r2, r0, #1
 8004e44:	4606      	mov	r6, r0
 8004e46:	d1d6      	bne.n	8004df6 <_svfiprintf_r+0x176>
 8004e48:	89ab      	ldrh	r3, [r5, #12]
 8004e4a:	065b      	lsls	r3, r3, #25
 8004e4c:	f53f af2c 	bmi.w	8004ca8 <_svfiprintf_r+0x28>
 8004e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e52:	b01d      	add	sp, #116	; 0x74
 8004e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e58:	ab03      	add	r3, sp, #12
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	462a      	mov	r2, r5
 8004e5e:	4638      	mov	r0, r7
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <_svfiprintf_r+0x1f8>)
 8004e62:	a904      	add	r1, sp, #16
 8004e64:	f000 f87c 	bl	8004f60 <_printf_i>
 8004e68:	e7eb      	b.n	8004e42 <_svfiprintf_r+0x1c2>
 8004e6a:	bf00      	nop
 8004e6c:	080055ce 	.word	0x080055ce
 8004e70:	080055d8 	.word	0x080055d8
 8004e74:	00000000 	.word	0x00000000
 8004e78:	08004bc9 	.word	0x08004bc9
 8004e7c:	080055d4 	.word	0x080055d4

08004e80 <_printf_common>:
 8004e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e84:	4616      	mov	r6, r2
 8004e86:	4699      	mov	r9, r3
 8004e88:	688a      	ldr	r2, [r1, #8]
 8004e8a:	690b      	ldr	r3, [r1, #16]
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bfb8      	it	lt
 8004e92:	4613      	movlt	r3, r2
 8004e94:	6033      	str	r3, [r6, #0]
 8004e96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ea0:	b10a      	cbz	r2, 8004ea6 <_printf_common+0x26>
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	0699      	lsls	r1, r3, #26
 8004eaa:	bf42      	ittt	mi
 8004eac:	6833      	ldrmi	r3, [r6, #0]
 8004eae:	3302      	addmi	r3, #2
 8004eb0:	6033      	strmi	r3, [r6, #0]
 8004eb2:	6825      	ldr	r5, [r4, #0]
 8004eb4:	f015 0506 	ands.w	r5, r5, #6
 8004eb8:	d106      	bne.n	8004ec8 <_printf_common+0x48>
 8004eba:	f104 0a19 	add.w	sl, r4, #25
 8004ebe:	68e3      	ldr	r3, [r4, #12]
 8004ec0:	6832      	ldr	r2, [r6, #0]
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	42ab      	cmp	r3, r5
 8004ec6:	dc28      	bgt.n	8004f1a <_printf_common+0x9a>
 8004ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ecc:	1e13      	subs	r3, r2, #0
 8004ece:	6822      	ldr	r2, [r4, #0]
 8004ed0:	bf18      	it	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	0692      	lsls	r2, r2, #26
 8004ed6:	d42d      	bmi.n	8004f34 <_printf_common+0xb4>
 8004ed8:	4649      	mov	r1, r9
 8004eda:	4638      	mov	r0, r7
 8004edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ee0:	47c0      	blx	r8
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d020      	beq.n	8004f28 <_printf_common+0xa8>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	68e5      	ldr	r5, [r4, #12]
 8004eea:	f003 0306 	and.w	r3, r3, #6
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	bf18      	it	ne
 8004ef2:	2500      	movne	r5, #0
 8004ef4:	6832      	ldr	r2, [r6, #0]
 8004ef6:	f04f 0600 	mov.w	r6, #0
 8004efa:	68a3      	ldr	r3, [r4, #8]
 8004efc:	bf08      	it	eq
 8004efe:	1aad      	subeq	r5, r5, r2
 8004f00:	6922      	ldr	r2, [r4, #16]
 8004f02:	bf08      	it	eq
 8004f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	bfc4      	itt	gt
 8004f0c:	1a9b      	subgt	r3, r3, r2
 8004f0e:	18ed      	addgt	r5, r5, r3
 8004f10:	341a      	adds	r4, #26
 8004f12:	42b5      	cmp	r5, r6
 8004f14:	d11a      	bne.n	8004f4c <_printf_common+0xcc>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e008      	b.n	8004f2c <_printf_common+0xac>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	4649      	mov	r1, r9
 8004f20:	4638      	mov	r0, r7
 8004f22:	47c0      	blx	r8
 8004f24:	3001      	adds	r0, #1
 8004f26:	d103      	bne.n	8004f30 <_printf_common+0xb0>
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f30:	3501      	adds	r5, #1
 8004f32:	e7c4      	b.n	8004ebe <_printf_common+0x3e>
 8004f34:	2030      	movs	r0, #48	; 0x30
 8004f36:	18e1      	adds	r1, r4, r3
 8004f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f42:	4422      	add	r2, r4
 8004f44:	3302      	adds	r3, #2
 8004f46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f4a:	e7c5      	b.n	8004ed8 <_printf_common+0x58>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4622      	mov	r2, r4
 8004f50:	4649      	mov	r1, r9
 8004f52:	4638      	mov	r0, r7
 8004f54:	47c0      	blx	r8
 8004f56:	3001      	adds	r0, #1
 8004f58:	d0e6      	beq.n	8004f28 <_printf_common+0xa8>
 8004f5a:	3601      	adds	r6, #1
 8004f5c:	e7d9      	b.n	8004f12 <_printf_common+0x92>
	...

08004f60 <_printf_i>:
 8004f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	460c      	mov	r4, r1
 8004f66:	7e27      	ldrb	r7, [r4, #24]
 8004f68:	4691      	mov	r9, r2
 8004f6a:	2f78      	cmp	r7, #120	; 0x78
 8004f6c:	4680      	mov	r8, r0
 8004f6e:	469a      	mov	sl, r3
 8004f70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f76:	d807      	bhi.n	8004f88 <_printf_i+0x28>
 8004f78:	2f62      	cmp	r7, #98	; 0x62
 8004f7a:	d80a      	bhi.n	8004f92 <_printf_i+0x32>
 8004f7c:	2f00      	cmp	r7, #0
 8004f7e:	f000 80d9 	beq.w	8005134 <_printf_i+0x1d4>
 8004f82:	2f58      	cmp	r7, #88	; 0x58
 8004f84:	f000 80a4 	beq.w	80050d0 <_printf_i+0x170>
 8004f88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f90:	e03a      	b.n	8005008 <_printf_i+0xa8>
 8004f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f96:	2b15      	cmp	r3, #21
 8004f98:	d8f6      	bhi.n	8004f88 <_printf_i+0x28>
 8004f9a:	a001      	add	r0, pc, #4	; (adr r0, 8004fa0 <_printf_i+0x40>)
 8004f9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004fa0:	08004ff9 	.word	0x08004ff9
 8004fa4:	0800500d 	.word	0x0800500d
 8004fa8:	08004f89 	.word	0x08004f89
 8004fac:	08004f89 	.word	0x08004f89
 8004fb0:	08004f89 	.word	0x08004f89
 8004fb4:	08004f89 	.word	0x08004f89
 8004fb8:	0800500d 	.word	0x0800500d
 8004fbc:	08004f89 	.word	0x08004f89
 8004fc0:	08004f89 	.word	0x08004f89
 8004fc4:	08004f89 	.word	0x08004f89
 8004fc8:	08004f89 	.word	0x08004f89
 8004fcc:	0800511b 	.word	0x0800511b
 8004fd0:	0800503d 	.word	0x0800503d
 8004fd4:	080050fd 	.word	0x080050fd
 8004fd8:	08004f89 	.word	0x08004f89
 8004fdc:	08004f89 	.word	0x08004f89
 8004fe0:	0800513d 	.word	0x0800513d
 8004fe4:	08004f89 	.word	0x08004f89
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08004f89 	.word	0x08004f89
 8004ff0:	08004f89 	.word	0x08004f89
 8004ff4:	08005105 	.word	0x08005105
 8004ff8:	680b      	ldr	r3, [r1, #0]
 8004ffa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ffe:	1d1a      	adds	r2, r3, #4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	600a      	str	r2, [r1, #0]
 8005004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005008:	2301      	movs	r3, #1
 800500a:	e0a4      	b.n	8005156 <_printf_i+0x1f6>
 800500c:	6825      	ldr	r5, [r4, #0]
 800500e:	6808      	ldr	r0, [r1, #0]
 8005010:	062e      	lsls	r6, r5, #24
 8005012:	f100 0304 	add.w	r3, r0, #4
 8005016:	d50a      	bpl.n	800502e <_printf_i+0xce>
 8005018:	6805      	ldr	r5, [r0, #0]
 800501a:	600b      	str	r3, [r1, #0]
 800501c:	2d00      	cmp	r5, #0
 800501e:	da03      	bge.n	8005028 <_printf_i+0xc8>
 8005020:	232d      	movs	r3, #45	; 0x2d
 8005022:	426d      	negs	r5, r5
 8005024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005028:	230a      	movs	r3, #10
 800502a:	485e      	ldr	r0, [pc, #376]	; (80051a4 <_printf_i+0x244>)
 800502c:	e019      	b.n	8005062 <_printf_i+0x102>
 800502e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005032:	6805      	ldr	r5, [r0, #0]
 8005034:	600b      	str	r3, [r1, #0]
 8005036:	bf18      	it	ne
 8005038:	b22d      	sxthne	r5, r5
 800503a:	e7ef      	b.n	800501c <_printf_i+0xbc>
 800503c:	680b      	ldr	r3, [r1, #0]
 800503e:	6825      	ldr	r5, [r4, #0]
 8005040:	1d18      	adds	r0, r3, #4
 8005042:	6008      	str	r0, [r1, #0]
 8005044:	0628      	lsls	r0, r5, #24
 8005046:	d501      	bpl.n	800504c <_printf_i+0xec>
 8005048:	681d      	ldr	r5, [r3, #0]
 800504a:	e002      	b.n	8005052 <_printf_i+0xf2>
 800504c:	0669      	lsls	r1, r5, #25
 800504e:	d5fb      	bpl.n	8005048 <_printf_i+0xe8>
 8005050:	881d      	ldrh	r5, [r3, #0]
 8005052:	2f6f      	cmp	r7, #111	; 0x6f
 8005054:	bf0c      	ite	eq
 8005056:	2308      	moveq	r3, #8
 8005058:	230a      	movne	r3, #10
 800505a:	4852      	ldr	r0, [pc, #328]	; (80051a4 <_printf_i+0x244>)
 800505c:	2100      	movs	r1, #0
 800505e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005062:	6866      	ldr	r6, [r4, #4]
 8005064:	2e00      	cmp	r6, #0
 8005066:	bfa8      	it	ge
 8005068:	6821      	ldrge	r1, [r4, #0]
 800506a:	60a6      	str	r6, [r4, #8]
 800506c:	bfa4      	itt	ge
 800506e:	f021 0104 	bicge.w	r1, r1, #4
 8005072:	6021      	strge	r1, [r4, #0]
 8005074:	b90d      	cbnz	r5, 800507a <_printf_i+0x11a>
 8005076:	2e00      	cmp	r6, #0
 8005078:	d04d      	beq.n	8005116 <_printf_i+0x1b6>
 800507a:	4616      	mov	r6, r2
 800507c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005080:	fb03 5711 	mls	r7, r3, r1, r5
 8005084:	5dc7      	ldrb	r7, [r0, r7]
 8005086:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800508a:	462f      	mov	r7, r5
 800508c:	42bb      	cmp	r3, r7
 800508e:	460d      	mov	r5, r1
 8005090:	d9f4      	bls.n	800507c <_printf_i+0x11c>
 8005092:	2b08      	cmp	r3, #8
 8005094:	d10b      	bne.n	80050ae <_printf_i+0x14e>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	07df      	lsls	r7, r3, #31
 800509a:	d508      	bpl.n	80050ae <_printf_i+0x14e>
 800509c:	6923      	ldr	r3, [r4, #16]
 800509e:	6861      	ldr	r1, [r4, #4]
 80050a0:	4299      	cmp	r1, r3
 80050a2:	bfde      	ittt	le
 80050a4:	2330      	movle	r3, #48	; 0x30
 80050a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050ae:	1b92      	subs	r2, r2, r6
 80050b0:	6122      	str	r2, [r4, #16]
 80050b2:	464b      	mov	r3, r9
 80050b4:	4621      	mov	r1, r4
 80050b6:	4640      	mov	r0, r8
 80050b8:	f8cd a000 	str.w	sl, [sp]
 80050bc:	aa03      	add	r2, sp, #12
 80050be:	f7ff fedf 	bl	8004e80 <_printf_common>
 80050c2:	3001      	adds	r0, #1
 80050c4:	d14c      	bne.n	8005160 <_printf_i+0x200>
 80050c6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ca:	b004      	add	sp, #16
 80050cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d0:	4834      	ldr	r0, [pc, #208]	; (80051a4 <_printf_i+0x244>)
 80050d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050d6:	680e      	ldr	r6, [r1, #0]
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	f856 5b04 	ldr.w	r5, [r6], #4
 80050de:	061f      	lsls	r7, r3, #24
 80050e0:	600e      	str	r6, [r1, #0]
 80050e2:	d514      	bpl.n	800510e <_printf_i+0x1ae>
 80050e4:	07d9      	lsls	r1, r3, #31
 80050e6:	bf44      	itt	mi
 80050e8:	f043 0320 	orrmi.w	r3, r3, #32
 80050ec:	6023      	strmi	r3, [r4, #0]
 80050ee:	b91d      	cbnz	r5, 80050f8 <_printf_i+0x198>
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	f023 0320 	bic.w	r3, r3, #32
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	2310      	movs	r3, #16
 80050fa:	e7af      	b.n	800505c <_printf_i+0xfc>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	f043 0320 	orr.w	r3, r3, #32
 8005102:	6023      	str	r3, [r4, #0]
 8005104:	2378      	movs	r3, #120	; 0x78
 8005106:	4828      	ldr	r0, [pc, #160]	; (80051a8 <_printf_i+0x248>)
 8005108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800510c:	e7e3      	b.n	80050d6 <_printf_i+0x176>
 800510e:	065e      	lsls	r6, r3, #25
 8005110:	bf48      	it	mi
 8005112:	b2ad      	uxthmi	r5, r5
 8005114:	e7e6      	b.n	80050e4 <_printf_i+0x184>
 8005116:	4616      	mov	r6, r2
 8005118:	e7bb      	b.n	8005092 <_printf_i+0x132>
 800511a:	680b      	ldr	r3, [r1, #0]
 800511c:	6826      	ldr	r6, [r4, #0]
 800511e:	1d1d      	adds	r5, r3, #4
 8005120:	6960      	ldr	r0, [r4, #20]
 8005122:	600d      	str	r5, [r1, #0]
 8005124:	0635      	lsls	r5, r6, #24
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	d501      	bpl.n	800512e <_printf_i+0x1ce>
 800512a:	6018      	str	r0, [r3, #0]
 800512c:	e002      	b.n	8005134 <_printf_i+0x1d4>
 800512e:	0671      	lsls	r1, r6, #25
 8005130:	d5fb      	bpl.n	800512a <_printf_i+0x1ca>
 8005132:	8018      	strh	r0, [r3, #0]
 8005134:	2300      	movs	r3, #0
 8005136:	4616      	mov	r6, r2
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	e7ba      	b.n	80050b2 <_printf_i+0x152>
 800513c:	680b      	ldr	r3, [r1, #0]
 800513e:	1d1a      	adds	r2, r3, #4
 8005140:	600a      	str	r2, [r1, #0]
 8005142:	681e      	ldr	r6, [r3, #0]
 8005144:	2100      	movs	r1, #0
 8005146:	4630      	mov	r0, r6
 8005148:	6862      	ldr	r2, [r4, #4]
 800514a:	f000 f82f 	bl	80051ac <memchr>
 800514e:	b108      	cbz	r0, 8005154 <_printf_i+0x1f4>
 8005150:	1b80      	subs	r0, r0, r6
 8005152:	6060      	str	r0, [r4, #4]
 8005154:	6863      	ldr	r3, [r4, #4]
 8005156:	6123      	str	r3, [r4, #16]
 8005158:	2300      	movs	r3, #0
 800515a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800515e:	e7a8      	b.n	80050b2 <_printf_i+0x152>
 8005160:	4632      	mov	r2, r6
 8005162:	4649      	mov	r1, r9
 8005164:	4640      	mov	r0, r8
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	47d0      	blx	sl
 800516a:	3001      	adds	r0, #1
 800516c:	d0ab      	beq.n	80050c6 <_printf_i+0x166>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	079b      	lsls	r3, r3, #30
 8005172:	d413      	bmi.n	800519c <_printf_i+0x23c>
 8005174:	68e0      	ldr	r0, [r4, #12]
 8005176:	9b03      	ldr	r3, [sp, #12]
 8005178:	4298      	cmp	r0, r3
 800517a:	bfb8      	it	lt
 800517c:	4618      	movlt	r0, r3
 800517e:	e7a4      	b.n	80050ca <_printf_i+0x16a>
 8005180:	2301      	movs	r3, #1
 8005182:	4632      	mov	r2, r6
 8005184:	4649      	mov	r1, r9
 8005186:	4640      	mov	r0, r8
 8005188:	47d0      	blx	sl
 800518a:	3001      	adds	r0, #1
 800518c:	d09b      	beq.n	80050c6 <_printf_i+0x166>
 800518e:	3501      	adds	r5, #1
 8005190:	68e3      	ldr	r3, [r4, #12]
 8005192:	9903      	ldr	r1, [sp, #12]
 8005194:	1a5b      	subs	r3, r3, r1
 8005196:	42ab      	cmp	r3, r5
 8005198:	dcf2      	bgt.n	8005180 <_printf_i+0x220>
 800519a:	e7eb      	b.n	8005174 <_printf_i+0x214>
 800519c:	2500      	movs	r5, #0
 800519e:	f104 0619 	add.w	r6, r4, #25
 80051a2:	e7f5      	b.n	8005190 <_printf_i+0x230>
 80051a4:	080055df 	.word	0x080055df
 80051a8:	080055f0 	.word	0x080055f0

080051ac <memchr>:
 80051ac:	4603      	mov	r3, r0
 80051ae:	b510      	push	{r4, lr}
 80051b0:	b2c9      	uxtb	r1, r1
 80051b2:	4402      	add	r2, r0
 80051b4:	4293      	cmp	r3, r2
 80051b6:	4618      	mov	r0, r3
 80051b8:	d101      	bne.n	80051be <memchr+0x12>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e003      	b.n	80051c6 <memchr+0x1a>
 80051be:	7804      	ldrb	r4, [r0, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	428c      	cmp	r4, r1
 80051c4:	d1f6      	bne.n	80051b4 <memchr+0x8>
 80051c6:	bd10      	pop	{r4, pc}

080051c8 <memcpy>:
 80051c8:	440a      	add	r2, r1
 80051ca:	4291      	cmp	r1, r2
 80051cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80051d0:	d100      	bne.n	80051d4 <memcpy+0xc>
 80051d2:	4770      	bx	lr
 80051d4:	b510      	push	{r4, lr}
 80051d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051da:	4291      	cmp	r1, r2
 80051dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051e0:	d1f9      	bne.n	80051d6 <memcpy+0xe>
 80051e2:	bd10      	pop	{r4, pc}

080051e4 <memmove>:
 80051e4:	4288      	cmp	r0, r1
 80051e6:	b510      	push	{r4, lr}
 80051e8:	eb01 0402 	add.w	r4, r1, r2
 80051ec:	d902      	bls.n	80051f4 <memmove+0x10>
 80051ee:	4284      	cmp	r4, r0
 80051f0:	4623      	mov	r3, r4
 80051f2:	d807      	bhi.n	8005204 <memmove+0x20>
 80051f4:	1e43      	subs	r3, r0, #1
 80051f6:	42a1      	cmp	r1, r4
 80051f8:	d008      	beq.n	800520c <memmove+0x28>
 80051fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005202:	e7f8      	b.n	80051f6 <memmove+0x12>
 8005204:	4601      	mov	r1, r0
 8005206:	4402      	add	r2, r0
 8005208:	428a      	cmp	r2, r1
 800520a:	d100      	bne.n	800520e <memmove+0x2a>
 800520c:	bd10      	pop	{r4, pc}
 800520e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005216:	e7f7      	b.n	8005208 <memmove+0x24>

08005218 <_free_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4605      	mov	r5, r0
 800521c:	2900      	cmp	r1, #0
 800521e:	d043      	beq.n	80052a8 <_free_r+0x90>
 8005220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005224:	1f0c      	subs	r4, r1, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	bfb8      	it	lt
 800522a:	18e4      	addlt	r4, r4, r3
 800522c:	f000 f8d0 	bl	80053d0 <__malloc_lock>
 8005230:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <_free_r+0x94>)
 8005232:	6813      	ldr	r3, [r2, #0]
 8005234:	4610      	mov	r0, r2
 8005236:	b933      	cbnz	r3, 8005246 <_free_r+0x2e>
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	6014      	str	r4, [r2, #0]
 800523c:	4628      	mov	r0, r5
 800523e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005242:	f000 b8cb 	b.w	80053dc <__malloc_unlock>
 8005246:	42a3      	cmp	r3, r4
 8005248:	d90a      	bls.n	8005260 <_free_r+0x48>
 800524a:	6821      	ldr	r1, [r4, #0]
 800524c:	1862      	adds	r2, r4, r1
 800524e:	4293      	cmp	r3, r2
 8005250:	bf01      	itttt	eq
 8005252:	681a      	ldreq	r2, [r3, #0]
 8005254:	685b      	ldreq	r3, [r3, #4]
 8005256:	1852      	addeq	r2, r2, r1
 8005258:	6022      	streq	r2, [r4, #0]
 800525a:	6063      	str	r3, [r4, #4]
 800525c:	6004      	str	r4, [r0, #0]
 800525e:	e7ed      	b.n	800523c <_free_r+0x24>
 8005260:	461a      	mov	r2, r3
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	b10b      	cbz	r3, 800526a <_free_r+0x52>
 8005266:	42a3      	cmp	r3, r4
 8005268:	d9fa      	bls.n	8005260 <_free_r+0x48>
 800526a:	6811      	ldr	r1, [r2, #0]
 800526c:	1850      	adds	r0, r2, r1
 800526e:	42a0      	cmp	r0, r4
 8005270:	d10b      	bne.n	800528a <_free_r+0x72>
 8005272:	6820      	ldr	r0, [r4, #0]
 8005274:	4401      	add	r1, r0
 8005276:	1850      	adds	r0, r2, r1
 8005278:	4283      	cmp	r3, r0
 800527a:	6011      	str	r1, [r2, #0]
 800527c:	d1de      	bne.n	800523c <_free_r+0x24>
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	4401      	add	r1, r0
 8005284:	6011      	str	r1, [r2, #0]
 8005286:	6053      	str	r3, [r2, #4]
 8005288:	e7d8      	b.n	800523c <_free_r+0x24>
 800528a:	d902      	bls.n	8005292 <_free_r+0x7a>
 800528c:	230c      	movs	r3, #12
 800528e:	602b      	str	r3, [r5, #0]
 8005290:	e7d4      	b.n	800523c <_free_r+0x24>
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	1821      	adds	r1, r4, r0
 8005296:	428b      	cmp	r3, r1
 8005298:	bf01      	itttt	eq
 800529a:	6819      	ldreq	r1, [r3, #0]
 800529c:	685b      	ldreq	r3, [r3, #4]
 800529e:	1809      	addeq	r1, r1, r0
 80052a0:	6021      	streq	r1, [r4, #0]
 80052a2:	6063      	str	r3, [r4, #4]
 80052a4:	6054      	str	r4, [r2, #4]
 80052a6:	e7c9      	b.n	800523c <_free_r+0x24>
 80052a8:	bd38      	pop	{r3, r4, r5, pc}
 80052aa:	bf00      	nop
 80052ac:	20000490 	.word	0x20000490

080052b0 <_malloc_r>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	1ccd      	adds	r5, r1, #3
 80052b4:	f025 0503 	bic.w	r5, r5, #3
 80052b8:	3508      	adds	r5, #8
 80052ba:	2d0c      	cmp	r5, #12
 80052bc:	bf38      	it	cc
 80052be:	250c      	movcc	r5, #12
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	4606      	mov	r6, r0
 80052c4:	db01      	blt.n	80052ca <_malloc_r+0x1a>
 80052c6:	42a9      	cmp	r1, r5
 80052c8:	d903      	bls.n	80052d2 <_malloc_r+0x22>
 80052ca:	230c      	movs	r3, #12
 80052cc:	6033      	str	r3, [r6, #0]
 80052ce:	2000      	movs	r0, #0
 80052d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d2:	f000 f87d 	bl	80053d0 <__malloc_lock>
 80052d6:	4921      	ldr	r1, [pc, #132]	; (800535c <_malloc_r+0xac>)
 80052d8:	680a      	ldr	r2, [r1, #0]
 80052da:	4614      	mov	r4, r2
 80052dc:	b99c      	cbnz	r4, 8005306 <_malloc_r+0x56>
 80052de:	4f20      	ldr	r7, [pc, #128]	; (8005360 <_malloc_r+0xb0>)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	b923      	cbnz	r3, 80052ee <_malloc_r+0x3e>
 80052e4:	4621      	mov	r1, r4
 80052e6:	4630      	mov	r0, r6
 80052e8:	f000 f862 	bl	80053b0 <_sbrk_r>
 80052ec:	6038      	str	r0, [r7, #0]
 80052ee:	4629      	mov	r1, r5
 80052f0:	4630      	mov	r0, r6
 80052f2:	f000 f85d 	bl	80053b0 <_sbrk_r>
 80052f6:	1c43      	adds	r3, r0, #1
 80052f8:	d123      	bne.n	8005342 <_malloc_r+0x92>
 80052fa:	230c      	movs	r3, #12
 80052fc:	4630      	mov	r0, r6
 80052fe:	6033      	str	r3, [r6, #0]
 8005300:	f000 f86c 	bl	80053dc <__malloc_unlock>
 8005304:	e7e3      	b.n	80052ce <_malloc_r+0x1e>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	1b5b      	subs	r3, r3, r5
 800530a:	d417      	bmi.n	800533c <_malloc_r+0x8c>
 800530c:	2b0b      	cmp	r3, #11
 800530e:	d903      	bls.n	8005318 <_malloc_r+0x68>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	441c      	add	r4, r3
 8005314:	6025      	str	r5, [r4, #0]
 8005316:	e004      	b.n	8005322 <_malloc_r+0x72>
 8005318:	6863      	ldr	r3, [r4, #4]
 800531a:	42a2      	cmp	r2, r4
 800531c:	bf0c      	ite	eq
 800531e:	600b      	streq	r3, [r1, #0]
 8005320:	6053      	strne	r3, [r2, #4]
 8005322:	4630      	mov	r0, r6
 8005324:	f000 f85a 	bl	80053dc <__malloc_unlock>
 8005328:	f104 000b 	add.w	r0, r4, #11
 800532c:	1d23      	adds	r3, r4, #4
 800532e:	f020 0007 	bic.w	r0, r0, #7
 8005332:	1ac2      	subs	r2, r0, r3
 8005334:	d0cc      	beq.n	80052d0 <_malloc_r+0x20>
 8005336:	1a1b      	subs	r3, r3, r0
 8005338:	50a3      	str	r3, [r4, r2]
 800533a:	e7c9      	b.n	80052d0 <_malloc_r+0x20>
 800533c:	4622      	mov	r2, r4
 800533e:	6864      	ldr	r4, [r4, #4]
 8005340:	e7cc      	b.n	80052dc <_malloc_r+0x2c>
 8005342:	1cc4      	adds	r4, r0, #3
 8005344:	f024 0403 	bic.w	r4, r4, #3
 8005348:	42a0      	cmp	r0, r4
 800534a:	d0e3      	beq.n	8005314 <_malloc_r+0x64>
 800534c:	1a21      	subs	r1, r4, r0
 800534e:	4630      	mov	r0, r6
 8005350:	f000 f82e 	bl	80053b0 <_sbrk_r>
 8005354:	3001      	adds	r0, #1
 8005356:	d1dd      	bne.n	8005314 <_malloc_r+0x64>
 8005358:	e7cf      	b.n	80052fa <_malloc_r+0x4a>
 800535a:	bf00      	nop
 800535c:	20000490 	.word	0x20000490
 8005360:	20000494 	.word	0x20000494

08005364 <_realloc_r>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	4607      	mov	r7, r0
 8005368:	4614      	mov	r4, r2
 800536a:	460e      	mov	r6, r1
 800536c:	b921      	cbnz	r1, 8005378 <_realloc_r+0x14>
 800536e:	4611      	mov	r1, r2
 8005370:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005374:	f7ff bf9c 	b.w	80052b0 <_malloc_r>
 8005378:	b922      	cbnz	r2, 8005384 <_realloc_r+0x20>
 800537a:	f7ff ff4d 	bl	8005218 <_free_r>
 800537e:	4625      	mov	r5, r4
 8005380:	4628      	mov	r0, r5
 8005382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005384:	f000 f830 	bl	80053e8 <_malloc_usable_size_r>
 8005388:	42a0      	cmp	r0, r4
 800538a:	d20f      	bcs.n	80053ac <_realloc_r+0x48>
 800538c:	4621      	mov	r1, r4
 800538e:	4638      	mov	r0, r7
 8005390:	f7ff ff8e 	bl	80052b0 <_malloc_r>
 8005394:	4605      	mov	r5, r0
 8005396:	2800      	cmp	r0, #0
 8005398:	d0f2      	beq.n	8005380 <_realloc_r+0x1c>
 800539a:	4631      	mov	r1, r6
 800539c:	4622      	mov	r2, r4
 800539e:	f7ff ff13 	bl	80051c8 <memcpy>
 80053a2:	4631      	mov	r1, r6
 80053a4:	4638      	mov	r0, r7
 80053a6:	f7ff ff37 	bl	8005218 <_free_r>
 80053aa:	e7e9      	b.n	8005380 <_realloc_r+0x1c>
 80053ac:	4635      	mov	r5, r6
 80053ae:	e7e7      	b.n	8005380 <_realloc_r+0x1c>

080053b0 <_sbrk_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	2300      	movs	r3, #0
 80053b4:	4d05      	ldr	r5, [pc, #20]	; (80053cc <_sbrk_r+0x1c>)
 80053b6:	4604      	mov	r4, r0
 80053b8:	4608      	mov	r0, r1
 80053ba:	602b      	str	r3, [r5, #0]
 80053bc:	f7fc f8d0 	bl	8001560 <_sbrk>
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	d102      	bne.n	80053ca <_sbrk_r+0x1a>
 80053c4:	682b      	ldr	r3, [r5, #0]
 80053c6:	b103      	cbz	r3, 80053ca <_sbrk_r+0x1a>
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
 80053cc:	20000578 	.word	0x20000578

080053d0 <__malloc_lock>:
 80053d0:	4801      	ldr	r0, [pc, #4]	; (80053d8 <__malloc_lock+0x8>)
 80053d2:	f000 b811 	b.w	80053f8 <__retarget_lock_acquire_recursive>
 80053d6:	bf00      	nop
 80053d8:	20000580 	.word	0x20000580

080053dc <__malloc_unlock>:
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <__malloc_unlock+0x8>)
 80053de:	f000 b80c 	b.w	80053fa <__retarget_lock_release_recursive>
 80053e2:	bf00      	nop
 80053e4:	20000580 	.word	0x20000580

080053e8 <_malloc_usable_size_r>:
 80053e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ec:	1f18      	subs	r0, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	bfbc      	itt	lt
 80053f2:	580b      	ldrlt	r3, [r1, r0]
 80053f4:	18c0      	addlt	r0, r0, r3
 80053f6:	4770      	bx	lr

080053f8 <__retarget_lock_acquire_recursive>:
 80053f8:	4770      	bx	lr

080053fa <__retarget_lock_release_recursive>:
 80053fa:	4770      	bx	lr

080053fc <_init>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	bf00      	nop
 8005400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005402:	bc08      	pop	{r3}
 8005404:	469e      	mov	lr, r3
 8005406:	4770      	bx	lr

08005408 <_fini>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	bf00      	nop
 800540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540e:	bc08      	pop	{r3}
 8005410:	469e      	mov	lr, r3
 8005412:	4770      	bx	lr
